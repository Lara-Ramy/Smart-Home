
smart_home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004982  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002ba  00800060  00004982  00004a16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001d  0080031a  0080031a  00004cd0  2**0
                  ALLOC
  3 .stab         00005568  00000000  00000000  00004cd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002271  00000000  00000000  0000a238  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 55 10 	jmp	0x20aa	; 0x20aa <__vector_10>
      2c:	0c 94 22 10 	jmp	0x2044	; 0x2044 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e8       	ldi	r30, 0x82	; 130
      68:	f9 e4       	ldi	r31, 0x49	; 73
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 31       	cpi	r26, 0x1A	; 26
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	aa e1       	ldi	r26, 0x1A	; 26
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 33       	cpi	r26, 0x37	; 55
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 81 1b 	call	0x3702	; 0x3702 <main>
      8a:	0c 94 bf 24 	jmp	0x497e	; 0x497e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 88 24 	jmp	0x4910	; 0x4910 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af ea       	ldi	r26, 0xAF	; 175
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a4 24 	jmp	0x4948	; 0x4948 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 94 24 	jmp	0x4928	; 0x4928 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 94 24 	jmp	0x4928	; 0x4928 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 88 24 	jmp	0x4910	; 0x4910 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f ea       	ldi	r24, 0xAF	; 175
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a4 24 	jmp	0x4948	; 0x4948 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 90 24 	jmp	0x4920	; 0x4920 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f ea       	ldi	r22, 0xAF	; 175
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ac 24 	jmp	0x4958	; 0x4958 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 94 24 	jmp	0x4928	; 0x4928 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 94 24 	jmp	0x4928	; 0x4928 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 94 24 	jmp	0x4928	; 0x4928 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 91 24 	jmp	0x4922	; 0x4922 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 ad 24 	jmp	0x495a	; 0x495a <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 98 24 	jmp	0x4930	; 0x4930 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 b4 24 	jmp	0x4968	; 0x4968 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 90 24 	jmp	0x4920	; 0x4920 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 ac 24 	jmp	0x4958	; 0x4958 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e9 54       	subi	r30, 0x49	; 73
     b86:	fe 4f       	sbci	r31, 0xFE	; 254
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <ADC_vInit>:
#include "REGISTERS.h"
#include <string.h>

void (*ADC_p2f)(void) = NULL;

void ADC_vInit(void){
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
	CLT_BIT(ADMUX,7);
#elif VOLT_REFERENCE == AVCC
	SET_BIT(ADMUX,6);
	CLT_BIT(ADMUX,7);
#elif VOLT_REFERENCE == INTERNAL
	SET_BIT(ADMUX,6);
     ef2:	a7 e2       	ldi	r26, 0x27	; 39
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e7 e2       	ldi	r30, 0x27	; 39
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	80 64       	ori	r24, 0x40	; 64
     efe:	8c 93       	st	X, r24
	SET_BIT(ADMUX,7);
     f00:	a7 e2       	ldi	r26, 0x27	; 39
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e7 e2       	ldi	r30, 0x27	; 39
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	80 68       	ori	r24, 0x80	; 128
     f0c:	8c 93       	st	X, r24
#endif

#if ADJUST == RIGHT
	CLR_BIT(ADMUX,5);
     f0e:	a7 e2       	ldi	r26, 0x27	; 39
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e7 e2       	ldi	r30, 0x27	; 39
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	8f 7d       	andi	r24, 0xDF	; 223
     f1a:	8c 93       	st	X, r24
#elif ADJUST == LEFT
	SET_BIT(ADMUX,5);
#endif

	Set_Prescaler();
     f1c:	0e 94 01 08 	call	0x1002	; 0x1002 <Set_Prescaler>
	SET_BIT(ADCSRA,7);
     f20:	a6 e2       	ldi	r26, 0x26	; 38
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e6 e2       	ldi	r30, 0x26	; 38
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	80 68       	ori	r24, 0x80	; 128
     f2c:	8c 93       	st	X, r24
}
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <ADC_vChannel_Select>:

void ADC_vChannel_Select(uint8 channel){
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	0f 92       	push	r0
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
     f3e:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0b11111000;
     f40:	a7 e2       	ldi	r26, 0x27	; 39
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e7 e2       	ldi	r30, 0x27	; 39
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	88 7f       	andi	r24, 0xF8	; 248
     f4c:	8c 93       	st	X, r24
	channel &= 0x07;
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
     f50:	87 70       	andi	r24, 0x07	; 7
     f52:	89 83       	std	Y+1, r24	; 0x01
	ADMUX |= channel;
     f54:	a7 e2       	ldi	r26, 0x27	; 39
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e7 e2       	ldi	r30, 0x27	; 39
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	90 81       	ld	r25, Z
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	89 2b       	or	r24, r25
     f62:	8c 93       	st	X, r24
//	SET_BIT(ADCSRA,6);
}
     f64:	0f 90       	pop	r0
     f66:	cf 91       	pop	r28
     f68:	df 91       	pop	r29
     f6a:	08 95       	ret

00000f6c <ADC_vStart_Conversion>:

void ADC_vStart_Conversion(void){
     f6c:	df 93       	push	r29
     f6e:	cf 93       	push	r28
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,6);
     f74:	a6 e2       	ldi	r26, 0x26	; 38
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e6 e2       	ldi	r30, 0x26	; 38
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	80 64       	ori	r24, 0x40	; 64
     f80:	8c 93       	st	X, r24
}
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret

00000f88 <ADC_u16GetReadingInt>:

uint16 ADC_u16GetReadingInt(void){
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
	return ADC;
     f90:	e4 e2       	ldi	r30, 0x24	; 36
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	91 81       	ldd	r25, Z+1	; 0x01
}
     f98:	cf 91       	pop	r28
     f9a:	df 91       	pop	r29
     f9c:	08 95       	ret

00000f9e <ADC_vInterruptEnable>:

void ADC_vInterruptEnable(void){
     f9e:	df 93       	push	r29
     fa0:	cf 93       	push	r28
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA, 3);
     fa6:	a6 e2       	ldi	r26, 0x26	; 38
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e6 e2       	ldi	r30, 0x26	; 38
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	88 60       	ori	r24, 0x08	; 8
     fb2:	8c 93       	st	X, r24
}
     fb4:	cf 91       	pop	r28
     fb6:	df 91       	pop	r29
     fb8:	08 95       	ret

00000fba <ADC_u16PollingRead>:

uint16 ADC_u16PollingRead(void){
     fba:	df 93       	push	r29
     fbc:	cf 93       	push	r28
     fbe:	00 d0       	rcall	.+0      	; 0xfc0 <ADC_u16PollingRead+0x6>
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
	uint16 adc;
	while(GET_BIT(ADCSRA, 4) == 0);
     fc4:	e6 e2       	ldi	r30, 0x26	; 38
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	82 95       	swap	r24
     fcc:	8f 70       	andi	r24, 0x0F	; 15
     fce:	88 2f       	mov	r24, r24
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	81 70       	andi	r24, 0x01	; 1
     fd4:	90 70       	andi	r25, 0x00	; 0
     fd6:	00 97       	sbiw	r24, 0x00	; 0
     fd8:	a9 f3       	breq	.-22     	; 0xfc4 <ADC_u16PollingRead+0xa>
	adc = ADC;
     fda:	e4 e2       	ldi	r30, 0x24	; 36
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	91 81       	ldd	r25, Z+1	; 0x01
     fe2:	9a 83       	std	Y+2, r25	; 0x02
     fe4:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(ADCSRA,4);
     fe6:	a6 e2       	ldi	r26, 0x26	; 38
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	e6 e2       	ldi	r30, 0x26	; 38
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	80 61       	ori	r24, 0x10	; 16
     ff2:	8c 93       	st	X, r24
	return adc;
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	9a 81       	ldd	r25, Y+2	; 0x02
}
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	cf 91       	pop	r28
     ffe:	df 91       	pop	r29
    1000:	08 95       	ret

00001002 <Set_Prescaler>:

static void Set_Prescaler(void){
    1002:	df 93       	push	r29
    1004:	cf 93       	push	r28
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,0);
	SET_BIT(ADCSRA,1);
	SET_BIT(ADCSRA,2);

#elif ADC_PRESCALER == ADC_PRESCALER_128
	SET_BIT(ADCSRA,0);
    100a:	a6 e2       	ldi	r26, 0x26	; 38
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e6 e2       	ldi	r30, 0x26	; 38
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	81 60       	ori	r24, 0x01	; 1
    1016:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,1);
    1018:	a6 e2       	ldi	r26, 0x26	; 38
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e6 e2       	ldi	r30, 0x26	; 38
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	82 60       	ori	r24, 0x02	; 2
    1024:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,2);
    1026:	a6 e2       	ldi	r26, 0x26	; 38
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e6 e2       	ldi	r30, 0x26	; 38
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	84 60       	ori	r24, 0x04	; 4
    1032:	8c 93       	st	X, r24
#endif
}
    1034:	cf 91       	pop	r28
    1036:	df 91       	pop	r29
    1038:	08 95       	ret

0000103a <ADC_SetCallBackFunction>:

void ADC_SetCallBackFunction(void(*p2f)(void)){
    103a:	df 93       	push	r29
    103c:	cf 93       	push	r28
    103e:	00 d0       	rcall	.+0      	; 0x1040 <ADC_SetCallBackFunction+0x6>
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
    1044:	9a 83       	std	Y+2, r25	; 0x02
    1046:	89 83       	std	Y+1, r24	; 0x01
	ADC_p2f = p2f;
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	9a 81       	ldd	r25, Y+2	; 0x02
    104c:	90 93 1b 03 	sts	0x031B, r25
    1050:	80 93 1a 03 	sts	0x031A, r24
}
    1054:	0f 90       	pop	r0
    1056:	0f 90       	pop	r0
    1058:	cf 91       	pop	r28
    105a:	df 91       	pop	r29
    105c:	08 95       	ret

0000105e <ISR>:


ISR(ADC_vect){
    105e:	df 93       	push	r29
    1060:	cf 93       	push	r28
    1062:	00 d0       	rcall	.+0      	; 0x1064 <ISR+0x6>
    1064:	00 d0       	rcall	.+0      	; 0x1066 <ISR+0x8>
    1066:	cd b7       	in	r28, 0x3d	; 61
    1068:	de b7       	in	r29, 0x3e	; 62
    106a:	9a 83       	std	Y+2, r25	; 0x02
    106c:	89 83       	std	Y+1, r24	; 0x01
	if(ADC_p2f!= NULL){
    106e:	80 91 1a 03 	lds	r24, 0x031A
    1072:	90 91 1b 03 	lds	r25, 0x031B
    1076:	00 97       	sbiw	r24, 0x00	; 0
    1078:	29 f0       	breq	.+10     	; 0x1084 <ISR+0x26>
		ADC_p2f();
    107a:	e0 91 1a 03 	lds	r30, 0x031A
    107e:	f0 91 1b 03 	lds	r31, 0x031B
    1082:	09 95       	icall
	}
}
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	cf 91       	pop	r28
    108e:	df 91       	pop	r29
    1090:	08 95       	ret

00001092 <I2C_vInitMaster>:
#include "I2C_config.h"
#include "../UTILS/STD_TYPES.h"
#include "../UTILS/MACROS.h"
#include <string.h>

void I2C_vInitMaster(uint8 address){
    1092:	df 93       	push	r29
    1094:	cf 93       	push	r28
    1096:	0f 92       	push	r0
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	89 83       	std	Y+1, r24	; 0x01
	if(address < 128){
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	88 23       	and	r24, r24
    10a2:	2c f0       	brlt	.+10     	; 0x10ae <I2C_vInitMaster+0x1c>
		TWAR = address << 1;
    10a4:	e2 e2       	ldi	r30, 0x22	; 34
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	88 0f       	add	r24, r24
    10ac:	80 83       	st	Z, r24
	}
	TWBR = 12;
    10ae:	e0 e2       	ldi	r30, 0x20	; 32
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	8c e0       	ldi	r24, 0x0C	; 12
    10b4:	80 83       	st	Z, r24
	CLR_BIT(TWSR,0);
    10b6:	a1 e2       	ldi	r26, 0x21	; 33
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	e1 e2       	ldi	r30, 0x21	; 33
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	8e 7f       	andi	r24, 0xFE	; 254
    10c2:	8c 93       	st	X, r24
	CLR_BIT(TWSR,1);
    10c4:	a1 e2       	ldi	r26, 0x21	; 33
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	e1 e2       	ldi	r30, 0x21	; 33
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	8d 7f       	andi	r24, 0xFD	; 253
    10d0:	8c 93       	st	X, r24

	SET_BIT(TWCR,6);
    10d2:	a6 e5       	ldi	r26, 0x56	; 86
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e6 e5       	ldi	r30, 0x56	; 86
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	80 64       	ori	r24, 0x40	; 64
    10de:	8c 93       	st	X, r24

	SET_BIT(TWCR,2);
    10e0:	a6 e5       	ldi	r26, 0x56	; 86
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e6 e5       	ldi	r30, 0x56	; 86
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	84 60       	ori	r24, 0x04	; 4
    10ec:	8c 93       	st	X, r24
}
    10ee:	0f 90       	pop	r0
    10f0:	cf 91       	pop	r28
    10f2:	df 91       	pop	r29
    10f4:	08 95       	ret

000010f6 <I2C_vSendStartCondition>:



void I2C_vSendStartCondition(void){
    10f6:	df 93       	push	r29
    10f8:	cf 93       	push	r28
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR, 5);
    10fe:	a6 e5       	ldi	r26, 0x56	; 86
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e6 e5       	ldi	r30, 0x56	; 86
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	80 62       	ori	r24, 0x20	; 32
    110a:	8c 93       	st	X, r24

	SET_BIT(TWCR, 7);
    110c:	a6 e5       	ldi	r26, 0x56	; 86
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e6 e5       	ldi	r30, 0x56	; 86
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	80 68       	ori	r24, 0x80	; 128
    1118:	8c 93       	st	X, r24

	while(GET_BIT(TWCR,7) == 0);
    111a:	e6 e5       	ldi	r30, 0x56	; 86
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	88 23       	and	r24, r24
    1122:	dc f7       	brge	.-10     	; 0x111a <I2C_vSendStartCondition+0x24>

	while((TWSR & 0xF8) != I2C_START_COND_ACK);
    1124:	e1 e2       	ldi	r30, 0x21	; 33
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	88 2f       	mov	r24, r24
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	88 7f       	andi	r24, 0xF8	; 248
    1130:	90 70       	andi	r25, 0x00	; 0
    1132:	88 30       	cpi	r24, 0x08	; 8
    1134:	91 05       	cpc	r25, r1
    1136:	b1 f7       	brne	.-20     	; 0x1124 <I2C_vSendStartCondition+0x2e>
}
    1138:	cf 91       	pop	r28
    113a:	df 91       	pop	r29
    113c:	08 95       	ret

0000113e <I2C_vSendRepeatedStartCondition>:

void I2C_vSendRepeatedStartCondition(void){
    113e:	df 93       	push	r29
    1140:	cf 93       	push	r28
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR, 5);
    1146:	a6 e5       	ldi	r26, 0x56	; 86
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e6 e5       	ldi	r30, 0x56	; 86
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	80 62       	ori	r24, 0x20	; 32
    1152:	8c 93       	st	X, r24

	SET_BIT(TWCR, 7);
    1154:	a6 e5       	ldi	r26, 0x56	; 86
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e6 e5       	ldi	r30, 0x56	; 86
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	80 68       	ori	r24, 0x80	; 128
    1160:	8c 93       	st	X, r24

	while(GET_BIT(TWCR,7) == 0);
    1162:	e6 e5       	ldi	r30, 0x56	; 86
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	88 23       	and	r24, r24
    116a:	dc f7       	brge	.-10     	; 0x1162 <I2C_vSendRepeatedStartCondition+0x24>

	while((TWSR & 0xF8) != I2C_REP_START_COND_ACK);
    116c:	e1 e2       	ldi	r30, 0x21	; 33
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	88 2f       	mov	r24, r24
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	88 7f       	andi	r24, 0xF8	; 248
    1178:	90 70       	andi	r25, 0x00	; 0
    117a:	80 31       	cpi	r24, 0x10	; 16
    117c:	91 05       	cpc	r25, r1
    117e:	b1 f7       	brne	.-20     	; 0x116c <I2C_vSendRepeatedStartCondition+0x2e>
}
    1180:	cf 91       	pop	r28
    1182:	df 91       	pop	r29
    1184:	08 95       	ret

00001186 <I2C_vSendStopCondition>:

void I2C_vSendStopCondition(void){
    1186:	df 93       	push	r29
    1188:	cf 93       	push	r28
    118a:	cd b7       	in	r28, 0x3d	; 61
    118c:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(TWCR, 4);
    118e:	a6 e5       	ldi	r26, 0x56	; 86
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e6 e5       	ldi	r30, 0x56	; 86
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	80 61       	ori	r24, 0x10	; 16
    119a:	8c 93       	st	X, r24

	SET_BIT(TWCR, 7);
    119c:	a6 e5       	ldi	r26, 0x56	; 86
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e6 e5       	ldi	r30, 0x56	; 86
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	80 68       	ori	r24, 0x80	; 128
    11a8:	8c 93       	st	X, r24
}
    11aa:	cf 91       	pop	r28
    11ac:	df 91       	pop	r29
    11ae:	08 95       	ret

000011b0 <I2C_vSendSlaveAddresswithWrite>:

void I2C_vSendSlaveAddresswithWrite(uint8 address){
    11b0:	df 93       	push	r29
    11b2:	cf 93       	push	r28
    11b4:	0f 92       	push	r0
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	89 83       	std	Y+1, r24	; 0x01
	if(address < 128){
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	88 23       	and	r24, r24
    11c0:	4c f1       	brlt	.+82     	; 0x1214 <I2C_vSendSlaveAddresswithWrite+0x64>

		TWDR = address << 1;
    11c2:	e3 e2       	ldi	r30, 0x23	; 35
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	88 0f       	add	r24, r24
    11ca:	80 83       	st	Z, r24
		CLR_BIT(TWDR, 0);
    11cc:	a3 e2       	ldi	r26, 0x23	; 35
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	e3 e2       	ldi	r30, 0x23	; 35
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	8e 7f       	andi	r24, 0xFE	; 254
    11d8:	8c 93       	st	X, r24

		CLR_BIT(TWCR, 5);
    11da:	a6 e5       	ldi	r26, 0x56	; 86
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e6 e5       	ldi	r30, 0x56	; 86
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	8f 7d       	andi	r24, 0xDF	; 223
    11e6:	8c 93       	st	X, r24

		SET_BIT(TWCR, 7);
    11e8:	a6 e5       	ldi	r26, 0x56	; 86
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	e6 e5       	ldi	r30, 0x56	; 86
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	80 68       	ori	r24, 0x80	; 128
    11f4:	8c 93       	st	X, r24

		while(GET_BIT(TWCR,7) == 0);
    11f6:	e6 e5       	ldi	r30, 0x56	; 86
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	88 23       	and	r24, r24
    11fe:	dc f7       	brge	.-10     	; 0x11f6 <I2C_vSendSlaveAddresswithWrite+0x46>

		while((TWSR & 0xF8) != I2C_SLAVE_ADD_W);
    1200:	e1 e2       	ldi	r30, 0x21	; 33
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	88 2f       	mov	r24, r24
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	88 7f       	andi	r24, 0xF8	; 248
    120c:	90 70       	andi	r25, 0x00	; 0
    120e:	88 31       	cpi	r24, 0x18	; 24
    1210:	91 05       	cpc	r25, r1
    1212:	b1 f7       	brne	.-20     	; 0x1200 <I2C_vSendSlaveAddresswithWrite+0x50>
	}
}
    1214:	0f 90       	pop	r0
    1216:	cf 91       	pop	r28
    1218:	df 91       	pop	r29
    121a:	08 95       	ret

0000121c <I2C_vSendSlaveAddresswithRead>:
void I2C_vSendSlaveAddresswithRead(uint8 address){
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	0f 92       	push	r0
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	89 83       	std	Y+1, r24	; 0x01
	if(address < 128){
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	88 23       	and	r24, r24
    122c:	4c f1       	brlt	.+82     	; 0x1280 <I2C_vSendSlaveAddresswithRead+0x64>

		TWDR = address << 1;
    122e:	e3 e2       	ldi	r30, 0x23	; 35
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	88 0f       	add	r24, r24
    1236:	80 83       	st	Z, r24
		SET_BIT(TWDR, 0);
    1238:	a3 e2       	ldi	r26, 0x23	; 35
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	e3 e2       	ldi	r30, 0x23	; 35
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	81 60       	ori	r24, 0x01	; 1
    1244:	8c 93       	st	X, r24

		CLR_BIT(TWCR, 5);
    1246:	a6 e5       	ldi	r26, 0x56	; 86
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	e6 e5       	ldi	r30, 0x56	; 86
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	8f 7d       	andi	r24, 0xDF	; 223
    1252:	8c 93       	st	X, r24

		SET_BIT(TWCR, 7);
    1254:	a6 e5       	ldi	r26, 0x56	; 86
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	e6 e5       	ldi	r30, 0x56	; 86
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	80 68       	ori	r24, 0x80	; 128
    1260:	8c 93       	st	X, r24

		while(GET_BIT(TWCR,7) == 0);
    1262:	e6 e5       	ldi	r30, 0x56	; 86
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	88 23       	and	r24, r24
    126a:	dc f7       	brge	.-10     	; 0x1262 <I2C_vSendSlaveAddresswithRead+0x46>

		while((TWSR & 0xF8) != I2C_SLAVE_ADD_R);
    126c:	e1 e2       	ldi	r30, 0x21	; 33
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	88 2f       	mov	r24, r24
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	88 7f       	andi	r24, 0xF8	; 248
    1278:	90 70       	andi	r25, 0x00	; 0
    127a:	80 34       	cpi	r24, 0x40	; 64
    127c:	91 05       	cpc	r25, r1
    127e:	b1 f7       	brne	.-20     	; 0x126c <I2C_vSendSlaveAddresswithRead+0x50>
		}
}
    1280:	0f 90       	pop	r0
    1282:	cf 91       	pop	r28
    1284:	df 91       	pop	r29
    1286:	08 95       	ret

00001288 <I2C_vSendDataMaster>:

void I2C_vSendDataMaster(uint8 data){
    1288:	df 93       	push	r29
    128a:	cf 93       	push	r28
    128c:	0f 92       	push	r0
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	89 83       	std	Y+1, r24	; 0x01
	TWDR = data;
    1294:	e3 e2       	ldi	r30, 0x23	; 35
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	89 81       	ldd	r24, Y+1	; 0x01
    129a:	80 83       	st	Z, r24

	SET_BIT(TWCR, 7);
    129c:	a6 e5       	ldi	r26, 0x56	; 86
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e6 e5       	ldi	r30, 0x56	; 86
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	80 68       	ori	r24, 0x80	; 128
    12a8:	8c 93       	st	X, r24

	while(GET_BIT(TWCR,7) == 0);
    12aa:	e6 e5       	ldi	r30, 0x56	; 86
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	88 23       	and	r24, r24
    12b2:	dc f7       	brge	.-10     	; 0x12aa <I2C_vSendDataMaster+0x22>

	while((TWSR & 0xF8) != I2C_MASTER_DARA_SEND_ACK);
    12b4:	e1 e2       	ldi	r30, 0x21	; 33
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	88 2f       	mov	r24, r24
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	88 7f       	andi	r24, 0xF8	; 248
    12c0:	90 70       	andi	r25, 0x00	; 0
    12c2:	88 32       	cpi	r24, 0x28	; 40
    12c4:	91 05       	cpc	r25, r1
    12c6:	b1 f7       	brne	.-20     	; 0x12b4 <I2C_vSendDataMaster+0x2c>
}
    12c8:	0f 90       	pop	r0
    12ca:	cf 91       	pop	r28
    12cc:	df 91       	pop	r29
    12ce:	08 95       	ret

000012d0 <I2C_vReadDataMaster>:

void I2C_vReadDataMaster(uint8* data){
    12d0:	df 93       	push	r29
    12d2:	cf 93       	push	r28
    12d4:	00 d0       	rcall	.+0      	; 0x12d6 <I2C_vReadDataMaster+0x6>
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	9a 83       	std	Y+2, r25	; 0x02
    12dc:	89 83       	std	Y+1, r24	; 0x01
	if (data != NULL) {
    12de:	89 81       	ldd	r24, Y+1	; 0x01
    12e0:	9a 81       	ldd	r25, Y+2	; 0x02
    12e2:	00 97       	sbiw	r24, 0x00	; 0
    12e4:	e1 f0       	breq	.+56     	; 0x131e <I2C_vReadDataMaster+0x4e>
		SET_BIT(TWCR, 7);
    12e6:	a6 e5       	ldi	r26, 0x56	; 86
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	e6 e5       	ldi	r30, 0x56	; 86
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	80 68       	ori	r24, 0x80	; 128
    12f2:	8c 93       	st	X, r24

		while(GET_BIT(TWCR,7) == 0);
    12f4:	e6 e5       	ldi	r30, 0x56	; 86
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	88 23       	and	r24, r24
    12fc:	dc f7       	brge	.-10     	; 0x12f4 <I2C_vReadDataMaster+0x24>

		while((TWSR & 0xF8) != I2C_MASTER_DARA_READ_ACK);
    12fe:	e1 e2       	ldi	r30, 0x21	; 33
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	88 2f       	mov	r24, r24
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	88 7f       	andi	r24, 0xF8	; 248
    130a:	90 70       	andi	r25, 0x00	; 0
    130c:	80 35       	cpi	r24, 0x50	; 80
    130e:	91 05       	cpc	r25, r1
    1310:	b1 f7       	brne	.-20     	; 0x12fe <I2C_vReadDataMaster+0x2e>

		*data = TWDR;
    1312:	e3 e2       	ldi	r30, 0x23	; 35
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	e9 81       	ldd	r30, Y+1	; 0x01
    131a:	fa 81       	ldd	r31, Y+2	; 0x02
    131c:	80 83       	st	Z, r24
	}
}
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	cf 91       	pop	r28
    1324:	df 91       	pop	r29
    1326:	08 95       	ret

00001328 <USART_vInit>:
#include "REGISTERS.h"
#include "../UTILS/STD_TYPES.h"
#include "../UTILS/MACROS.h"


void USART_vInit(void){
    1328:	df 93       	push	r29
    132a:	cf 93       	push	r28
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
    1330:	29 97       	sbiw	r28, 0x09	; 9
    1332:	0f b6       	in	r0, 0x3f	; 63
    1334:	f8 94       	cli
    1336:	de bf       	out	0x3e, r29	; 62
    1338:	0f be       	out	0x3f, r0	; 63
    133a:	cd bf       	out	0x3d, r28	; 61

	uint32 buad = USART_BAUD_RATE;
    133c:	80 e8       	ldi	r24, 0x80	; 128
    133e:	95 e2       	ldi	r25, 0x25	; 37
    1340:	a0 e0       	ldi	r26, 0x00	; 0
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	8e 83       	std	Y+6, r24	; 0x06
    1346:	9f 83       	std	Y+7, r25	; 0x07
    1348:	a8 87       	std	Y+8, r26	; 0x08
    134a:	b9 87       	std	Y+9, r27	; 0x09
	uint32 UBBR_val;
	uint8 UCSRC_val = 0b10000000;
    134c:	80 e8       	ldi	r24, 0x80	; 128
    134e:	89 83       	std	Y+1, r24	; 0x01

#if USART_MODE == ASYNCHRONOUS
	CLR_BIT(UCSRC_val,6);
    1350:	89 81       	ldd	r24, Y+1	; 0x01
    1352:	8f 7b       	andi	r24, 0xBF	; 191
    1354:	89 83       	std	Y+1, r24	; 0x01
#if USART_SPEED	== USART_SPEED_NORMAL
	CLR_BIT(UCSRA, 1);
    1356:	ab e2       	ldi	r26, 0x2B	; 43
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	eb e2       	ldi	r30, 0x2B	; 43
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	8d 7f       	andi	r24, 0xFD	; 253
    1362:	8c 93       	st	X, r24
	UBBR_val = F /(16*buad) - 1;
    1364:	8e 81       	ldd	r24, Y+6	; 0x06
    1366:	9f 81       	ldd	r25, Y+7	; 0x07
    1368:	a8 85       	ldd	r26, Y+8	; 0x08
    136a:	b9 85       	ldd	r27, Y+9	; 0x09
    136c:	88 0f       	add	r24, r24
    136e:	99 1f       	adc	r25, r25
    1370:	aa 1f       	adc	r26, r26
    1372:	bb 1f       	adc	r27, r27
    1374:	88 0f       	add	r24, r24
    1376:	99 1f       	adc	r25, r25
    1378:	aa 1f       	adc	r26, r26
    137a:	bb 1f       	adc	r27, r27
    137c:	88 0f       	add	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	aa 1f       	adc	r26, r26
    1382:	bb 1f       	adc	r27, r27
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	aa 1f       	adc	r26, r26
    138a:	bb 1f       	adc	r27, r27
    138c:	9c 01       	movw	r18, r24
    138e:	ad 01       	movw	r20, r26
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	92 e1       	ldi	r25, 0x12	; 18
    1394:	aa e7       	ldi	r26, 0x7A	; 122
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	bc 01       	movw	r22, r24
    139a:	cd 01       	movw	r24, r26
    139c:	0e 94 4b 24 	call	0x4896	; 0x4896 <__udivmodsi4>
    13a0:	da 01       	movw	r26, r20
    13a2:	c9 01       	movw	r24, r18
    13a4:	01 97       	sbiw	r24, 0x01	; 1
    13a6:	a1 09       	sbc	r26, r1
    13a8:	b1 09       	sbc	r27, r1
    13aa:	8a 83       	std	Y+2, r24	; 0x02
    13ac:	9b 83       	std	Y+3, r25	; 0x03
    13ae:	ac 83       	std	Y+4, r26	; 0x04
    13b0:	bd 83       	std	Y+5, r27	; 0x05
#if USART_PARITY == USART_PARITY_DISABLED
	CLR_BIT(UCSRC_val, 4);
	CLR_BIT(UCSRC_val, 5);

#elif USART_PARITY == USART_PARITY_EVEN
	CLR_BIT(UCSRC_val, 4);
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	8f 7e       	andi	r24, 0xEF	; 239
    13b6:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCSRC_val, 5);
    13b8:	89 81       	ldd	r24, Y+1	; 0x01
    13ba:	80 62       	ori	r24, 0x20	; 32
    13bc:	89 83       	std	Y+1, r24	; 0x01
#elif USART_BIT_SIZE == USART_6_BIT
	UCSRC |= 0b10000010;
#elif USART_BIT_SIZE == USART_7_BIT
	UCSRC |= 0b10000100;
#elif USART_BIT_SIZE == USART_8_BIT
	SET_BIT(UCSRC_val, 2);
    13be:	89 81       	ldd	r24, Y+1	; 0x01
    13c0:	84 60       	ori	r24, 0x04	; 4
    13c2:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCSRC_val, 1);
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
    13c6:	82 60       	ori	r24, 0x02	; 2
    13c8:	89 83       	std	Y+1, r24	; 0x01
#elif USART_BIT_SIZE == USART_9_BIT
	UCSRC |= 0b10001110;
#endif

	UBRRH = (uint8)(UBBR_val >> 8);
    13ca:	e0 e4       	ldi	r30, 0x40	; 64
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	9b 81       	ldd	r25, Y+3	; 0x03
    13d2:	ac 81       	ldd	r26, Y+4	; 0x04
    13d4:	bd 81       	ldd	r27, Y+5	; 0x05
    13d6:	89 2f       	mov	r24, r25
    13d8:	9a 2f       	mov	r25, r26
    13da:	ab 2f       	mov	r26, r27
    13dc:	bb 27       	eor	r27, r27
    13de:	80 83       	st	Z, r24
	UBRRL = (uint8)(UBBR_val);
    13e0:	e9 e2       	ldi	r30, 0x29	; 41
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	8a 81       	ldd	r24, Y+2	; 0x02
    13e6:	80 83       	st	Z, r24

	SET_BIT( UCSRB , 3 );
    13e8:	aa e2       	ldi	r26, 0x2A	; 42
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	ea e2       	ldi	r30, 0x2A	; 42
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	88 60       	ori	r24, 0x08	; 8
    13f4:	8c 93       	st	X, r24
	SET_BIT( UCSRB , 4 );
    13f6:	aa e2       	ldi	r26, 0x2A	; 42
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	ea e2       	ldi	r30, 0x2A	; 42
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	80 61       	ori	r24, 0x10	; 16
    1402:	8c 93       	st	X, r24

	UCSRC = UCSRC_val;
    1404:	e0 e4       	ldi	r30, 0x40	; 64
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	89 81       	ldd	r24, Y+1	; 0x01
    140a:	80 83       	st	Z, r24

}
    140c:	29 96       	adiw	r28, 0x09	; 9
    140e:	0f b6       	in	r0, 0x3f	; 63
    1410:	f8 94       	cli
    1412:	de bf       	out	0x3e, r29	; 62
    1414:	0f be       	out	0x3f, r0	; 63
    1416:	cd bf       	out	0x3d, r28	; 61
    1418:	cf 91       	pop	r28
    141a:	df 91       	pop	r29
    141c:	08 95       	ret

0000141e <USART_u16Receive>:

uint16 USART_u16Receive(void){
    141e:	df 93       	push	r29
    1420:	cf 93       	push	r28
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT( UCSRA , 7 ) == 0);
    1426:	eb e2       	ldi	r30, 0x2B	; 43
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	88 23       	and	r24, r24
    142e:	dc f7       	brge	.-10     	; 0x1426 <USART_u16Receive+0x8>

//	CLR_BIT(UCSRA, 7);

	return UDR;
    1430:	ec e2       	ldi	r30, 0x2C	; 44
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	88 2f       	mov	r24, r24
    1438:	90 e0       	ldi	r25, 0x00	; 0
}
    143a:	cf 91       	pop	r28
    143c:	df 91       	pop	r29
    143e:	08 95       	ret

00001440 <USART_vTransmit>:

void USART_vTransmit(uint8 data){
    1440:	df 93       	push	r29
    1442:	cf 93       	push	r28
    1444:	0f 92       	push	r0
    1446:	cd b7       	in	r28, 0x3d	; 61
    1448:	de b7       	in	r29, 0x3e	; 62
    144a:	89 83       	std	Y+1, r24	; 0x01
	while(GET_BIT(UCSRA,5) == 0);
    144c:	eb e2       	ldi	r30, 0x2B	; 43
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	82 95       	swap	r24
    1454:	86 95       	lsr	r24
    1456:	87 70       	andi	r24, 0x07	; 7
    1458:	88 2f       	mov	r24, r24
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	81 70       	andi	r24, 0x01	; 1
    145e:	90 70       	andi	r25, 0x00	; 0
    1460:	00 97       	sbiw	r24, 0x00	; 0
    1462:	a1 f3       	breq	.-24     	; 0x144c <USART_vTransmit+0xc>
	UDR = data;
    1464:	ec e2       	ldi	r30, 0x2C	; 44
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	80 83       	st	Z, r24
}
    146c:	0f 90       	pop	r0
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	08 95       	ret

00001474 <UART_SendString>:

void UART_SendString(uint8 *Str)
{
    1474:	df 93       	push	r29
    1476:	cf 93       	push	r28
    1478:	00 d0       	rcall	.+0      	; 0x147a <UART_SendString+0x6>
    147a:	0f 92       	push	r0
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
    1480:	9b 83       	std	Y+3, r25	; 0x03
    1482:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1484:	19 82       	std	Y+1, r1	; 0x01
    1486:	0e c0       	rjmp	.+28     	; 0x14a4 <UART_SendString+0x30>

		/* Send the whole string */
		while(Str[i] != '\0')
		{
			USART_vTransmit(Str[i]);
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	28 2f       	mov	r18, r24
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	9b 81       	ldd	r25, Y+3	; 0x03
    1492:	fc 01       	movw	r30, r24
    1494:	e2 0f       	add	r30, r18
    1496:	f3 1f       	adc	r31, r19
    1498:	80 81       	ld	r24, Z
    149a:	0e 94 20 0a 	call	0x1440	; 0x1440 <USART_vTransmit>
			i++;
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	8f 5f       	subi	r24, 0xFF	; 255
    14a2:	89 83       	std	Y+1, r24	; 0x01
void UART_SendString(uint8 *Str)
{
	uint8 i = 0;

		/* Send the whole string */
		while(Str[i] != '\0')
    14a4:	89 81       	ldd	r24, Y+1	; 0x01
    14a6:	28 2f       	mov	r18, r24
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	8a 81       	ldd	r24, Y+2	; 0x02
    14ac:	9b 81       	ldd	r25, Y+3	; 0x03
    14ae:	fc 01       	movw	r30, r24
    14b0:	e2 0f       	add	r30, r18
    14b2:	f3 1f       	adc	r31, r19
    14b4:	80 81       	ld	r24, Z
    14b6:	88 23       	and	r24, r24
    14b8:	39 f7       	brne	.-50     	; 0x1488 <UART_SendString+0x14>
		{
			USART_vTransmit(Str[i]);
			i++;
		}
}
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	0f 90       	pop	r0
    14c0:	cf 91       	pop	r28
    14c2:	df 91       	pop	r29
    14c4:	08 95       	ret

000014c6 <UART_RecString>:
void UART_RecString( uint8 *Str)
{
    14c6:	0f 93       	push	r16
    14c8:	1f 93       	push	r17
    14ca:	df 93       	push	r29
    14cc:	cf 93       	push	r28
    14ce:	00 d0       	rcall	.+0      	; 0x14d0 <UART_RecString+0xa>
    14d0:	0f 92       	push	r0
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
    14d6:	9b 83       	std	Y+3, r25	; 0x03
    14d8:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i = 0;
    14da:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = USART_u16Receive();
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
    14de:	28 2f       	mov	r18, r24
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	9b 81       	ldd	r25, Y+3	; 0x03
    14e6:	8c 01       	movw	r16, r24
    14e8:	02 0f       	add	r16, r18
    14ea:	13 1f       	adc	r17, r19
    14ec:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_u16Receive>
    14f0:	f8 01       	movw	r30, r16
    14f2:	80 83       	st	Z, r24
    14f4:	0f c0       	rjmp	.+30     	; 0x1514 <UART_RecString+0x4e>
	/* Receive the whole string until the '#' */
	while(Str[i] != '\r')
	{
		i++;
    14f6:	89 81       	ldd	r24, Y+1	; 0x01
    14f8:	8f 5f       	subi	r24, 0xFF	; 255
    14fa:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = USART_u16Receive();
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	28 2f       	mov	r18, r24
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	9b 81       	ldd	r25, Y+3	; 0x03
    1506:	8c 01       	movw	r16, r24
    1508:	02 0f       	add	r16, r18
    150a:	13 1f       	adc	r17, r19
    150c:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_u16Receive>
    1510:	f8 01       	movw	r30, r16
    1512:	80 83       	st	Z, r24
	uint8 i = 0;

	/* Receive the first byte */
	Str[i] = USART_u16Receive();
	/* Receive the whole string until the '#' */
	while(Str[i] != '\r')
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	28 2f       	mov	r18, r24
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	8a 81       	ldd	r24, Y+2	; 0x02
    151c:	9b 81       	ldd	r25, Y+3	; 0x03
    151e:	fc 01       	movw	r30, r24
    1520:	e2 0f       	add	r30, r18
    1522:	f3 1f       	adc	r31, r19
    1524:	80 81       	ld	r24, Z
    1526:	8d 30       	cpi	r24, 0x0D	; 13
    1528:	31 f7       	brne	.-52     	; 0x14f6 <UART_RecString+0x30>
	{
		i++;
		Str[i] = USART_u16Receive();
	}
	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	i++;
    152a:	89 81       	ldd	r24, Y+1	; 0x01
    152c:	8f 5f       	subi	r24, 0xFF	; 255
    152e:	89 83       	std	Y+1, r24	; 0x01
	Str[i] = '\0';
    1530:	89 81       	ldd	r24, Y+1	; 0x01
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	8a 81       	ldd	r24, Y+2	; 0x02
    1538:	9b 81       	ldd	r25, Y+3	; 0x03
    153a:	fc 01       	movw	r30, r24
    153c:	e2 0f       	add	r30, r18
    153e:	f3 1f       	adc	r31, r19
    1540:	10 82       	st	Z, r1
}
    1542:	0f 90       	pop	r0
    1544:	0f 90       	pop	r0
    1546:	0f 90       	pop	r0
    1548:	cf 91       	pop	r28
    154a:	df 91       	pop	r29
    154c:	1f 91       	pop	r17
    154e:	0f 91       	pop	r16
    1550:	08 95       	ret

00001552 <DIO_WriteChannel>:
#include "DIO_TYPES.h"
#include "REGISTERS.h"
#include "../UTILS/MACROS.h"
#include "../UTILS/STD_TYPES.h"

void DIO_WriteChannel(pin_channel_type channel, pin_channel_status status){
    1552:	df 93       	push	r29
    1554:	cf 93       	push	r28
    1556:	00 d0       	rcall	.+0      	; 0x1558 <DIO_WriteChannel+0x6>
    1558:	00 d0       	rcall	.+0      	; 0x155a <DIO_WriteChannel+0x8>
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
    155e:	89 83       	std	Y+1, r24	; 0x01
    1560:	6a 83       	std	Y+2, r22	; 0x02
	switch (channel / PORT_SIZE){
    1562:	89 81       	ldd	r24, Y+1	; 0x01
    1564:	86 95       	lsr	r24
    1566:	86 95       	lsr	r24
    1568:	86 95       	lsr	r24
    156a:	28 2f       	mov	r18, r24
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	3c 83       	std	Y+4, r19	; 0x04
    1570:	2b 83       	std	Y+3, r18	; 0x03
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	9c 81       	ldd	r25, Y+4	; 0x04
    1576:	81 30       	cpi	r24, 0x01	; 1
    1578:	91 05       	cpc	r25, r1
    157a:	09 f4       	brne	.+2      	; 0x157e <DIO_WriteChannel+0x2c>
    157c:	49 c0       	rjmp	.+146    	; 0x1610 <DIO_WriteChannel+0xbe>
    157e:	2b 81       	ldd	r18, Y+3	; 0x03
    1580:	3c 81       	ldd	r19, Y+4	; 0x04
    1582:	22 30       	cpi	r18, 0x02	; 2
    1584:	31 05       	cpc	r19, r1
    1586:	2c f4       	brge	.+10     	; 0x1592 <DIO_WriteChannel+0x40>
    1588:	8b 81       	ldd	r24, Y+3	; 0x03
    158a:	9c 81       	ldd	r25, Y+4	; 0x04
    158c:	00 97       	sbiw	r24, 0x00	; 0
    158e:	71 f0       	breq	.+28     	; 0x15ac <DIO_WriteChannel+0x5a>
    1590:	d4 c0       	rjmp	.+424    	; 0x173a <DIO_WriteChannel+0x1e8>
    1592:	2b 81       	ldd	r18, Y+3	; 0x03
    1594:	3c 81       	ldd	r19, Y+4	; 0x04
    1596:	22 30       	cpi	r18, 0x02	; 2
    1598:	31 05       	cpc	r19, r1
    159a:	09 f4       	brne	.+2      	; 0x159e <DIO_WriteChannel+0x4c>
    159c:	6b c0       	rjmp	.+214    	; 0x1674 <DIO_WriteChannel+0x122>
    159e:	8b 81       	ldd	r24, Y+3	; 0x03
    15a0:	9c 81       	ldd	r25, Y+4	; 0x04
    15a2:	83 30       	cpi	r24, 0x03	; 3
    15a4:	91 05       	cpc	r25, r1
    15a6:	09 f4       	brne	.+2      	; 0x15aa <DIO_WriteChannel+0x58>
    15a8:	97 c0       	rjmp	.+302    	; 0x16d8 <DIO_WriteChannel+0x186>
    15aa:	c7 c0       	rjmp	.+398    	; 0x173a <DIO_WriteChannel+0x1e8>
	case PA:
		if (status == HIGH){
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	81 30       	cpi	r24, 0x01	; 1
    15b0:	b9 f4       	brne	.+46     	; 0x15e0 <DIO_WriteChannel+0x8e>
			SET_BIT((PORTA),(channel%PORT_SIZE));
    15b2:	ab e3       	ldi	r26, 0x3B	; 59
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	eb e3       	ldi	r30, 0x3B	; 59
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	48 2f       	mov	r20, r24
    15be:	89 81       	ldd	r24, Y+1	; 0x01
    15c0:	88 2f       	mov	r24, r24
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	9c 01       	movw	r18, r24
    15c6:	27 70       	andi	r18, 0x07	; 7
    15c8:	30 70       	andi	r19, 0x00	; 0
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	02 2e       	mov	r0, r18
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <DIO_WriteChannel+0x84>
    15d2:	88 0f       	add	r24, r24
    15d4:	99 1f       	adc	r25, r25
    15d6:	0a 94       	dec	r0
    15d8:	e2 f7       	brpl	.-8      	; 0x15d2 <DIO_WriteChannel+0x80>
    15da:	84 2b       	or	r24, r20
    15dc:	8c 93       	st	X, r24
    15de:	ad c0       	rjmp	.+346    	; 0x173a <DIO_WriteChannel+0x1e8>
		}
		else{
			CLR_BIT((PORTA),(channel%PORT_SIZE));
    15e0:	ab e3       	ldi	r26, 0x3B	; 59
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	eb e3       	ldi	r30, 0x3B	; 59
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	48 2f       	mov	r20, r24
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
    15ee:	88 2f       	mov	r24, r24
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	9c 01       	movw	r18, r24
    15f4:	27 70       	andi	r18, 0x07	; 7
    15f6:	30 70       	andi	r19, 0x00	; 0
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	02 2e       	mov	r0, r18
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <DIO_WriteChannel+0xb2>
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	0a 94       	dec	r0
    1606:	e2 f7       	brpl	.-8      	; 0x1600 <DIO_WriteChannel+0xae>
    1608:	80 95       	com	r24
    160a:	84 23       	and	r24, r20
    160c:	8c 93       	st	X, r24
    160e:	95 c0       	rjmp	.+298    	; 0x173a <DIO_WriteChannel+0x1e8>
		}
		break;
	case PB:
		if (status == HIGH){
    1610:	8a 81       	ldd	r24, Y+2	; 0x02
    1612:	81 30       	cpi	r24, 0x01	; 1
    1614:	b9 f4       	brne	.+46     	; 0x1644 <DIO_WriteChannel+0xf2>
			SET_BIT((PORTB),(channel%PORT_SIZE));
    1616:	a8 e3       	ldi	r26, 0x38	; 56
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	e8 e3       	ldi	r30, 0x38	; 56
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	48 2f       	mov	r20, r24
    1622:	89 81       	ldd	r24, Y+1	; 0x01
    1624:	88 2f       	mov	r24, r24
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	9c 01       	movw	r18, r24
    162a:	27 70       	andi	r18, 0x07	; 7
    162c:	30 70       	andi	r19, 0x00	; 0
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	02 2e       	mov	r0, r18
    1634:	02 c0       	rjmp	.+4      	; 0x163a <DIO_WriteChannel+0xe8>
    1636:	88 0f       	add	r24, r24
    1638:	99 1f       	adc	r25, r25
    163a:	0a 94       	dec	r0
    163c:	e2 f7       	brpl	.-8      	; 0x1636 <DIO_WriteChannel+0xe4>
    163e:	84 2b       	or	r24, r20
    1640:	8c 93       	st	X, r24
    1642:	7b c0       	rjmp	.+246    	; 0x173a <DIO_WriteChannel+0x1e8>
		}
		else{
			CLR_BIT((PORTB),(channel%PORT_SIZE));
    1644:	a8 e3       	ldi	r26, 0x38	; 56
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	e8 e3       	ldi	r30, 0x38	; 56
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	48 2f       	mov	r20, r24
    1650:	89 81       	ldd	r24, Y+1	; 0x01
    1652:	88 2f       	mov	r24, r24
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	9c 01       	movw	r18, r24
    1658:	27 70       	andi	r18, 0x07	; 7
    165a:	30 70       	andi	r19, 0x00	; 0
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	02 2e       	mov	r0, r18
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <DIO_WriteChannel+0x116>
    1664:	88 0f       	add	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	0a 94       	dec	r0
    166a:	e2 f7       	brpl	.-8      	; 0x1664 <DIO_WriteChannel+0x112>
    166c:	80 95       	com	r24
    166e:	84 23       	and	r24, r20
    1670:	8c 93       	st	X, r24
    1672:	63 c0       	rjmp	.+198    	; 0x173a <DIO_WriteChannel+0x1e8>
		}
		break;
	case PC:
		if (status == HIGH){
    1674:	8a 81       	ldd	r24, Y+2	; 0x02
    1676:	81 30       	cpi	r24, 0x01	; 1
    1678:	b9 f4       	brne	.+46     	; 0x16a8 <DIO_WriteChannel+0x156>
			SET_BIT((PORTC),(channel%PORT_SIZE));
    167a:	a5 e3       	ldi	r26, 0x35	; 53
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	e5 e3       	ldi	r30, 0x35	; 53
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	48 2f       	mov	r20, r24
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	88 2f       	mov	r24, r24
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	9c 01       	movw	r18, r24
    168e:	27 70       	andi	r18, 0x07	; 7
    1690:	30 70       	andi	r19, 0x00	; 0
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	02 2e       	mov	r0, r18
    1698:	02 c0       	rjmp	.+4      	; 0x169e <DIO_WriteChannel+0x14c>
    169a:	88 0f       	add	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	0a 94       	dec	r0
    16a0:	e2 f7       	brpl	.-8      	; 0x169a <DIO_WriteChannel+0x148>
    16a2:	84 2b       	or	r24, r20
    16a4:	8c 93       	st	X, r24
    16a6:	49 c0       	rjmp	.+146    	; 0x173a <DIO_WriteChannel+0x1e8>
		}
		else{
			CLR_BIT((PORTC),(channel%PORT_SIZE));
    16a8:	a5 e3       	ldi	r26, 0x35	; 53
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	e5 e3       	ldi	r30, 0x35	; 53
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	48 2f       	mov	r20, r24
    16b4:	89 81       	ldd	r24, Y+1	; 0x01
    16b6:	88 2f       	mov	r24, r24
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	9c 01       	movw	r18, r24
    16bc:	27 70       	andi	r18, 0x07	; 7
    16be:	30 70       	andi	r19, 0x00	; 0
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	02 2e       	mov	r0, r18
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <DIO_WriteChannel+0x17a>
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	0a 94       	dec	r0
    16ce:	e2 f7       	brpl	.-8      	; 0x16c8 <DIO_WriteChannel+0x176>
    16d0:	80 95       	com	r24
    16d2:	84 23       	and	r24, r20
    16d4:	8c 93       	st	X, r24
    16d6:	31 c0       	rjmp	.+98     	; 0x173a <DIO_WriteChannel+0x1e8>
		}
		break;
	case PD:
		if (status == HIGH){
    16d8:	8a 81       	ldd	r24, Y+2	; 0x02
    16da:	81 30       	cpi	r24, 0x01	; 1
    16dc:	b9 f4       	brne	.+46     	; 0x170c <DIO_WriteChannel+0x1ba>
			SET_BIT((PORTD),(channel%PORT_SIZE));
    16de:	a2 e3       	ldi	r26, 0x32	; 50
    16e0:	b0 e0       	ldi	r27, 0x00	; 0
    16e2:	e2 e3       	ldi	r30, 0x32	; 50
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	48 2f       	mov	r20, r24
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	88 2f       	mov	r24, r24
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	9c 01       	movw	r18, r24
    16f2:	27 70       	andi	r18, 0x07	; 7
    16f4:	30 70       	andi	r19, 0x00	; 0
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	02 2e       	mov	r0, r18
    16fc:	02 c0       	rjmp	.+4      	; 0x1702 <DIO_WriteChannel+0x1b0>
    16fe:	88 0f       	add	r24, r24
    1700:	99 1f       	adc	r25, r25
    1702:	0a 94       	dec	r0
    1704:	e2 f7       	brpl	.-8      	; 0x16fe <DIO_WriteChannel+0x1ac>
    1706:	84 2b       	or	r24, r20
    1708:	8c 93       	st	X, r24
    170a:	17 c0       	rjmp	.+46     	; 0x173a <DIO_WriteChannel+0x1e8>
		}
		else{
			CLR_BIT((PORTD),(channel%PORT_SIZE));
    170c:	a2 e3       	ldi	r26, 0x32	; 50
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	e2 e3       	ldi	r30, 0x32	; 50
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	48 2f       	mov	r20, r24
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	88 2f       	mov	r24, r24
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	9c 01       	movw	r18, r24
    1720:	27 70       	andi	r18, 0x07	; 7
    1722:	30 70       	andi	r19, 0x00	; 0
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	02 2e       	mov	r0, r18
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <DIO_WriteChannel+0x1de>
    172c:	88 0f       	add	r24, r24
    172e:	99 1f       	adc	r25, r25
    1730:	0a 94       	dec	r0
    1732:	e2 f7       	brpl	.-8      	; 0x172c <DIO_WriteChannel+0x1da>
    1734:	80 95       	com	r24
    1736:	84 23       	and	r24, r20
    1738:	8c 93       	st	X, r24
		}
		break;
	}
}
    173a:	0f 90       	pop	r0
    173c:	0f 90       	pop	r0
    173e:	0f 90       	pop	r0
    1740:	0f 90       	pop	r0
    1742:	cf 91       	pop	r28
    1744:	df 91       	pop	r29
    1746:	08 95       	ret

00001748 <DIO_ReadChannel>:

pin_channel_status DIO_ReadChannel(pin_channel_type channel){
    1748:	df 93       	push	r29
    174a:	cf 93       	push	r28
    174c:	00 d0       	rcall	.+0      	; 0x174e <DIO_ReadChannel+0x6>
    174e:	00 d0       	rcall	.+0      	; 0x1750 <DIO_ReadChannel+0x8>
    1750:	0f 92       	push	r0
    1752:	cd b7       	in	r28, 0x3d	; 61
    1754:	de b7       	in	r29, 0x3e	; 62
    1756:	89 83       	std	Y+1, r24	; 0x01
	switch (channel / PORT_SIZE){
    1758:	89 81       	ldd	r24, Y+1	; 0x01
    175a:	86 95       	lsr	r24
    175c:	86 95       	lsr	r24
    175e:	86 95       	lsr	r24
    1760:	28 2f       	mov	r18, r24
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	3c 83       	std	Y+4, r19	; 0x04
    1766:	2b 83       	std	Y+3, r18	; 0x03
    1768:	4b 81       	ldd	r20, Y+3	; 0x03
    176a:	5c 81       	ldd	r21, Y+4	; 0x04
    176c:	41 30       	cpi	r20, 0x01	; 1
    176e:	51 05       	cpc	r21, r1
    1770:	61 f1       	breq	.+88     	; 0x17ca <DIO_ReadChannel+0x82>
    1772:	8b 81       	ldd	r24, Y+3	; 0x03
    1774:	9c 81       	ldd	r25, Y+4	; 0x04
    1776:	82 30       	cpi	r24, 0x02	; 2
    1778:	91 05       	cpc	r25, r1
    177a:	34 f4       	brge	.+12     	; 0x1788 <DIO_ReadChannel+0x40>
    177c:	2b 81       	ldd	r18, Y+3	; 0x03
    177e:	3c 81       	ldd	r19, Y+4	; 0x04
    1780:	21 15       	cp	r18, r1
    1782:	31 05       	cpc	r19, r1
    1784:	69 f0       	breq	.+26     	; 0x17a0 <DIO_ReadChannel+0x58>
    1786:	60 c0       	rjmp	.+192    	; 0x1848 <DIO_ReadChannel+0x100>
    1788:	4b 81       	ldd	r20, Y+3	; 0x03
    178a:	5c 81       	ldd	r21, Y+4	; 0x04
    178c:	42 30       	cpi	r20, 0x02	; 2
    178e:	51 05       	cpc	r21, r1
    1790:	89 f1       	breq	.+98     	; 0x17f4 <DIO_ReadChannel+0xac>
    1792:	8b 81       	ldd	r24, Y+3	; 0x03
    1794:	9c 81       	ldd	r25, Y+4	; 0x04
    1796:	83 30       	cpi	r24, 0x03	; 3
    1798:	91 05       	cpc	r25, r1
    179a:	09 f4       	brne	.+2      	; 0x179e <DIO_ReadChannel+0x56>
    179c:	40 c0       	rjmp	.+128    	; 0x181e <DIO_ReadChannel+0xd6>
    179e:	54 c0       	rjmp	.+168    	; 0x1848 <DIO_ReadChannel+0x100>
	case PA:
		return GET_BIT((PINA),(channel%PORT_SIZE));
    17a0:	e9 e3       	ldi	r30, 0x39	; 57
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	28 2f       	mov	r18, r24
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	89 81       	ldd	r24, Y+1	; 0x01
    17ac:	88 2f       	mov	r24, r24
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	87 70       	andi	r24, 0x07	; 7
    17b2:	90 70       	andi	r25, 0x00	; 0
    17b4:	a9 01       	movw	r20, r18
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <DIO_ReadChannel+0x74>
    17b8:	55 95       	asr	r21
    17ba:	47 95       	ror	r20
    17bc:	8a 95       	dec	r24
    17be:	e2 f7       	brpl	.-8      	; 0x17b8 <DIO_ReadChannel+0x70>
    17c0:	ca 01       	movw	r24, r20
    17c2:	58 2f       	mov	r21, r24
    17c4:	51 70       	andi	r21, 0x01	; 1
    17c6:	5a 83       	std	Y+2, r21	; 0x02
    17c8:	40 c0       	rjmp	.+128    	; 0x184a <DIO_ReadChannel+0x102>
	case PB:
		return GET_BIT((PINB),(channel%PORT_SIZE));
    17ca:	e6 e3       	ldi	r30, 0x36	; 54
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	28 2f       	mov	r18, r24
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
    17d6:	88 2f       	mov	r24, r24
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	87 70       	andi	r24, 0x07	; 7
    17dc:	90 70       	andi	r25, 0x00	; 0
    17de:	a9 01       	movw	r20, r18
    17e0:	02 c0       	rjmp	.+4      	; 0x17e6 <DIO_ReadChannel+0x9e>
    17e2:	55 95       	asr	r21
    17e4:	47 95       	ror	r20
    17e6:	8a 95       	dec	r24
    17e8:	e2 f7       	brpl	.-8      	; 0x17e2 <DIO_ReadChannel+0x9a>
    17ea:	ca 01       	movw	r24, r20
    17ec:	58 2f       	mov	r21, r24
    17ee:	51 70       	andi	r21, 0x01	; 1
    17f0:	5a 83       	std	Y+2, r21	; 0x02
    17f2:	2b c0       	rjmp	.+86     	; 0x184a <DIO_ReadChannel+0x102>
	case PC:
		return GET_BIT((PINC),(channel%PORT_SIZE));
    17f4:	e3 e3       	ldi	r30, 0x33	; 51
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	28 2f       	mov	r18, r24
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	88 2f       	mov	r24, r24
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	87 70       	andi	r24, 0x07	; 7
    1806:	90 70       	andi	r25, 0x00	; 0
    1808:	a9 01       	movw	r20, r18
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <DIO_ReadChannel+0xc8>
    180c:	55 95       	asr	r21
    180e:	47 95       	ror	r20
    1810:	8a 95       	dec	r24
    1812:	e2 f7       	brpl	.-8      	; 0x180c <DIO_ReadChannel+0xc4>
    1814:	ca 01       	movw	r24, r20
    1816:	58 2f       	mov	r21, r24
    1818:	51 70       	andi	r21, 0x01	; 1
    181a:	5a 83       	std	Y+2, r21	; 0x02
    181c:	16 c0       	rjmp	.+44     	; 0x184a <DIO_ReadChannel+0x102>
	case PD:
		return GET_BIT((PIND),(channel%PORT_SIZE));
    181e:	e0 e3       	ldi	r30, 0x30	; 48
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
    1824:	28 2f       	mov	r18, r24
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	89 81       	ldd	r24, Y+1	; 0x01
    182a:	88 2f       	mov	r24, r24
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	87 70       	andi	r24, 0x07	; 7
    1830:	90 70       	andi	r25, 0x00	; 0
    1832:	a9 01       	movw	r20, r18
    1834:	02 c0       	rjmp	.+4      	; 0x183a <DIO_ReadChannel+0xf2>
    1836:	55 95       	asr	r21
    1838:	47 95       	ror	r20
    183a:	8a 95       	dec	r24
    183c:	e2 f7       	brpl	.-8      	; 0x1836 <DIO_ReadChannel+0xee>
    183e:	ca 01       	movw	r24, r20
    1840:	58 2f       	mov	r21, r24
    1842:	51 70       	andi	r21, 0x01	; 1
    1844:	5a 83       	std	Y+2, r21	; 0x02
    1846:	01 c0       	rjmp	.+2      	; 0x184a <DIO_ReadChannel+0x102>
    1848:	02 c0       	rjmp	.+4      	; 0x184e <DIO_ReadChannel+0x106>
	}
}
    184a:	8a 81       	ldd	r24, Y+2	; 0x02
    184c:	8d 83       	std	Y+5, r24	; 0x05
    184e:	8d 81       	ldd	r24, Y+5	; 0x05
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	0f 90       	pop	r0
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	cf 91       	pop	r28
    185c:	df 91       	pop	r29
    185e:	08 95       	ret

00001860 <DIO_SetInternalPullup>:

void DIO_SetInternalPullup(pin_channel_type channel, pin_channel_status status){
    1860:	df 93       	push	r29
    1862:	cf 93       	push	r28
    1864:	00 d0       	rcall	.+0      	; 0x1866 <DIO_SetInternalPullup+0x6>
    1866:	00 d0       	rcall	.+0      	; 0x1868 <DIO_SetInternalPullup+0x8>
    1868:	cd b7       	in	r28, 0x3d	; 61
    186a:	de b7       	in	r29, 0x3e	; 62
    186c:	89 83       	std	Y+1, r24	; 0x01
    186e:	6a 83       	std	Y+2, r22	; 0x02
	switch (channel / PORT_SIZE){
    1870:	89 81       	ldd	r24, Y+1	; 0x01
    1872:	86 95       	lsr	r24
    1874:	86 95       	lsr	r24
    1876:	86 95       	lsr	r24
    1878:	28 2f       	mov	r18, r24
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	3c 83       	std	Y+4, r19	; 0x04
    187e:	2b 83       	std	Y+3, r18	; 0x03
    1880:	8b 81       	ldd	r24, Y+3	; 0x03
    1882:	9c 81       	ldd	r25, Y+4	; 0x04
    1884:	81 30       	cpi	r24, 0x01	; 1
    1886:	91 05       	cpc	r25, r1
    1888:	09 f4       	brne	.+2      	; 0x188c <DIO_SetInternalPullup+0x2c>
    188a:	49 c0       	rjmp	.+146    	; 0x191e <DIO_SetInternalPullup+0xbe>
    188c:	2b 81       	ldd	r18, Y+3	; 0x03
    188e:	3c 81       	ldd	r19, Y+4	; 0x04
    1890:	22 30       	cpi	r18, 0x02	; 2
    1892:	31 05       	cpc	r19, r1
    1894:	2c f4       	brge	.+10     	; 0x18a0 <DIO_SetInternalPullup+0x40>
    1896:	8b 81       	ldd	r24, Y+3	; 0x03
    1898:	9c 81       	ldd	r25, Y+4	; 0x04
    189a:	00 97       	sbiw	r24, 0x00	; 0
    189c:	71 f0       	breq	.+28     	; 0x18ba <DIO_SetInternalPullup+0x5a>
    189e:	d4 c0       	rjmp	.+424    	; 0x1a48 <DIO_SetInternalPullup+0x1e8>
    18a0:	2b 81       	ldd	r18, Y+3	; 0x03
    18a2:	3c 81       	ldd	r19, Y+4	; 0x04
    18a4:	22 30       	cpi	r18, 0x02	; 2
    18a6:	31 05       	cpc	r19, r1
    18a8:	09 f4       	brne	.+2      	; 0x18ac <DIO_SetInternalPullup+0x4c>
    18aa:	6b c0       	rjmp	.+214    	; 0x1982 <DIO_SetInternalPullup+0x122>
    18ac:	8b 81       	ldd	r24, Y+3	; 0x03
    18ae:	9c 81       	ldd	r25, Y+4	; 0x04
    18b0:	83 30       	cpi	r24, 0x03	; 3
    18b2:	91 05       	cpc	r25, r1
    18b4:	09 f4       	brne	.+2      	; 0x18b8 <DIO_SetInternalPullup+0x58>
    18b6:	97 c0       	rjmp	.+302    	; 0x19e6 <DIO_SetInternalPullup+0x186>
    18b8:	c7 c0       	rjmp	.+398    	; 0x1a48 <DIO_SetInternalPullup+0x1e8>
	case PA:
		if (status == HIGH){
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	81 30       	cpi	r24, 0x01	; 1
    18be:	b9 f4       	brne	.+46     	; 0x18ee <DIO_SetInternalPullup+0x8e>
			SET_BIT((PORTA),(channel%PORT_SIZE));
    18c0:	ab e3       	ldi	r26, 0x3B	; 59
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	eb e3       	ldi	r30, 0x3B	; 59
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	48 2f       	mov	r20, r24
    18cc:	89 81       	ldd	r24, Y+1	; 0x01
    18ce:	88 2f       	mov	r24, r24
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	9c 01       	movw	r18, r24
    18d4:	27 70       	andi	r18, 0x07	; 7
    18d6:	30 70       	andi	r19, 0x00	; 0
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	02 2e       	mov	r0, r18
    18de:	02 c0       	rjmp	.+4      	; 0x18e4 <DIO_SetInternalPullup+0x84>
    18e0:	88 0f       	add	r24, r24
    18e2:	99 1f       	adc	r25, r25
    18e4:	0a 94       	dec	r0
    18e6:	e2 f7       	brpl	.-8      	; 0x18e0 <DIO_SetInternalPullup+0x80>
    18e8:	84 2b       	or	r24, r20
    18ea:	8c 93       	st	X, r24
    18ec:	ad c0       	rjmp	.+346    	; 0x1a48 <DIO_SetInternalPullup+0x1e8>
		}
		else{
			CLR_BIT((PORTA),(channel%PORT_SIZE));
    18ee:	ab e3       	ldi	r26, 0x3B	; 59
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	eb e3       	ldi	r30, 0x3B	; 59
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	48 2f       	mov	r20, r24
    18fa:	89 81       	ldd	r24, Y+1	; 0x01
    18fc:	88 2f       	mov	r24, r24
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	9c 01       	movw	r18, r24
    1902:	27 70       	andi	r18, 0x07	; 7
    1904:	30 70       	andi	r19, 0x00	; 0
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	02 2e       	mov	r0, r18
    190c:	02 c0       	rjmp	.+4      	; 0x1912 <DIO_SetInternalPullup+0xb2>
    190e:	88 0f       	add	r24, r24
    1910:	99 1f       	adc	r25, r25
    1912:	0a 94       	dec	r0
    1914:	e2 f7       	brpl	.-8      	; 0x190e <DIO_SetInternalPullup+0xae>
    1916:	80 95       	com	r24
    1918:	84 23       	and	r24, r20
    191a:	8c 93       	st	X, r24
    191c:	95 c0       	rjmp	.+298    	; 0x1a48 <DIO_SetInternalPullup+0x1e8>
		}
		break;
	case PB:
		if (status == HIGH){
    191e:	8a 81       	ldd	r24, Y+2	; 0x02
    1920:	81 30       	cpi	r24, 0x01	; 1
    1922:	b9 f4       	brne	.+46     	; 0x1952 <DIO_SetInternalPullup+0xf2>
			SET_BIT((PORTB),(channel%PORT_SIZE));
    1924:	a8 e3       	ldi	r26, 0x38	; 56
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	e8 e3       	ldi	r30, 0x38	; 56
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	48 2f       	mov	r20, r24
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	88 2f       	mov	r24, r24
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	9c 01       	movw	r18, r24
    1938:	27 70       	andi	r18, 0x07	; 7
    193a:	30 70       	andi	r19, 0x00	; 0
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	02 2e       	mov	r0, r18
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <DIO_SetInternalPullup+0xe8>
    1944:	88 0f       	add	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	0a 94       	dec	r0
    194a:	e2 f7       	brpl	.-8      	; 0x1944 <DIO_SetInternalPullup+0xe4>
    194c:	84 2b       	or	r24, r20
    194e:	8c 93       	st	X, r24
    1950:	7b c0       	rjmp	.+246    	; 0x1a48 <DIO_SetInternalPullup+0x1e8>
		}
		else{
			CLR_BIT((PORTB),(channel%PORT_SIZE));
    1952:	a8 e3       	ldi	r26, 0x38	; 56
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	e8 e3       	ldi	r30, 0x38	; 56
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	48 2f       	mov	r20, r24
    195e:	89 81       	ldd	r24, Y+1	; 0x01
    1960:	88 2f       	mov	r24, r24
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	9c 01       	movw	r18, r24
    1966:	27 70       	andi	r18, 0x07	; 7
    1968:	30 70       	andi	r19, 0x00	; 0
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	02 2e       	mov	r0, r18
    1970:	02 c0       	rjmp	.+4      	; 0x1976 <DIO_SetInternalPullup+0x116>
    1972:	88 0f       	add	r24, r24
    1974:	99 1f       	adc	r25, r25
    1976:	0a 94       	dec	r0
    1978:	e2 f7       	brpl	.-8      	; 0x1972 <DIO_SetInternalPullup+0x112>
    197a:	80 95       	com	r24
    197c:	84 23       	and	r24, r20
    197e:	8c 93       	st	X, r24
    1980:	63 c0       	rjmp	.+198    	; 0x1a48 <DIO_SetInternalPullup+0x1e8>
		}
		break;
	case PC:
		if (status == HIGH){
    1982:	8a 81       	ldd	r24, Y+2	; 0x02
    1984:	81 30       	cpi	r24, 0x01	; 1
    1986:	b9 f4       	brne	.+46     	; 0x19b6 <DIO_SetInternalPullup+0x156>
			SET_BIT((PORTC),(channel%PORT_SIZE));
    1988:	a5 e3       	ldi	r26, 0x35	; 53
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	e5 e3       	ldi	r30, 0x35	; 53
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	48 2f       	mov	r20, r24
    1994:	89 81       	ldd	r24, Y+1	; 0x01
    1996:	88 2f       	mov	r24, r24
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	9c 01       	movw	r18, r24
    199c:	27 70       	andi	r18, 0x07	; 7
    199e:	30 70       	andi	r19, 0x00	; 0
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	02 2e       	mov	r0, r18
    19a6:	02 c0       	rjmp	.+4      	; 0x19ac <DIO_SetInternalPullup+0x14c>
    19a8:	88 0f       	add	r24, r24
    19aa:	99 1f       	adc	r25, r25
    19ac:	0a 94       	dec	r0
    19ae:	e2 f7       	brpl	.-8      	; 0x19a8 <DIO_SetInternalPullup+0x148>
    19b0:	84 2b       	or	r24, r20
    19b2:	8c 93       	st	X, r24
    19b4:	49 c0       	rjmp	.+146    	; 0x1a48 <DIO_SetInternalPullup+0x1e8>
		}
		else{
			CLR_BIT((PORTC),(channel%PORT_SIZE));
    19b6:	a5 e3       	ldi	r26, 0x35	; 53
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	e5 e3       	ldi	r30, 0x35	; 53
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	48 2f       	mov	r20, r24
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
    19c4:	88 2f       	mov	r24, r24
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	9c 01       	movw	r18, r24
    19ca:	27 70       	andi	r18, 0x07	; 7
    19cc:	30 70       	andi	r19, 0x00	; 0
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	02 2e       	mov	r0, r18
    19d4:	02 c0       	rjmp	.+4      	; 0x19da <DIO_SetInternalPullup+0x17a>
    19d6:	88 0f       	add	r24, r24
    19d8:	99 1f       	adc	r25, r25
    19da:	0a 94       	dec	r0
    19dc:	e2 f7       	brpl	.-8      	; 0x19d6 <DIO_SetInternalPullup+0x176>
    19de:	80 95       	com	r24
    19e0:	84 23       	and	r24, r20
    19e2:	8c 93       	st	X, r24
    19e4:	31 c0       	rjmp	.+98     	; 0x1a48 <DIO_SetInternalPullup+0x1e8>
		}
		break;
	case PD:
		if (status == HIGH){
    19e6:	8a 81       	ldd	r24, Y+2	; 0x02
    19e8:	81 30       	cpi	r24, 0x01	; 1
    19ea:	b9 f4       	brne	.+46     	; 0x1a1a <DIO_SetInternalPullup+0x1ba>
			SET_BIT((PORTD),(channel%PORT_SIZE));
    19ec:	a2 e3       	ldi	r26, 0x32	; 50
    19ee:	b0 e0       	ldi	r27, 0x00	; 0
    19f0:	e2 e3       	ldi	r30, 0x32	; 50
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	48 2f       	mov	r20, r24
    19f8:	89 81       	ldd	r24, Y+1	; 0x01
    19fa:	88 2f       	mov	r24, r24
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	9c 01       	movw	r18, r24
    1a00:	27 70       	andi	r18, 0x07	; 7
    1a02:	30 70       	andi	r19, 0x00	; 0
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	02 2e       	mov	r0, r18
    1a0a:	02 c0       	rjmp	.+4      	; 0x1a10 <DIO_SetInternalPullup+0x1b0>
    1a0c:	88 0f       	add	r24, r24
    1a0e:	99 1f       	adc	r25, r25
    1a10:	0a 94       	dec	r0
    1a12:	e2 f7       	brpl	.-8      	; 0x1a0c <DIO_SetInternalPullup+0x1ac>
    1a14:	84 2b       	or	r24, r20
    1a16:	8c 93       	st	X, r24
    1a18:	17 c0       	rjmp	.+46     	; 0x1a48 <DIO_SetInternalPullup+0x1e8>
		}
		else{
			CLR_BIT((PORTD),(channel%PORT_SIZE));
    1a1a:	a2 e3       	ldi	r26, 0x32	; 50
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	e2 e3       	ldi	r30, 0x32	; 50
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	48 2f       	mov	r20, r24
    1a26:	89 81       	ldd	r24, Y+1	; 0x01
    1a28:	88 2f       	mov	r24, r24
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	9c 01       	movw	r18, r24
    1a2e:	27 70       	andi	r18, 0x07	; 7
    1a30:	30 70       	andi	r19, 0x00	; 0
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	02 2e       	mov	r0, r18
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <DIO_SetInternalPullup+0x1de>
    1a3a:	88 0f       	add	r24, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	0a 94       	dec	r0
    1a40:	e2 f7       	brpl	.-8      	; 0x1a3a <DIO_SetInternalPullup+0x1da>
    1a42:	80 95       	com	r24
    1a44:	84 23       	and	r24, r20
    1a46:	8c 93       	st	X, r24
		}
		break;
		}
}
    1a48:	0f 90       	pop	r0
    1a4a:	0f 90       	pop	r0
    1a4c:	0f 90       	pop	r0
    1a4e:	0f 90       	pop	r0
    1a50:	cf 91       	pop	r28
    1a52:	df 91       	pop	r29
    1a54:	08 95       	ret

00001a56 <DIO_Toggle>:

void DIO_Toggle(pin_channel_type channel){
    1a56:	df 93       	push	r29
    1a58:	cf 93       	push	r28
    1a5a:	00 d0       	rcall	.+0      	; 0x1a5c <DIO_Toggle+0x6>
    1a5c:	0f 92       	push	r0
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
    1a62:	89 83       	std	Y+1, r24	; 0x01
	switch (channel / PORT_SIZE){
    1a64:	89 81       	ldd	r24, Y+1	; 0x01
    1a66:	86 95       	lsr	r24
    1a68:	86 95       	lsr	r24
    1a6a:	86 95       	lsr	r24
    1a6c:	28 2f       	mov	r18, r24
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	3b 83       	std	Y+3, r19	; 0x03
    1a72:	2a 83       	std	Y+2, r18	; 0x02
    1a74:	8a 81       	ldd	r24, Y+2	; 0x02
    1a76:	9b 81       	ldd	r25, Y+3	; 0x03
    1a78:	81 30       	cpi	r24, 0x01	; 1
    1a7a:	91 05       	cpc	r25, r1
    1a7c:	69 f1       	breq	.+90     	; 0x1ad8 <DIO_Toggle+0x82>
    1a7e:	2a 81       	ldd	r18, Y+2	; 0x02
    1a80:	3b 81       	ldd	r19, Y+3	; 0x03
    1a82:	22 30       	cpi	r18, 0x02	; 2
    1a84:	31 05       	cpc	r19, r1
    1a86:	2c f4       	brge	.+10     	; 0x1a92 <DIO_Toggle+0x3c>
    1a88:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a8c:	00 97       	sbiw	r24, 0x00	; 0
    1a8e:	69 f0       	breq	.+26     	; 0x1aaa <DIO_Toggle+0x54>
    1a90:	67 c0       	rjmp	.+206    	; 0x1b60 <DIO_Toggle+0x10a>
    1a92:	2a 81       	ldd	r18, Y+2	; 0x02
    1a94:	3b 81       	ldd	r19, Y+3	; 0x03
    1a96:	22 30       	cpi	r18, 0x02	; 2
    1a98:	31 05       	cpc	r19, r1
    1a9a:	a9 f1       	breq	.+106    	; 0x1b06 <DIO_Toggle+0xb0>
    1a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9e:	9b 81       	ldd	r25, Y+3	; 0x03
    1aa0:	83 30       	cpi	r24, 0x03	; 3
    1aa2:	91 05       	cpc	r25, r1
    1aa4:	09 f4       	brne	.+2      	; 0x1aa8 <DIO_Toggle+0x52>
    1aa6:	46 c0       	rjmp	.+140    	; 0x1b34 <DIO_Toggle+0xde>
    1aa8:	5b c0       	rjmp	.+182    	; 0x1b60 <DIO_Toggle+0x10a>
		case PA:
			TOGGLE_BIT((PORTA),(channel%PORT_SIZE));
    1aaa:	ab e3       	ldi	r26, 0x3B	; 59
    1aac:	b0 e0       	ldi	r27, 0x00	; 0
    1aae:	eb e3       	ldi	r30, 0x3B	; 59
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	80 81       	ld	r24, Z
    1ab4:	48 2f       	mov	r20, r24
    1ab6:	89 81       	ldd	r24, Y+1	; 0x01
    1ab8:	88 2f       	mov	r24, r24
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	9c 01       	movw	r18, r24
    1abe:	27 70       	andi	r18, 0x07	; 7
    1ac0:	30 70       	andi	r19, 0x00	; 0
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	02 2e       	mov	r0, r18
    1ac8:	02 c0       	rjmp	.+4      	; 0x1ace <DIO_Toggle+0x78>
    1aca:	88 0f       	add	r24, r24
    1acc:	99 1f       	adc	r25, r25
    1ace:	0a 94       	dec	r0
    1ad0:	e2 f7       	brpl	.-8      	; 0x1aca <DIO_Toggle+0x74>
    1ad2:	84 27       	eor	r24, r20
    1ad4:	8c 93       	st	X, r24
    1ad6:	44 c0       	rjmp	.+136    	; 0x1b60 <DIO_Toggle+0x10a>
			break;
		case PB:
			TOGGLE_BIT((PORTB),(channel%PORT_SIZE));
    1ad8:	a8 e3       	ldi	r26, 0x38	; 56
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	e8 e3       	ldi	r30, 0x38	; 56
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	48 2f       	mov	r20, r24
    1ae4:	89 81       	ldd	r24, Y+1	; 0x01
    1ae6:	88 2f       	mov	r24, r24
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	9c 01       	movw	r18, r24
    1aec:	27 70       	andi	r18, 0x07	; 7
    1aee:	30 70       	andi	r19, 0x00	; 0
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	02 2e       	mov	r0, r18
    1af6:	02 c0       	rjmp	.+4      	; 0x1afc <DIO_Toggle+0xa6>
    1af8:	88 0f       	add	r24, r24
    1afa:	99 1f       	adc	r25, r25
    1afc:	0a 94       	dec	r0
    1afe:	e2 f7       	brpl	.-8      	; 0x1af8 <DIO_Toggle+0xa2>
    1b00:	84 27       	eor	r24, r20
    1b02:	8c 93       	st	X, r24
    1b04:	2d c0       	rjmp	.+90     	; 0x1b60 <DIO_Toggle+0x10a>
			break;
		case PC:
			TOGGLE_BIT((PORTC),(channel%PORT_SIZE));
    1b06:	a5 e3       	ldi	r26, 0x35	; 53
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	e5 e3       	ldi	r30, 0x35	; 53
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	48 2f       	mov	r20, r24
    1b12:	89 81       	ldd	r24, Y+1	; 0x01
    1b14:	88 2f       	mov	r24, r24
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	9c 01       	movw	r18, r24
    1b1a:	27 70       	andi	r18, 0x07	; 7
    1b1c:	30 70       	andi	r19, 0x00	; 0
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	02 2e       	mov	r0, r18
    1b24:	02 c0       	rjmp	.+4      	; 0x1b2a <DIO_Toggle+0xd4>
    1b26:	88 0f       	add	r24, r24
    1b28:	99 1f       	adc	r25, r25
    1b2a:	0a 94       	dec	r0
    1b2c:	e2 f7       	brpl	.-8      	; 0x1b26 <DIO_Toggle+0xd0>
    1b2e:	84 27       	eor	r24, r20
    1b30:	8c 93       	st	X, r24
    1b32:	16 c0       	rjmp	.+44     	; 0x1b60 <DIO_Toggle+0x10a>
			break;
		case PD:
			TOGGLE_BIT((PORTD),(channel%PORT_SIZE));
    1b34:	a2 e3       	ldi	r26, 0x32	; 50
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	e2 e3       	ldi	r30, 0x32	; 50
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	48 2f       	mov	r20, r24
    1b40:	89 81       	ldd	r24, Y+1	; 0x01
    1b42:	88 2f       	mov	r24, r24
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	9c 01       	movw	r18, r24
    1b48:	27 70       	andi	r18, 0x07	; 7
    1b4a:	30 70       	andi	r19, 0x00	; 0
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	02 2e       	mov	r0, r18
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <DIO_Toggle+0x102>
    1b54:	88 0f       	add	r24, r24
    1b56:	99 1f       	adc	r25, r25
    1b58:	0a 94       	dec	r0
    1b5a:	e2 f7       	brpl	.-8      	; 0x1b54 <DIO_Toggle+0xfe>
    1b5c:	84 27       	eor	r24, r20
    1b5e:	8c 93       	st	X, r24
			break;
		}
}
    1b60:	0f 90       	pop	r0
    1b62:	0f 90       	pop	r0
    1b64:	0f 90       	pop	r0
    1b66:	cf 91       	pop	r28
    1b68:	df 91       	pop	r29
    1b6a:	08 95       	ret

00001b6c <DIO_init>:
		{PC,P6,DIO_OUTPUT}

};


void DIO_init(){
    1b6c:	df 93       	push	r29
    1b6e:	cf 93       	push	r28
    1b70:	00 d0       	rcall	.+0      	; 0x1b72 <DIO_init+0x6>
    1b72:	00 d0       	rcall	.+0      	; 0x1b74 <DIO_init+0x8>
    1b74:	cd b7       	in	r28, 0x3d	; 61
    1b76:	de b7       	in	r29, 0x3e	; 62
	for(int i = 0; i < (sizeof(pin_cfgs)/ sizeof(pin_cfgs[0])); i++){
    1b78:	1a 82       	std	Y+2, r1	; 0x02
    1b7a:	19 82       	std	Y+1, r1	; 0x01
    1b7c:	58 c1       	rjmp	.+688    	; 0x1e2e <DIO_init+0x2c2>
		switch(pin_cfgs[i].port){
    1b7e:	29 81       	ldd	r18, Y+1	; 0x01
    1b80:	3a 81       	ldd	r19, Y+2	; 0x02
    1b82:	c9 01       	movw	r24, r18
    1b84:	88 0f       	add	r24, r24
    1b86:	99 1f       	adc	r25, r25
    1b88:	82 0f       	add	r24, r18
    1b8a:	93 1f       	adc	r25, r19
    1b8c:	fc 01       	movw	r30, r24
    1b8e:	e9 54       	subi	r30, 0x49	; 73
    1b90:	fd 4f       	sbci	r31, 0xFD	; 253
    1b92:	80 81       	ld	r24, Z
    1b94:	28 2f       	mov	r18, r24
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	3c 83       	std	Y+4, r19	; 0x04
    1b9a:	2b 83       	std	Y+3, r18	; 0x03
    1b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba0:	81 30       	cpi	r24, 0x01	; 1
    1ba2:	91 05       	cpc	r25, r1
    1ba4:	09 f4       	brne	.+2      	; 0x1ba8 <DIO_init+0x3c>
    1ba6:	61 c0       	rjmp	.+194    	; 0x1c6a <DIO_init+0xfe>
    1ba8:	2b 81       	ldd	r18, Y+3	; 0x03
    1baa:	3c 81       	ldd	r19, Y+4	; 0x04
    1bac:	22 30       	cpi	r18, 0x02	; 2
    1bae:	31 05       	cpc	r19, r1
    1bb0:	2c f4       	brge	.+10     	; 0x1bbc <DIO_init+0x50>
    1bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb6:	00 97       	sbiw	r24, 0x00	; 0
    1bb8:	71 f0       	breq	.+28     	; 0x1bd6 <DIO_init+0x6a>
    1bba:	34 c1       	rjmp	.+616    	; 0x1e24 <DIO_init+0x2b8>
    1bbc:	2b 81       	ldd	r18, Y+3	; 0x03
    1bbe:	3c 81       	ldd	r19, Y+4	; 0x04
    1bc0:	22 30       	cpi	r18, 0x02	; 2
    1bc2:	31 05       	cpc	r19, r1
    1bc4:	09 f4       	brne	.+2      	; 0x1bc8 <DIO_init+0x5c>
    1bc6:	9b c0       	rjmp	.+310    	; 0x1cfe <DIO_init+0x192>
    1bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bca:	9c 81       	ldd	r25, Y+4	; 0x04
    1bcc:	83 30       	cpi	r24, 0x03	; 3
    1bce:	91 05       	cpc	r25, r1
    1bd0:	09 f4       	brne	.+2      	; 0x1bd4 <DIO_init+0x68>
    1bd2:	df c0       	rjmp	.+446    	; 0x1d92 <DIO_init+0x226>
    1bd4:	27 c1       	rjmp	.+590    	; 0x1e24 <DIO_init+0x2b8>
		case PA:
			if(pin_cfgs[i].dir == DIO_OUTPUT){
    1bd6:	29 81       	ldd	r18, Y+1	; 0x01
    1bd8:	3a 81       	ldd	r19, Y+2	; 0x02
    1bda:	c9 01       	movw	r24, r18
    1bdc:	88 0f       	add	r24, r24
    1bde:	99 1f       	adc	r25, r25
    1be0:	82 0f       	add	r24, r18
    1be2:	93 1f       	adc	r25, r19
    1be4:	fc 01       	movw	r30, r24
    1be6:	e7 54       	subi	r30, 0x47	; 71
    1be8:	fd 4f       	sbci	r31, 0xFD	; 253
    1bea:	80 81       	ld	r24, Z
    1bec:	81 30       	cpi	r24, 0x01	; 1
    1bee:	f1 f4       	brne	.+60     	; 0x1c2c <DIO_init+0xc0>
				SET_BIT(DDRA, pin_cfgs[i].pin);
    1bf0:	aa e3       	ldi	r26, 0x3A	; 58
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	ea e3       	ldi	r30, 0x3A	; 58
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	48 2f       	mov	r20, r24
    1bfc:	29 81       	ldd	r18, Y+1	; 0x01
    1bfe:	3a 81       	ldd	r19, Y+2	; 0x02
    1c00:	c9 01       	movw	r24, r18
    1c02:	88 0f       	add	r24, r24
    1c04:	99 1f       	adc	r25, r25
    1c06:	82 0f       	add	r24, r18
    1c08:	93 1f       	adc	r25, r19
    1c0a:	fc 01       	movw	r30, r24
    1c0c:	e8 54       	subi	r30, 0x48	; 72
    1c0e:	fd 4f       	sbci	r31, 0xFD	; 253
    1c10:	80 81       	ld	r24, Z
    1c12:	28 2f       	mov	r18, r24
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	02 2e       	mov	r0, r18
    1c1c:	02 c0       	rjmp	.+4      	; 0x1c22 <DIO_init+0xb6>
    1c1e:	88 0f       	add	r24, r24
    1c20:	99 1f       	adc	r25, r25
    1c22:	0a 94       	dec	r0
    1c24:	e2 f7       	brpl	.-8      	; 0x1c1e <DIO_init+0xb2>
    1c26:	84 2b       	or	r24, r20
    1c28:	8c 93       	st	X, r24
    1c2a:	fc c0       	rjmp	.+504    	; 0x1e24 <DIO_init+0x2b8>
			}
			else{
				CLR_BIT(DDRA, pin_cfgs[i].pin);
    1c2c:	aa e3       	ldi	r26, 0x3A	; 58
    1c2e:	b0 e0       	ldi	r27, 0x00	; 0
    1c30:	ea e3       	ldi	r30, 0x3A	; 58
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	48 2f       	mov	r20, r24
    1c38:	29 81       	ldd	r18, Y+1	; 0x01
    1c3a:	3a 81       	ldd	r19, Y+2	; 0x02
    1c3c:	c9 01       	movw	r24, r18
    1c3e:	88 0f       	add	r24, r24
    1c40:	99 1f       	adc	r25, r25
    1c42:	82 0f       	add	r24, r18
    1c44:	93 1f       	adc	r25, r19
    1c46:	fc 01       	movw	r30, r24
    1c48:	e8 54       	subi	r30, 0x48	; 72
    1c4a:	fd 4f       	sbci	r31, 0xFD	; 253
    1c4c:	80 81       	ld	r24, Z
    1c4e:	28 2f       	mov	r18, r24
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	02 2e       	mov	r0, r18
    1c58:	02 c0       	rjmp	.+4      	; 0x1c5e <DIO_init+0xf2>
    1c5a:	88 0f       	add	r24, r24
    1c5c:	99 1f       	adc	r25, r25
    1c5e:	0a 94       	dec	r0
    1c60:	e2 f7       	brpl	.-8      	; 0x1c5a <DIO_init+0xee>
    1c62:	80 95       	com	r24
    1c64:	84 23       	and	r24, r20
    1c66:	8c 93       	st	X, r24
    1c68:	dd c0       	rjmp	.+442    	; 0x1e24 <DIO_init+0x2b8>
			}
		break;
		case PB:
			if(pin_cfgs[i].dir == DIO_OUTPUT){
    1c6a:	29 81       	ldd	r18, Y+1	; 0x01
    1c6c:	3a 81       	ldd	r19, Y+2	; 0x02
    1c6e:	c9 01       	movw	r24, r18
    1c70:	88 0f       	add	r24, r24
    1c72:	99 1f       	adc	r25, r25
    1c74:	82 0f       	add	r24, r18
    1c76:	93 1f       	adc	r25, r19
    1c78:	fc 01       	movw	r30, r24
    1c7a:	e7 54       	subi	r30, 0x47	; 71
    1c7c:	fd 4f       	sbci	r31, 0xFD	; 253
    1c7e:	80 81       	ld	r24, Z
    1c80:	81 30       	cpi	r24, 0x01	; 1
    1c82:	f1 f4       	brne	.+60     	; 0x1cc0 <DIO_init+0x154>
				SET_BIT(DDRB, pin_cfgs[i].pin);
    1c84:	a7 e3       	ldi	r26, 0x37	; 55
    1c86:	b0 e0       	ldi	r27, 0x00	; 0
    1c88:	e7 e3       	ldi	r30, 0x37	; 55
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	80 81       	ld	r24, Z
    1c8e:	48 2f       	mov	r20, r24
    1c90:	29 81       	ldd	r18, Y+1	; 0x01
    1c92:	3a 81       	ldd	r19, Y+2	; 0x02
    1c94:	c9 01       	movw	r24, r18
    1c96:	88 0f       	add	r24, r24
    1c98:	99 1f       	adc	r25, r25
    1c9a:	82 0f       	add	r24, r18
    1c9c:	93 1f       	adc	r25, r19
    1c9e:	fc 01       	movw	r30, r24
    1ca0:	e8 54       	subi	r30, 0x48	; 72
    1ca2:	fd 4f       	sbci	r31, 0xFD	; 253
    1ca4:	80 81       	ld	r24, Z
    1ca6:	28 2f       	mov	r18, r24
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	02 2e       	mov	r0, r18
    1cb0:	02 c0       	rjmp	.+4      	; 0x1cb6 <DIO_init+0x14a>
    1cb2:	88 0f       	add	r24, r24
    1cb4:	99 1f       	adc	r25, r25
    1cb6:	0a 94       	dec	r0
    1cb8:	e2 f7       	brpl	.-8      	; 0x1cb2 <DIO_init+0x146>
    1cba:	84 2b       	or	r24, r20
    1cbc:	8c 93       	st	X, r24
    1cbe:	b2 c0       	rjmp	.+356    	; 0x1e24 <DIO_init+0x2b8>
			}
			else{
				CLR_BIT(DDRB, pin_cfgs[i].pin);
    1cc0:	a7 e3       	ldi	r26, 0x37	; 55
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	e7 e3       	ldi	r30, 0x37	; 55
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	48 2f       	mov	r20, r24
    1ccc:	29 81       	ldd	r18, Y+1	; 0x01
    1cce:	3a 81       	ldd	r19, Y+2	; 0x02
    1cd0:	c9 01       	movw	r24, r18
    1cd2:	88 0f       	add	r24, r24
    1cd4:	99 1f       	adc	r25, r25
    1cd6:	82 0f       	add	r24, r18
    1cd8:	93 1f       	adc	r25, r19
    1cda:	fc 01       	movw	r30, r24
    1cdc:	e8 54       	subi	r30, 0x48	; 72
    1cde:	fd 4f       	sbci	r31, 0xFD	; 253
    1ce0:	80 81       	ld	r24, Z
    1ce2:	28 2f       	mov	r18, r24
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	02 2e       	mov	r0, r18
    1cec:	02 c0       	rjmp	.+4      	; 0x1cf2 <DIO_init+0x186>
    1cee:	88 0f       	add	r24, r24
    1cf0:	99 1f       	adc	r25, r25
    1cf2:	0a 94       	dec	r0
    1cf4:	e2 f7       	brpl	.-8      	; 0x1cee <DIO_init+0x182>
    1cf6:	80 95       	com	r24
    1cf8:	84 23       	and	r24, r20
    1cfa:	8c 93       	st	X, r24
    1cfc:	93 c0       	rjmp	.+294    	; 0x1e24 <DIO_init+0x2b8>
			}
			break;
		case PC:
			if(pin_cfgs[i].dir == DIO_OUTPUT){
    1cfe:	29 81       	ldd	r18, Y+1	; 0x01
    1d00:	3a 81       	ldd	r19, Y+2	; 0x02
    1d02:	c9 01       	movw	r24, r18
    1d04:	88 0f       	add	r24, r24
    1d06:	99 1f       	adc	r25, r25
    1d08:	82 0f       	add	r24, r18
    1d0a:	93 1f       	adc	r25, r19
    1d0c:	fc 01       	movw	r30, r24
    1d0e:	e7 54       	subi	r30, 0x47	; 71
    1d10:	fd 4f       	sbci	r31, 0xFD	; 253
    1d12:	80 81       	ld	r24, Z
    1d14:	81 30       	cpi	r24, 0x01	; 1
    1d16:	f1 f4       	brne	.+60     	; 0x1d54 <DIO_init+0x1e8>
				SET_BIT(DDRC, pin_cfgs[i].pin);
    1d18:	a4 e3       	ldi	r26, 0x34	; 52
    1d1a:	b0 e0       	ldi	r27, 0x00	; 0
    1d1c:	e4 e3       	ldi	r30, 0x34	; 52
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	80 81       	ld	r24, Z
    1d22:	48 2f       	mov	r20, r24
    1d24:	29 81       	ldd	r18, Y+1	; 0x01
    1d26:	3a 81       	ldd	r19, Y+2	; 0x02
    1d28:	c9 01       	movw	r24, r18
    1d2a:	88 0f       	add	r24, r24
    1d2c:	99 1f       	adc	r25, r25
    1d2e:	82 0f       	add	r24, r18
    1d30:	93 1f       	adc	r25, r19
    1d32:	fc 01       	movw	r30, r24
    1d34:	e8 54       	subi	r30, 0x48	; 72
    1d36:	fd 4f       	sbci	r31, 0xFD	; 253
    1d38:	80 81       	ld	r24, Z
    1d3a:	28 2f       	mov	r18, r24
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	02 2e       	mov	r0, r18
    1d44:	02 c0       	rjmp	.+4      	; 0x1d4a <DIO_init+0x1de>
    1d46:	88 0f       	add	r24, r24
    1d48:	99 1f       	adc	r25, r25
    1d4a:	0a 94       	dec	r0
    1d4c:	e2 f7       	brpl	.-8      	; 0x1d46 <DIO_init+0x1da>
    1d4e:	84 2b       	or	r24, r20
    1d50:	8c 93       	st	X, r24
    1d52:	68 c0       	rjmp	.+208    	; 0x1e24 <DIO_init+0x2b8>
			}
			else{
				CLR_BIT(DDRC, pin_cfgs[i].pin);
    1d54:	a4 e3       	ldi	r26, 0x34	; 52
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	e4 e3       	ldi	r30, 0x34	; 52
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	48 2f       	mov	r20, r24
    1d60:	29 81       	ldd	r18, Y+1	; 0x01
    1d62:	3a 81       	ldd	r19, Y+2	; 0x02
    1d64:	c9 01       	movw	r24, r18
    1d66:	88 0f       	add	r24, r24
    1d68:	99 1f       	adc	r25, r25
    1d6a:	82 0f       	add	r24, r18
    1d6c:	93 1f       	adc	r25, r19
    1d6e:	fc 01       	movw	r30, r24
    1d70:	e8 54       	subi	r30, 0x48	; 72
    1d72:	fd 4f       	sbci	r31, 0xFD	; 253
    1d74:	80 81       	ld	r24, Z
    1d76:	28 2f       	mov	r18, r24
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	02 2e       	mov	r0, r18
    1d80:	02 c0       	rjmp	.+4      	; 0x1d86 <DIO_init+0x21a>
    1d82:	88 0f       	add	r24, r24
    1d84:	99 1f       	adc	r25, r25
    1d86:	0a 94       	dec	r0
    1d88:	e2 f7       	brpl	.-8      	; 0x1d82 <DIO_init+0x216>
    1d8a:	80 95       	com	r24
    1d8c:	84 23       	and	r24, r20
    1d8e:	8c 93       	st	X, r24
    1d90:	49 c0       	rjmp	.+146    	; 0x1e24 <DIO_init+0x2b8>
			}
		break;
		case PD:
			if(pin_cfgs[i].dir == DIO_OUTPUT){
    1d92:	29 81       	ldd	r18, Y+1	; 0x01
    1d94:	3a 81       	ldd	r19, Y+2	; 0x02
    1d96:	c9 01       	movw	r24, r18
    1d98:	88 0f       	add	r24, r24
    1d9a:	99 1f       	adc	r25, r25
    1d9c:	82 0f       	add	r24, r18
    1d9e:	93 1f       	adc	r25, r19
    1da0:	fc 01       	movw	r30, r24
    1da2:	e7 54       	subi	r30, 0x47	; 71
    1da4:	fd 4f       	sbci	r31, 0xFD	; 253
    1da6:	80 81       	ld	r24, Z
    1da8:	81 30       	cpi	r24, 0x01	; 1
    1daa:	f1 f4       	brne	.+60     	; 0x1de8 <DIO_init+0x27c>
				SET_BIT(DDRD, pin_cfgs[i].pin);
    1dac:	a1 e3       	ldi	r26, 0x31	; 49
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	e1 e3       	ldi	r30, 0x31	; 49
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	80 81       	ld	r24, Z
    1db6:	48 2f       	mov	r20, r24
    1db8:	29 81       	ldd	r18, Y+1	; 0x01
    1dba:	3a 81       	ldd	r19, Y+2	; 0x02
    1dbc:	c9 01       	movw	r24, r18
    1dbe:	88 0f       	add	r24, r24
    1dc0:	99 1f       	adc	r25, r25
    1dc2:	82 0f       	add	r24, r18
    1dc4:	93 1f       	adc	r25, r19
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	e8 54       	subi	r30, 0x48	; 72
    1dca:	fd 4f       	sbci	r31, 0xFD	; 253
    1dcc:	80 81       	ld	r24, Z
    1dce:	28 2f       	mov	r18, r24
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	02 2e       	mov	r0, r18
    1dd8:	02 c0       	rjmp	.+4      	; 0x1dde <DIO_init+0x272>
    1dda:	88 0f       	add	r24, r24
    1ddc:	99 1f       	adc	r25, r25
    1dde:	0a 94       	dec	r0
    1de0:	e2 f7       	brpl	.-8      	; 0x1dda <DIO_init+0x26e>
    1de2:	84 2b       	or	r24, r20
    1de4:	8c 93       	st	X, r24
    1de6:	1e c0       	rjmp	.+60     	; 0x1e24 <DIO_init+0x2b8>
			}
			else{
				CLR_BIT(DDRD, pin_cfgs[i].pin);
    1de8:	a1 e3       	ldi	r26, 0x31	; 49
    1dea:	b0 e0       	ldi	r27, 0x00	; 0
    1dec:	e1 e3       	ldi	r30, 0x31	; 49
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	80 81       	ld	r24, Z
    1df2:	48 2f       	mov	r20, r24
    1df4:	29 81       	ldd	r18, Y+1	; 0x01
    1df6:	3a 81       	ldd	r19, Y+2	; 0x02
    1df8:	c9 01       	movw	r24, r18
    1dfa:	88 0f       	add	r24, r24
    1dfc:	99 1f       	adc	r25, r25
    1dfe:	82 0f       	add	r24, r18
    1e00:	93 1f       	adc	r25, r19
    1e02:	fc 01       	movw	r30, r24
    1e04:	e8 54       	subi	r30, 0x48	; 72
    1e06:	fd 4f       	sbci	r31, 0xFD	; 253
    1e08:	80 81       	ld	r24, Z
    1e0a:	28 2f       	mov	r18, r24
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	02 2e       	mov	r0, r18
    1e14:	02 c0       	rjmp	.+4      	; 0x1e1a <DIO_init+0x2ae>
    1e16:	88 0f       	add	r24, r24
    1e18:	99 1f       	adc	r25, r25
    1e1a:	0a 94       	dec	r0
    1e1c:	e2 f7       	brpl	.-8      	; 0x1e16 <DIO_init+0x2aa>
    1e1e:	80 95       	com	r24
    1e20:	84 23       	and	r24, r20
    1e22:	8c 93       	st	X, r24

};


void DIO_init(){
	for(int i = 0; i < (sizeof(pin_cfgs)/ sizeof(pin_cfgs[0])); i++){
    1e24:	89 81       	ldd	r24, Y+1	; 0x01
    1e26:	9a 81       	ldd	r25, Y+2	; 0x02
    1e28:	01 96       	adiw	r24, 0x01	; 1
    1e2a:	9a 83       	std	Y+2, r25	; 0x02
    1e2c:	89 83       	std	Y+1, r24	; 0x01
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
    1e30:	9a 81       	ldd	r25, Y+2	; 0x02
    1e32:	8b 31       	cpi	r24, 0x1B	; 27
    1e34:	91 05       	cpc	r25, r1
    1e36:	08 f4       	brcc	.+2      	; 0x1e3a <DIO_init+0x2ce>
    1e38:	a2 ce       	rjmp	.-700    	; 0x1b7e <DIO_init+0x12>
				CLR_BIT(DDRD, pin_cfgs[i].pin);
			}
		break;
		}
	}
}
    1e3a:	0f 90       	pop	r0
    1e3c:	0f 90       	pop	r0
    1e3e:	0f 90       	pop	r0
    1e40:	0f 90       	pop	r0
    1e42:	cf 91       	pop	r28
    1e44:	df 91       	pop	r29
    1e46:	08 95       	ret

00001e48 <GI_vEnable>:
#include "general_interrupt.h"
#include "REGISTERS.h"
#include "../UTILS/MACROS.h"

void GI_vEnable(void)
{
    1e48:	df 93       	push	r29
    1e4a:	cf 93       	push	r28
    1e4c:	cd b7       	in	r28, 0x3d	; 61
    1e4e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, 7);
    1e50:	af e5       	ldi	r26, 0x5F	; 95
    1e52:	b0 e0       	ldi	r27, 0x00	; 0
    1e54:	ef e5       	ldi	r30, 0x5F	; 95
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	80 68       	ori	r24, 0x80	; 128
    1e5c:	8c 93       	st	X, r24
}
    1e5e:	cf 91       	pop	r28
    1e60:	df 91       	pop	r29
    1e62:	08 95       	ret

00001e64 <GI_vDisable>:
void GI_vDisable(void){
    1e64:	df 93       	push	r29
    1e66:	cf 93       	push	r28
    1e68:	cd b7       	in	r28, 0x3d	; 61
    1e6a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, 7);
    1e6c:	af e5       	ldi	r26, 0x5F	; 95
    1e6e:	b0 e0       	ldi	r27, 0x00	; 0
    1e70:	ef e5       	ldi	r30, 0x5F	; 95
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	80 81       	ld	r24, Z
    1e76:	8f 77       	andi	r24, 0x7F	; 127
    1e78:	8c 93       	st	X, r24
}
    1e7a:	cf 91       	pop	r28
    1e7c:	df 91       	pop	r29
    1e7e:	08 95       	ret

00001e80 <vTimer0_init>:
#include "../UTILS/STD_TYPES.h"
#include <string.h>

void (*p2f)(void) = NULL;

void vTimer0_init(void){
    1e80:	df 93       	push	r29
    1e82:	cf 93       	push	r28
    1e84:	cd b7       	in	r28, 0x3d	; 61
    1e86:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0,6);
	SET_BIT(TCCR0,3);
	OCR0 = COMPARE_TIMER;

#elif		MODE == PWM_FAST
	SET_BIT(TCCR0,6);
    1e88:	a3 e5       	ldi	r26, 0x53	; 83
    1e8a:	b0 e0       	ldi	r27, 0x00	; 0
    1e8c:	e3 e5       	ldi	r30, 0x53	; 83
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	80 81       	ld	r24, Z
    1e92:	80 64       	ori	r24, 0x40	; 64
    1e94:	8c 93       	st	X, r24
	SET_BIT(TCCR0,3);
    1e96:	a3 e5       	ldi	r26, 0x53	; 83
    1e98:	b0 e0       	ldi	r27, 0x00	; 0
    1e9a:	e3 e5       	ldi	r30, 0x53	; 83
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	88 60       	ori	r24, 0x08	; 8
    1ea2:	8c 93       	st	X, r24
#if PWM_MODE == NON_INVERTING
	CLR_BIT(TCCR0, 4);
	SET_BIT(TCCR0, 5);

#else
	SET_BIT(TCCR0, 4);
    1ea4:	a3 e5       	ldi	r26, 0x53	; 83
    1ea6:	b0 e0       	ldi	r27, 0x00	; 0
    1ea8:	e3 e5       	ldi	r30, 0x53	; 83
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
    1eae:	80 61       	ori	r24, 0x10	; 16
    1eb0:	8c 93       	st	X, r24
	SET_BIT(TCCR0, 5);
    1eb2:	a3 e5       	ldi	r26, 0x53	; 83
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	e3 e5       	ldi	r30, 0x53	; 83
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	80 62       	ori	r24, 0x20	; 32
    1ebe:	8c 93       	st	X, r24

#endif

#endif

	vSet_Prescaler();
    1ec0:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <vSet_Prescaler>
	TCNT0 = START_TIMER;
    1ec4:	e2 e5       	ldi	r30, 0x52	; 82
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	10 82       	st	Z, r1

}
    1eca:	cf 91       	pop	r28
    1ecc:	df 91       	pop	r29
    1ece:	08 95       	ret

00001ed0 <vTimer0_Check_OVF>:

void vTimer0_Check_OVF(void){
    1ed0:	df 93       	push	r29
    1ed2:	cf 93       	push	r28
    1ed4:	cd b7       	in	r28, 0x3d	; 61
    1ed6:	de b7       	in	r29, 0x3e	; 62
	while((TIFR & 0x01) == 0);
    1ed8:	e8 e5       	ldi	r30, 0x58	; 88
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	80 81       	ld	r24, Z
    1ede:	88 2f       	mov	r24, r24
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	81 70       	andi	r24, 0x01	; 1
    1ee4:	90 70       	andi	r25, 0x00	; 0
    1ee6:	00 97       	sbiw	r24, 0x00	; 0
    1ee8:	b9 f3       	breq	.-18     	; 0x1ed8 <vTimer0_Check_OVF+0x8>
	TCNT0 = START_TIMER;
    1eea:	e2 e5       	ldi	r30, 0x52	; 82
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	10 82       	st	Z, r1
	TIFR = 0x01;
    1ef0:	e8 e5       	ldi	r30, 0x58	; 88
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	80 83       	st	Z, r24
}
    1ef8:	cf 91       	pop	r28
    1efa:	df 91       	pop	r29
    1efc:	08 95       	ret

00001efe <vTimer0_Interrupt_Enable>:

void vTimer0_Interrupt_Enable(void){
    1efe:	df 93       	push	r29
    1f00:	cf 93       	push	r28
    1f02:	cd b7       	in	r28, 0x3d	; 61
    1f04:	de b7       	in	r29, 0x3e	; 62
#if MODE == NORMAL_MODE
	SET_BIT(TIMSK,0);
#elif MODE == CTC
	SET_BIT(TIMSK,1);
#endif
}
    1f06:	cf 91       	pop	r28
    1f08:	df 91       	pop	r29
    1f0a:	08 95       	ret

00001f0c <Timer0_u8SetStart>:

void Timer0_u8SetStart(uint8 start_time){
    1f0c:	df 93       	push	r29
    1f0e:	cf 93       	push	r28
    1f10:	0f 92       	push	r0
    1f12:	cd b7       	in	r28, 0x3d	; 61
    1f14:	de b7       	in	r29, 0x3e	; 62
    1f16:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = start_time;
    1f18:	e2 e5       	ldi	r30, 0x52	; 82
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	89 81       	ldd	r24, Y+1	; 0x01
    1f1e:	80 83       	st	Z, r24
}
    1f20:	0f 90       	pop	r0
    1f22:	cf 91       	pop	r28
    1f24:	df 91       	pop	r29
    1f26:	08 95       	ret

00001f28 <Timer0_vStop>:

void Timer0_vStop(void){
    1f28:	df 93       	push	r29
    1f2a:	cf 93       	push	r28
    1f2c:	cd b7       	in	r28, 0x3d	; 61
    1f2e:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0x00;
    1f30:	e3 e5       	ldi	r30, 0x53	; 83
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	10 82       	st	Z, r1
}
    1f36:	cf 91       	pop	r28
    1f38:	df 91       	pop	r29
    1f3a:	08 95       	ret

00001f3c <Timer0_u8SetComp>:

void Timer0_u8SetComp(uint8 comp_time){
    1f3c:	df 93       	push	r29
    1f3e:	cf 93       	push	r28
    1f40:	0f 92       	push	r0
    1f42:	cd b7       	in	r28, 0x3d	; 61
    1f44:	de b7       	in	r29, 0x3e	; 62
    1f46:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = comp_time;
    1f48:	ec e5       	ldi	r30, 0x5C	; 92
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	89 81       	ldd	r24, Y+1	; 0x01
    1f4e:	80 83       	st	Z, r24
}
    1f50:	0f 90       	pop	r0
    1f52:	cf 91       	pop	r28
    1f54:	df 91       	pop	r29
    1f56:	08 95       	ret

00001f58 <Timer0_vSetPWMDutyCycleFast>:

void Timer0_vSetPWMDutyCycleFast(uint8 duty){
    1f58:	df 93       	push	r29
    1f5a:	cf 93       	push	r28
    1f5c:	0f 92       	push	r0
    1f5e:	cd b7       	in	r28, 0x3d	; 61
    1f60:	de b7       	in	r29, 0x3e	; 62
    1f62:	89 83       	std	Y+1, r24	; 0x01

	if (duty <= 100) {
    1f64:	89 81       	ldd	r24, Y+1	; 0x01
    1f66:	85 36       	cpi	r24, 0x65	; 101
    1f68:	90 f4       	brcc	.+36     	; 0x1f8e <Timer0_vSetPWMDutyCycleFast+0x36>
		#if PWM_MODE == NON_INVERTING
			Timer0_u8SetComp(((duty*256)/100) - 1);

		#else
			Timer0_u8SetComp(((100 - duty)*256)/100 - 1);
    1f6a:	89 81       	ldd	r24, Y+1	; 0x01
    1f6c:	28 2f       	mov	r18, r24
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	84 e6       	ldi	r24, 0x64	; 100
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	82 1b       	sub	r24, r18
    1f76:	93 0b       	sbc	r25, r19
    1f78:	98 2f       	mov	r25, r24
    1f7a:	88 27       	eor	r24, r24
    1f7c:	24 e6       	ldi	r18, 0x64	; 100
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	b9 01       	movw	r22, r18
    1f82:	0e 94 38 24 	call	0x4870	; 0x4870 <__divmodhi4>
    1f86:	cb 01       	movw	r24, r22
    1f88:	81 50       	subi	r24, 0x01	; 1
    1f8a:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <Timer0_u8SetComp>
		#endif
	}
}
    1f8e:	0f 90       	pop	r0
    1f90:	cf 91       	pop	r28
    1f92:	df 91       	pop	r29
    1f94:	08 95       	ret

00001f96 <Timer0_vSetPWMDutyCyclePhaseCorrect>:


void Timer0_vSetPWMDutyCyclePhaseCorrect(uint8 duty){
    1f96:	df 93       	push	r29
    1f98:	cf 93       	push	r28
    1f9a:	0f 92       	push	r0
    1f9c:	cd b7       	in	r28, 0x3d	; 61
    1f9e:	de b7       	in	r29, 0x3e	; 62
    1fa0:	89 83       	std	Y+1, r24	; 0x01
	if (duty <= 100) {
    1fa2:	89 81       	ldd	r24, Y+1	; 0x01
    1fa4:	85 36       	cpi	r24, 0x65	; 101
    1fa6:	e0 f4       	brcc	.+56     	; 0x1fe0 <Timer0_vSetPWMDutyCyclePhaseCorrect+0x4a>
		#if PWM_MODE == NON_INVERTING
			Timer0_u8SetComp(((duty*510)/200) - 1);

		#else
			Timer0_u8SetComp(((100 - duty)*510)/200 - 1);
    1fa8:	89 81       	ldd	r24, Y+1	; 0x01
    1faa:	28 2f       	mov	r18, r24
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	84 e6       	ldi	r24, 0x64	; 100
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	ac 01       	movw	r20, r24
    1fb4:	42 1b       	sub	r20, r18
    1fb6:	53 0b       	sbc	r21, r19
    1fb8:	9a 01       	movw	r18, r20
    1fba:	8e ef       	ldi	r24, 0xFE	; 254
    1fbc:	91 e0       	ldi	r25, 0x01	; 1
    1fbe:	ac 01       	movw	r20, r24
    1fc0:	24 9f       	mul	r18, r20
    1fc2:	c0 01       	movw	r24, r0
    1fc4:	25 9f       	mul	r18, r21
    1fc6:	90 0d       	add	r25, r0
    1fc8:	34 9f       	mul	r19, r20
    1fca:	90 0d       	add	r25, r0
    1fcc:	11 24       	eor	r1, r1
    1fce:	28 ec       	ldi	r18, 0xC8	; 200
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	b9 01       	movw	r22, r18
    1fd4:	0e 94 38 24 	call	0x4870	; 0x4870 <__divmodhi4>
    1fd8:	cb 01       	movw	r24, r22
    1fda:	81 50       	subi	r24, 0x01	; 1
    1fdc:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <Timer0_u8SetComp>
		#endif
	}
}
    1fe0:	0f 90       	pop	r0
    1fe2:	cf 91       	pop	r28
    1fe4:	df 91       	pop	r29
    1fe6:	08 95       	ret

00001fe8 <vSet_Prescaler>:




static void vSet_Prescaler(void){
    1fe8:	df 93       	push	r29
    1fea:	cf 93       	push	r28
    1fec:	cd b7       	in	r28, 0x3d	; 61
    1fee:	de b7       	in	r29, 0x3e	; 62
#elif		PRESCALER == PRESCALER_256
	CLR_BIT(TCCR0,0);
	CLR_BIT(TCCR0,1);
	SET_BIT(TCCR0,2);
#elif		PRESCALER == PRESCALER_1024
	SET_BIT(TCCR0,0);
    1ff0:	a3 e5       	ldi	r26, 0x53	; 83
    1ff2:	b0 e0       	ldi	r27, 0x00	; 0
    1ff4:	e3 e5       	ldi	r30, 0x53	; 83
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	80 81       	ld	r24, Z
    1ffa:	81 60       	ori	r24, 0x01	; 1
    1ffc:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,1);
    1ffe:	a3 e5       	ldi	r26, 0x53	; 83
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	e3 e5       	ldi	r30, 0x53	; 83
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	8d 7f       	andi	r24, 0xFD	; 253
    200a:	8c 93       	st	X, r24
	SET_BIT(TCCR0,2);
    200c:	a3 e5       	ldi	r26, 0x53	; 83
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	e3 e5       	ldi	r30, 0x53	; 83
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	80 81       	ld	r24, Z
    2016:	84 60       	ori	r24, 0x04	; 4
    2018:	8c 93       	st	X, r24
#endif
}
    201a:	cf 91       	pop	r28
    201c:	df 91       	pop	r29
    201e:	08 95       	ret

00002020 <Timer0_pfSetCallback>:

void Timer0_pfSetCallback(void (*p2fvar)(void)){
    2020:	df 93       	push	r29
    2022:	cf 93       	push	r28
    2024:	00 d0       	rcall	.+0      	; 0x2026 <Timer0_pfSetCallback+0x6>
    2026:	cd b7       	in	r28, 0x3d	; 61
    2028:	de b7       	in	r29, 0x3e	; 62
    202a:	9a 83       	std	Y+2, r25	; 0x02
    202c:	89 83       	std	Y+1, r24	; 0x01
	p2f = p2fvar;
    202e:	89 81       	ldd	r24, Y+1	; 0x01
    2030:	9a 81       	ldd	r25, Y+2	; 0x02
    2032:	90 93 1d 03 	sts	0x031D, r25
    2036:	80 93 1c 03 	sts	0x031C, r24
}
    203a:	0f 90       	pop	r0
    203c:	0f 90       	pop	r0
    203e:	cf 91       	pop	r28
    2040:	df 91       	pop	r29
    2042:	08 95       	ret

00002044 <__vector_11>:

ISR(TIMER0_OVF_vect){
    2044:	1f 92       	push	r1
    2046:	0f 92       	push	r0
    2048:	0f b6       	in	r0, 0x3f	; 63
    204a:	0f 92       	push	r0
    204c:	11 24       	eor	r1, r1
    204e:	2f 93       	push	r18
    2050:	3f 93       	push	r19
    2052:	4f 93       	push	r20
    2054:	5f 93       	push	r21
    2056:	6f 93       	push	r22
    2058:	7f 93       	push	r23
    205a:	8f 93       	push	r24
    205c:	9f 93       	push	r25
    205e:	af 93       	push	r26
    2060:	bf 93       	push	r27
    2062:	ef 93       	push	r30
    2064:	ff 93       	push	r31
    2066:	df 93       	push	r29
    2068:	cf 93       	push	r28
    206a:	cd b7       	in	r28, 0x3d	; 61
    206c:	de b7       	in	r29, 0x3e	; 62
	if(p2f != NULL){
    206e:	80 91 1c 03 	lds	r24, 0x031C
    2072:	90 91 1d 03 	lds	r25, 0x031D
    2076:	00 97       	sbiw	r24, 0x00	; 0
    2078:	29 f0       	breq	.+10     	; 0x2084 <__vector_11+0x40>
		p2f();
    207a:	e0 91 1c 03 	lds	r30, 0x031C
    207e:	f0 91 1d 03 	lds	r31, 0x031D
    2082:	09 95       	icall
	}
}
    2084:	cf 91       	pop	r28
    2086:	df 91       	pop	r29
    2088:	ff 91       	pop	r31
    208a:	ef 91       	pop	r30
    208c:	bf 91       	pop	r27
    208e:	af 91       	pop	r26
    2090:	9f 91       	pop	r25
    2092:	8f 91       	pop	r24
    2094:	7f 91       	pop	r23
    2096:	6f 91       	pop	r22
    2098:	5f 91       	pop	r21
    209a:	4f 91       	pop	r20
    209c:	3f 91       	pop	r19
    209e:	2f 91       	pop	r18
    20a0:	0f 90       	pop	r0
    20a2:	0f be       	out	0x3f, r0	; 63
    20a4:	0f 90       	pop	r0
    20a6:	1f 90       	pop	r1
    20a8:	18 95       	reti

000020aa <__vector_10>:

ISR(TIMER0_COMP_vect){
    20aa:	1f 92       	push	r1
    20ac:	0f 92       	push	r0
    20ae:	0f b6       	in	r0, 0x3f	; 63
    20b0:	0f 92       	push	r0
    20b2:	11 24       	eor	r1, r1
    20b4:	2f 93       	push	r18
    20b6:	3f 93       	push	r19
    20b8:	4f 93       	push	r20
    20ba:	5f 93       	push	r21
    20bc:	6f 93       	push	r22
    20be:	7f 93       	push	r23
    20c0:	8f 93       	push	r24
    20c2:	9f 93       	push	r25
    20c4:	af 93       	push	r26
    20c6:	bf 93       	push	r27
    20c8:	ef 93       	push	r30
    20ca:	ff 93       	push	r31
    20cc:	df 93       	push	r29
    20ce:	cf 93       	push	r28
    20d0:	cd b7       	in	r28, 0x3d	; 61
    20d2:	de b7       	in	r29, 0x3e	; 62
	if(p2f != NULL){
    20d4:	80 91 1c 03 	lds	r24, 0x031C
    20d8:	90 91 1d 03 	lds	r25, 0x031D
    20dc:	00 97       	sbiw	r24, 0x00	; 0
    20de:	29 f0       	breq	.+10     	; 0x20ea <__vector_10+0x40>
		p2f();
    20e0:	e0 91 1c 03 	lds	r30, 0x031C
    20e4:	f0 91 1d 03 	lds	r31, 0x031D
    20e8:	09 95       	icall
	}
}
    20ea:	cf 91       	pop	r28
    20ec:	df 91       	pop	r29
    20ee:	ff 91       	pop	r31
    20f0:	ef 91       	pop	r30
    20f2:	bf 91       	pop	r27
    20f4:	af 91       	pop	r26
    20f6:	9f 91       	pop	r25
    20f8:	8f 91       	pop	r24
    20fa:	7f 91       	pop	r23
    20fc:	6f 91       	pop	r22
    20fe:	5f 91       	pop	r21
    2100:	4f 91       	pop	r20
    2102:	3f 91       	pop	r19
    2104:	2f 91       	pop	r18
    2106:	0f 90       	pop	r0
    2108:	0f be       	out	0x3f, r0	; 63
    210a:	0f 90       	pop	r0
    210c:	1f 90       	pop	r1
    210e:	18 95       	reti

00002110 <Timer1_vInit>:
#include "../UTILS/MACROS.h"
#include "timer1.h"
#include "timer1_config.h"
#include "timer1_priv.h"

void Timer1_vInit(void){
    2110:	df 93       	push	r29
    2112:	cf 93       	push	r28
    2114:	cd b7       	in	r28, 0x3d	; 61
    2116:	de b7       	in	r29, 0x3e	; 62
#if MODE == FAST_PWM_14
	CLR_BIT(TCCR1A,0);
    2118:	af e4       	ldi	r26, 0x4F	; 79
    211a:	b0 e0       	ldi	r27, 0x00	; 0
    211c:	ef e4       	ldi	r30, 0x4F	; 79
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	8e 7f       	andi	r24, 0xFE	; 254
    2124:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,1);
    2126:	af e4       	ldi	r26, 0x4F	; 79
    2128:	b0 e0       	ldi	r27, 0x00	; 0
    212a:	ef e4       	ldi	r30, 0x4F	; 79
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	80 81       	ld	r24, Z
    2130:	82 60       	ori	r24, 0x02	; 2
    2132:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,3);
    2134:	ae e4       	ldi	r26, 0x4E	; 78
    2136:	b0 e0       	ldi	r27, 0x00	; 0
    2138:	ee e4       	ldi	r30, 0x4E	; 78
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	80 81       	ld	r24, Z
    213e:	88 60       	ori	r24, 0x08	; 8
    2140:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,4);
    2142:	ae e4       	ldi	r26, 0x4E	; 78
    2144:	b0 e0       	ldi	r27, 0x00	; 0
    2146:	ee e4       	ldi	r30, 0x4E	; 78
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	80 81       	ld	r24, Z
    214c:	80 61       	ori	r24, 0x10	; 16
    214e:	8c 93       	st	X, r24
#if PWM_MODE == NON_INVERTING
	SET_BIT(TCCR1A,7);
    2150:	af e4       	ldi	r26, 0x4F	; 79
    2152:	b0 e0       	ldi	r27, 0x00	; 0
    2154:	ef e4       	ldi	r30, 0x4F	; 79
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	80 81       	ld	r24, Z
    215a:	80 68       	ori	r24, 0x80	; 128
    215c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,6);
    215e:	af e4       	ldi	r26, 0x4F	; 79
    2160:	b0 e0       	ldi	r27, 0x00	; 0
    2162:	ef e4       	ldi	r30, 0x4F	; 79
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	80 81       	ld	r24, Z
    2168:	8f 7b       	andi	r24, 0xBF	; 191
    216a:	8c 93       	st	X, r24

//	TCNT1 = START_TIMER;
////	ICR1 = 374;
////	OCR1A = 499;
//	vSet_Prescaler();
}
    216c:	cf 91       	pop	r28
    216e:	df 91       	pop	r29
    2170:	08 95       	ret

00002172 <Timer1_vStart>:

void Timer1_vStart(uint16 start_time){
    2172:	df 93       	push	r29
    2174:	cf 93       	push	r28
    2176:	00 d0       	rcall	.+0      	; 0x2178 <Timer1_vStart+0x6>
    2178:	cd b7       	in	r28, 0x3d	; 61
    217a:	de b7       	in	r29, 0x3e	; 62
    217c:	9a 83       	std	Y+2, r25	; 0x02
    217e:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = start_time;
    2180:	ec e4       	ldi	r30, 0x4C	; 76
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	89 81       	ldd	r24, Y+1	; 0x01
    2186:	9a 81       	ldd	r25, Y+2	; 0x02
    2188:	91 83       	std	Z+1, r25	; 0x01
    218a:	80 83       	st	Z, r24
	vSet_Prescaler();
    218c:	0e 94 40 11 	call	0x2280	; 0x2280 <vSet_Prescaler>
}
    2190:	0f 90       	pop	r0
    2192:	0f 90       	pop	r0
    2194:	cf 91       	pop	r28
    2196:	df 91       	pop	r29
    2198:	08 95       	ret

0000219a <Timer1_vStop>:

void Timer1_vStop(void){
    219a:	df 93       	push	r29
    219c:	cf 93       	push	r28
    219e:	cd b7       	in	r28, 0x3d	; 61
    21a0:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    21a2:	ef e4       	ldi	r30, 0x4F	; 79
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	10 82       	st	Z, r1
	TCCR1B = 0;
    21a8:	ee e4       	ldi	r30, 0x4E	; 78
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	10 82       	st	Z, r1
}
    21ae:	cf 91       	pop	r28
    21b0:	df 91       	pop	r29
    21b2:	08 95       	ret

000021b4 <Timer1_vSetCompA>:


void Timer1_vSetCompA(uint16 comp_time){
    21b4:	df 93       	push	r29
    21b6:	cf 93       	push	r28
    21b8:	00 d0       	rcall	.+0      	; 0x21ba <Timer1_vSetCompA+0x6>
    21ba:	cd b7       	in	r28, 0x3d	; 61
    21bc:	de b7       	in	r29, 0x3e	; 62
    21be:	9a 83       	std	Y+2, r25	; 0x02
    21c0:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = comp_time;
    21c2:	ea e4       	ldi	r30, 0x4A	; 74
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	89 81       	ldd	r24, Y+1	; 0x01
    21c8:	9a 81       	ldd	r25, Y+2	; 0x02
    21ca:	91 83       	std	Z+1, r25	; 0x01
    21cc:	80 83       	st	Z, r24
}
    21ce:	0f 90       	pop	r0
    21d0:	0f 90       	pop	r0
    21d2:	cf 91       	pop	r28
    21d4:	df 91       	pop	r29
    21d6:	08 95       	ret

000021d8 <Timer1_vSetCompB>:

void Timer1_vSetCompB(uint16 comp_time){
    21d8:	df 93       	push	r29
    21da:	cf 93       	push	r28
    21dc:	00 d0       	rcall	.+0      	; 0x21de <Timer1_vSetCompB+0x6>
    21de:	cd b7       	in	r28, 0x3d	; 61
    21e0:	de b7       	in	r29, 0x3e	; 62
    21e2:	9a 83       	std	Y+2, r25	; 0x02
    21e4:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = comp_time;
    21e6:	e8 e4       	ldi	r30, 0x48	; 72
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	89 81       	ldd	r24, Y+1	; 0x01
    21ec:	9a 81       	ldd	r25, Y+2	; 0x02
    21ee:	91 83       	std	Z+1, r25	; 0x01
    21f0:	80 83       	st	Z, r24
}
    21f2:	0f 90       	pop	r0
    21f4:	0f 90       	pop	r0
    21f6:	cf 91       	pop	r28
    21f8:	df 91       	pop	r29
    21fa:	08 95       	ret

000021fc <Timer1_SetPWMFast>:


void Timer1_SetPWMFast(uint8 duty, uint8 frequency){
    21fc:	df 93       	push	r29
    21fe:	cf 93       	push	r28
    2200:	00 d0       	rcall	.+0      	; 0x2202 <Timer1_SetPWMFast+0x6>
    2202:	00 d0       	rcall	.+0      	; 0x2204 <Timer1_SetPWMFast+0x8>
    2204:	cd b7       	in	r28, 0x3d	; 61
    2206:	de b7       	in	r29, 0x3e	; 62
    2208:	8b 83       	std	Y+3, r24	; 0x03
    220a:	6c 83       	std	Y+4, r22	; 0x04
#if MODE == FAST_PWM_14
#if PRESCALER == PRESCALER_64
	uint16 icr1_val = (1000000/frequency)/4 - 1;
    220c:	8c 81       	ldd	r24, Y+4	; 0x04
    220e:	28 2f       	mov	r18, r24
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	40 e0       	ldi	r20, 0x00	; 0
    2214:	50 e0       	ldi	r21, 0x00	; 0
    2216:	80 e9       	ldi	r24, 0x90	; 144
    2218:	90 ed       	ldi	r25, 0xD0	; 208
    221a:	a3 e0       	ldi	r26, 0x03	; 3
    221c:	b0 e0       	ldi	r27, 0x00	; 0
    221e:	bc 01       	movw	r22, r24
    2220:	cd 01       	movw	r24, r26
    2222:	0e 94 6d 24 	call	0x48da	; 0x48da <__divmodsi4>
    2226:	da 01       	movw	r26, r20
    2228:	c9 01       	movw	r24, r18
    222a:	01 97       	sbiw	r24, 0x01	; 1
    222c:	9a 83       	std	Y+2, r25	; 0x02
    222e:	89 83       	std	Y+1, r24	; 0x01
#elif PRESCALER == PRESCALER_1024
	uint16 icr1_val = (1000000/frequency)/64 - 1;
#endif

#if PWM_MODE == NON_INVERTING
	ICR1 = icr1_val;
    2230:	e6 e4       	ldi	r30, 0x46	; 70
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	89 81       	ldd	r24, Y+1	; 0x01
    2236:	9a 81       	ldd	r25, Y+2	; 0x02
    2238:	91 83       	std	Z+1, r25	; 0x01
    223a:	80 83       	st	Z, r24
	OCR1A = ((icr1_val+1)*duty)/100 - 1;
    223c:	ea e4       	ldi	r30, 0x4A	; 74
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	89 81       	ldd	r24, Y+1	; 0x01
    2242:	9a 81       	ldd	r25, Y+2	; 0x02
    2244:	9c 01       	movw	r18, r24
    2246:	2f 5f       	subi	r18, 0xFF	; 255
    2248:	3f 4f       	sbci	r19, 0xFF	; 255
    224a:	8b 81       	ldd	r24, Y+3	; 0x03
    224c:	88 2f       	mov	r24, r24
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	ac 01       	movw	r20, r24
    2252:	24 9f       	mul	r18, r20
    2254:	c0 01       	movw	r24, r0
    2256:	25 9f       	mul	r18, r21
    2258:	90 0d       	add	r25, r0
    225a:	34 9f       	mul	r19, r20
    225c:	90 0d       	add	r25, r0
    225e:	11 24       	eor	r1, r1
    2260:	24 e6       	ldi	r18, 0x64	; 100
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	b9 01       	movw	r22, r18
    2266:	0e 94 24 24 	call	0x4848	; 0x4848 <__udivmodhi4>
    226a:	cb 01       	movw	r24, r22
    226c:	01 97       	sbiw	r24, 0x01	; 1
    226e:	91 83       	std	Z+1, r25	; 0x01
    2270:	80 83       	st	Z, r24
	OCR1A = ocr1a_val;
	OCR1B =(ocr1a_val + 1) - ((ocr1a_val+1)*(duty))/100 - 1;
#endif

#endif
}
    2272:	0f 90       	pop	r0
    2274:	0f 90       	pop	r0
    2276:	0f 90       	pop	r0
    2278:	0f 90       	pop	r0
    227a:	cf 91       	pop	r28
    227c:	df 91       	pop	r29
    227e:	08 95       	ret

00002280 <vSet_Prescaler>:

static void vSet_Prescaler(void){
    2280:	df 93       	push	r29
    2282:	cf 93       	push	r28
    2284:	cd b7       	in	r28, 0x3d	; 61
    2286:	de b7       	in	r29, 0x3e	; 62
#elif 		PRESCALER == PRESCALER_8
	CLR_BIT(TCCR1B,0);
	SET_BIT(TCCR1B,1);
	CLR_BIT(TCCR1B,2);
#elif		PRESCALER == PRESCALER_64
	SET_BIT(TCCR1B,0);
    2288:	ae e4       	ldi	r26, 0x4E	; 78
    228a:	b0 e0       	ldi	r27, 0x00	; 0
    228c:	ee e4       	ldi	r30, 0x4E	; 78
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	80 81       	ld	r24, Z
    2292:	81 60       	ori	r24, 0x01	; 1
    2294:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,1);
    2296:	ae e4       	ldi	r26, 0x4E	; 78
    2298:	b0 e0       	ldi	r27, 0x00	; 0
    229a:	ee e4       	ldi	r30, 0x4E	; 78
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	80 81       	ld	r24, Z
    22a0:	82 60       	ori	r24, 0x02	; 2
    22a2:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,2);
    22a4:	ae e4       	ldi	r26, 0x4E	; 78
    22a6:	b0 e0       	ldi	r27, 0x00	; 0
    22a8:	ee e4       	ldi	r30, 0x4E	; 78
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	80 81       	ld	r24, Z
    22ae:	8b 7f       	andi	r24, 0xFB	; 251
    22b0:	8c 93       	st	X, r24
#elif		PRESCALER == PRESCALER_1024
	SET_BIT(TCCR1B,0);
	CLR_BIT(TCCR1B,1);
	SET_BIT(TCCR1B,2);
#endif
}
    22b2:	cf 91       	pop	r28
    22b4:	df 91       	pop	r29
    22b6:	08 95       	ret

000022b8 <DC_vInit>:
#include "DC.h"
#include "../MCAL/dio.h"
#include "../MCAL/timer0.h"


void DC_vInit(void){
    22b8:	df 93       	push	r29
    22ba:	cf 93       	push	r28
    22bc:	cd b7       	in	r28, 0x3d	; 61
    22be:	de b7       	in	r29, 0x3e	; 62
	vTimer0_init();
    22c0:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <vTimer0_init>
}
    22c4:	cf 91       	pop	r28
    22c6:	df 91       	pop	r29
    22c8:	08 95       	ret

000022ca <DC_vOn>:


void DC_vOn(uint8 direction){
    22ca:	df 93       	push	r29
    22cc:	cf 93       	push	r28
    22ce:	0f 92       	push	r0
    22d0:	cd b7       	in	r28, 0x3d	; 61
    22d2:	de b7       	in	r29, 0x3e	; 62
    22d4:	89 83       	std	Y+1, r24	; 0x01
	DIO_WriteChannel(ENABLE_PIN, HIGH);
    22d6:	8e e0       	ldi	r24, 0x0E	; 14
    22d8:	61 e0       	ldi	r22, 0x01	; 1
    22da:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_WriteChannel>

	if (direction == DC_CLOCK_WISE){
    22de:	89 81       	ldd	r24, Y+1	; 0x01
    22e0:	81 30       	cpi	r24, 0x01	; 1
    22e2:	29 f4       	brne	.+10     	; 0x22ee <DC_vOn+0x24>
		DIO_WriteChannel(DIR_PIN, HIGH);
    22e4:	8d e0       	ldi	r24, 0x0D	; 13
    22e6:	61 e0       	ldi	r22, 0x01	; 1
    22e8:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_WriteChannel>
    22ec:	07 c0       	rjmp	.+14     	; 0x22fc <DC_vOn+0x32>
	}
	else if (direction == DC_COUNTER_CLOCK_WISE){
    22ee:	89 81       	ldd	r24, Y+1	; 0x01
    22f0:	82 30       	cpi	r24, 0x02	; 2
    22f2:	21 f4       	brne	.+8      	; 0x22fc <DC_vOn+0x32>
		DIO_WriteChannel(DIR_PIN, LOW);
    22f4:	8d e0       	ldi	r24, 0x0D	; 13
    22f6:	60 e0       	ldi	r22, 0x00	; 0
    22f8:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_WriteChannel>
	}

}
    22fc:	0f 90       	pop	r0
    22fe:	cf 91       	pop	r28
    2300:	df 91       	pop	r29
    2302:	08 95       	ret

00002304 <DC_vControlSpeed>:

void DC_vControlSpeed(uint8 speed){
    2304:	df 93       	push	r29
    2306:	cf 93       	push	r28
    2308:	0f 92       	push	r0
    230a:	cd b7       	in	r28, 0x3d	; 61
    230c:	de b7       	in	r29, 0x3e	; 62
    230e:	89 83       	std	Y+1, r24	; 0x01
		Timer0_vSetPWMDutyCycleFast(speed);
    2310:	89 81       	ldd	r24, Y+1	; 0x01
    2312:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <Timer0_vSetPWMDutyCycleFast>

}
    2316:	0f 90       	pop	r0
    2318:	cf 91       	pop	r28
    231a:	df 91       	pop	r29
    231c:	08 95       	ret

0000231e <DC_vOff>:

void DC_vOff(void){
    231e:	df 93       	push	r29
    2320:	cf 93       	push	r28
    2322:	cd b7       	in	r28, 0x3d	; 61
    2324:	de b7       	in	r29, 0x3e	; 62
	DIO_WriteChannel(ENABLE_PIN, LOW);
    2326:	8e e0       	ldi	r24, 0x0E	; 14
    2328:	60 e0       	ldi	r22, 0x00	; 0
    232a:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_WriteChannel>
}
    232e:	cf 91       	pop	r28
    2330:	df 91       	pop	r29
    2332:	08 95       	ret

00002334 <EEPROM_vInit>:
#include "EEPROM.h"
#include "../MCAL/I2C.h"
#include "../UTILS/STD_TYPES.h"
#include <util/delay.h>

void EEPROM_vInit(void){
    2334:	df 93       	push	r29
    2336:	cf 93       	push	r28
    2338:	cd b7       	in	r28, 0x3d	; 61
    233a:	de b7       	in	r29, 0x3e	; 62
	I2C_vInitMaster(0x01);
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	0e 94 49 08 	call	0x1092	; 0x1092 <I2C_vInitMaster>
}
    2342:	cf 91       	pop	r28
    2344:	df 91       	pop	r29
    2346:	08 95       	ret

00002348 <EEPROM_vWriteByte>:

void EEPROM_vWriteByte(uint16 address, uint8 data){
    2348:	df 93       	push	r29
    234a:	cf 93       	push	r28
    234c:	cd b7       	in	r28, 0x3d	; 61
    234e:	de b7       	in	r29, 0x3e	; 62
    2350:	61 97       	sbiw	r28, 0x11	; 17
    2352:	0f b6       	in	r0, 0x3f	; 63
    2354:	f8 94       	cli
    2356:	de bf       	out	0x3e, r29	; 62
    2358:	0f be       	out	0x3f, r0	; 63
    235a:	cd bf       	out	0x3d, r28	; 61
    235c:	98 8b       	std	Y+16, r25	; 0x10
    235e:	8f 87       	std	Y+15, r24	; 0x0f
    2360:	69 8b       	std	Y+17, r22	; 0x11
	I2C_vSendStartCondition();
    2362:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <I2C_vSendStartCondition>
	I2C_vSendSlaveAddresswithWrite(EEPROM_ADDRESS | (address>>8));
    2366:	8f 85       	ldd	r24, Y+15	; 0x0f
    2368:	98 89       	ldd	r25, Y+16	; 0x10
    236a:	89 2f       	mov	r24, r25
    236c:	99 27       	eor	r25, r25
    236e:	80 65       	ori	r24, 0x50	; 80
    2370:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <I2C_vSendSlaveAddresswithWrite>
	I2C_vSendDataMaster((uint8)address);
    2374:	8f 85       	ldd	r24, Y+15	; 0x0f
    2376:	0e 94 44 09 	call	0x1288	; 0x1288 <I2C_vSendDataMaster>
	I2C_vSendDataMaster(data);
    237a:	89 89       	ldd	r24, Y+17	; 0x11
    237c:	0e 94 44 09 	call	0x1288	; 0x1288 <I2C_vSendDataMaster>
	I2C_vSendStopCondition();
    2380:	0e 94 c3 08 	call	0x1186	; 0x1186 <I2C_vSendStopCondition>
    2384:	80 e0       	ldi	r24, 0x00	; 0
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	a0 ea       	ldi	r26, 0xA0	; 160
    238a:	b0 e4       	ldi	r27, 0x40	; 64
    238c:	8b 87       	std	Y+11, r24	; 0x0b
    238e:	9c 87       	std	Y+12, r25	; 0x0c
    2390:	ad 87       	std	Y+13, r26	; 0x0d
    2392:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2394:	6b 85       	ldd	r22, Y+11	; 0x0b
    2396:	7c 85       	ldd	r23, Y+12	; 0x0c
    2398:	8d 85       	ldd	r24, Y+13	; 0x0d
    239a:	9e 85       	ldd	r25, Y+14	; 0x0e
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	4a e7       	ldi	r20, 0x7A	; 122
    23a2:	55 e4       	ldi	r21, 0x45	; 69
    23a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	8f 83       	std	Y+7, r24	; 0x07
    23ae:	98 87       	std	Y+8, r25	; 0x08
    23b0:	a9 87       	std	Y+9, r26	; 0x09
    23b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23b4:	6f 81       	ldd	r22, Y+7	; 0x07
    23b6:	78 85       	ldd	r23, Y+8	; 0x08
    23b8:	89 85       	ldd	r24, Y+9	; 0x09
    23ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	40 e8       	ldi	r20, 0x80	; 128
    23c2:	5f e3       	ldi	r21, 0x3F	; 63
    23c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23c8:	88 23       	and	r24, r24
    23ca:	2c f4       	brge	.+10     	; 0x23d6 <EEPROM_vWriteByte+0x8e>
		__ticks = 1;
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	9e 83       	std	Y+6, r25	; 0x06
    23d2:	8d 83       	std	Y+5, r24	; 0x05
    23d4:	3f c0       	rjmp	.+126    	; 0x2454 <EEPROM_vWriteByte+0x10c>
	else if (__tmp > 65535)
    23d6:	6f 81       	ldd	r22, Y+7	; 0x07
    23d8:	78 85       	ldd	r23, Y+8	; 0x08
    23da:	89 85       	ldd	r24, Y+9	; 0x09
    23dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	3f ef       	ldi	r19, 0xFF	; 255
    23e2:	4f e7       	ldi	r20, 0x7F	; 127
    23e4:	57 e4       	ldi	r21, 0x47	; 71
    23e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23ea:	18 16       	cp	r1, r24
    23ec:	4c f5       	brge	.+82     	; 0x2440 <EEPROM_vWriteByte+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    23f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    23f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    23f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	40 e2       	ldi	r20, 0x20	; 32
    23fc:	51 e4       	ldi	r21, 0x41	; 65
    23fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	bc 01       	movw	r22, r24
    2408:	cd 01       	movw	r24, r26
    240a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	9e 83       	std	Y+6, r25	; 0x06
    2414:	8d 83       	std	Y+5, r24	; 0x05
    2416:	0f c0       	rjmp	.+30     	; 0x2436 <EEPROM_vWriteByte+0xee>
    2418:	80 e9       	ldi	r24, 0x90	; 144
    241a:	91 e0       	ldi	r25, 0x01	; 1
    241c:	9c 83       	std	Y+4, r25	; 0x04
    241e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2420:	8b 81       	ldd	r24, Y+3	; 0x03
    2422:	9c 81       	ldd	r25, Y+4	; 0x04
    2424:	01 97       	sbiw	r24, 0x01	; 1
    2426:	f1 f7       	brne	.-4      	; 0x2424 <EEPROM_vWriteByte+0xdc>
    2428:	9c 83       	std	Y+4, r25	; 0x04
    242a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    242c:	8d 81       	ldd	r24, Y+5	; 0x05
    242e:	9e 81       	ldd	r25, Y+6	; 0x06
    2430:	01 97       	sbiw	r24, 0x01	; 1
    2432:	9e 83       	std	Y+6, r25	; 0x06
    2434:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2436:	8d 81       	ldd	r24, Y+5	; 0x05
    2438:	9e 81       	ldd	r25, Y+6	; 0x06
    243a:	00 97       	sbiw	r24, 0x00	; 0
    243c:	69 f7       	brne	.-38     	; 0x2418 <EEPROM_vWriteByte+0xd0>
    243e:	14 c0       	rjmp	.+40     	; 0x2468 <EEPROM_vWriteByte+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2440:	6f 81       	ldd	r22, Y+7	; 0x07
    2442:	78 85       	ldd	r23, Y+8	; 0x08
    2444:	89 85       	ldd	r24, Y+9	; 0x09
    2446:	9a 85       	ldd	r25, Y+10	; 0x0a
    2448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	9e 83       	std	Y+6, r25	; 0x06
    2452:	8d 83       	std	Y+5, r24	; 0x05
    2454:	8d 81       	ldd	r24, Y+5	; 0x05
    2456:	9e 81       	ldd	r25, Y+6	; 0x06
    2458:	9a 83       	std	Y+2, r25	; 0x02
    245a:	89 83       	std	Y+1, r24	; 0x01
    245c:	89 81       	ldd	r24, Y+1	; 0x01
    245e:	9a 81       	ldd	r25, Y+2	; 0x02
    2460:	01 97       	sbiw	r24, 0x01	; 1
    2462:	f1 f7       	brne	.-4      	; 0x2460 <EEPROM_vWriteByte+0x118>
    2464:	9a 83       	std	Y+2, r25	; 0x02
    2466:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(5);
}
    2468:	61 96       	adiw	r28, 0x11	; 17
    246a:	0f b6       	in	r0, 0x3f	; 63
    246c:	f8 94       	cli
    246e:	de bf       	out	0x3e, r29	; 62
    2470:	0f be       	out	0x3f, r0	; 63
    2472:	cd bf       	out	0x3d, r28	; 61
    2474:	cf 91       	pop	r28
    2476:	df 91       	pop	r29
    2478:	08 95       	ret

0000247a <EEPROM_u8ReadByte>:

uint8 EEPROM_u8ReadByte(uint16 address){
    247a:	df 93       	push	r29
    247c:	cf 93       	push	r28
    247e:	cd b7       	in	r28, 0x3d	; 61
    2480:	de b7       	in	r29, 0x3e	; 62
    2482:	61 97       	sbiw	r28, 0x11	; 17
    2484:	0f b6       	in	r0, 0x3f	; 63
    2486:	f8 94       	cli
    2488:	de bf       	out	0x3e, r29	; 62
    248a:	0f be       	out	0x3f, r0	; 63
    248c:	cd bf       	out	0x3d, r28	; 61
    248e:	99 8b       	std	Y+17, r25	; 0x11
    2490:	88 8b       	std	Y+16, r24	; 0x10
	uint8 data;
	I2C_vSendStartCondition();
    2492:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <I2C_vSendStartCondition>
	I2C_vSendSlaveAddresswithWrite(EEPROM_ADDRESS | (address>>8));
    2496:	88 89       	ldd	r24, Y+16	; 0x10
    2498:	99 89       	ldd	r25, Y+17	; 0x11
    249a:	89 2f       	mov	r24, r25
    249c:	99 27       	eor	r25, r25
    249e:	80 65       	ori	r24, 0x50	; 80
    24a0:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <I2C_vSendSlaveAddresswithWrite>
	I2C_vSendDataMaster((uint8)address);
    24a4:	88 89       	ldd	r24, Y+16	; 0x10
    24a6:	0e 94 44 09 	call	0x1288	; 0x1288 <I2C_vSendDataMaster>

	I2C_vSendRepeatedStartCondition();
    24aa:	0e 94 9f 08 	call	0x113e	; 0x113e <I2C_vSendRepeatedStartCondition>
	I2C_vSendSlaveAddresswithRead(EEPROM_ADDRESS | (address>>8));
    24ae:	88 89       	ldd	r24, Y+16	; 0x10
    24b0:	99 89       	ldd	r25, Y+17	; 0x11
    24b2:	89 2f       	mov	r24, r25
    24b4:	99 27       	eor	r25, r25
    24b6:	80 65       	ori	r24, 0x50	; 80
    24b8:	0e 94 0e 09 	call	0x121c	; 0x121c <I2C_vSendSlaveAddresswithRead>
	I2C_vReadDataMaster(&data);
    24bc:	ce 01       	movw	r24, r28
    24be:	0f 96       	adiw	r24, 0x0f	; 15
    24c0:	0e 94 68 09 	call	0x12d0	; 0x12d0 <I2C_vReadDataMaster>

	I2C_vSendStopCondition();
    24c4:	0e 94 c3 08 	call	0x1186	; 0x1186 <I2C_vSendStopCondition>
    24c8:	80 e0       	ldi	r24, 0x00	; 0
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	a0 ea       	ldi	r26, 0xA0	; 160
    24ce:	b0 e4       	ldi	r27, 0x40	; 64
    24d0:	8b 87       	std	Y+11, r24	; 0x0b
    24d2:	9c 87       	std	Y+12, r25	; 0x0c
    24d4:	ad 87       	std	Y+13, r26	; 0x0d
    24d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24da:	7c 85       	ldd	r23, Y+12	; 0x0c
    24dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    24de:	9e 85       	ldd	r25, Y+14	; 0x0e
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	4a e7       	ldi	r20, 0x7A	; 122
    24e6:	55 e4       	ldi	r21, 0x45	; 69
    24e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ec:	dc 01       	movw	r26, r24
    24ee:	cb 01       	movw	r24, r22
    24f0:	8f 83       	std	Y+7, r24	; 0x07
    24f2:	98 87       	std	Y+8, r25	; 0x08
    24f4:	a9 87       	std	Y+9, r26	; 0x09
    24f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24f8:	6f 81       	ldd	r22, Y+7	; 0x07
    24fa:	78 85       	ldd	r23, Y+8	; 0x08
    24fc:	89 85       	ldd	r24, Y+9	; 0x09
    24fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	40 e8       	ldi	r20, 0x80	; 128
    2506:	5f e3       	ldi	r21, 0x3F	; 63
    2508:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    250c:	88 23       	and	r24, r24
    250e:	2c f4       	brge	.+10     	; 0x251a <EEPROM_u8ReadByte+0xa0>
		__ticks = 1;
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	9e 83       	std	Y+6, r25	; 0x06
    2516:	8d 83       	std	Y+5, r24	; 0x05
    2518:	3f c0       	rjmp	.+126    	; 0x2598 <EEPROM_u8ReadByte+0x11e>
	else if (__tmp > 65535)
    251a:	6f 81       	ldd	r22, Y+7	; 0x07
    251c:	78 85       	ldd	r23, Y+8	; 0x08
    251e:	89 85       	ldd	r24, Y+9	; 0x09
    2520:	9a 85       	ldd	r25, Y+10	; 0x0a
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	3f ef       	ldi	r19, 0xFF	; 255
    2526:	4f e7       	ldi	r20, 0x7F	; 127
    2528:	57 e4       	ldi	r21, 0x47	; 71
    252a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    252e:	18 16       	cp	r1, r24
    2530:	4c f5       	brge	.+82     	; 0x2584 <EEPROM_u8ReadByte+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2532:	6b 85       	ldd	r22, Y+11	; 0x0b
    2534:	7c 85       	ldd	r23, Y+12	; 0x0c
    2536:	8d 85       	ldd	r24, Y+13	; 0x0d
    2538:	9e 85       	ldd	r25, Y+14	; 0x0e
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	40 e2       	ldi	r20, 0x20	; 32
    2540:	51 e4       	ldi	r21, 0x41	; 65
    2542:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2546:	dc 01       	movw	r26, r24
    2548:	cb 01       	movw	r24, r22
    254a:	bc 01       	movw	r22, r24
    254c:	cd 01       	movw	r24, r26
    254e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2552:	dc 01       	movw	r26, r24
    2554:	cb 01       	movw	r24, r22
    2556:	9e 83       	std	Y+6, r25	; 0x06
    2558:	8d 83       	std	Y+5, r24	; 0x05
    255a:	0f c0       	rjmp	.+30     	; 0x257a <EEPROM_u8ReadByte+0x100>
    255c:	80 e9       	ldi	r24, 0x90	; 144
    255e:	91 e0       	ldi	r25, 0x01	; 1
    2560:	9c 83       	std	Y+4, r25	; 0x04
    2562:	8b 83       	std	Y+3, r24	; 0x03
    2564:	8b 81       	ldd	r24, Y+3	; 0x03
    2566:	9c 81       	ldd	r25, Y+4	; 0x04
    2568:	01 97       	sbiw	r24, 0x01	; 1
    256a:	f1 f7       	brne	.-4      	; 0x2568 <EEPROM_u8ReadByte+0xee>
    256c:	9c 83       	std	Y+4, r25	; 0x04
    256e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2570:	8d 81       	ldd	r24, Y+5	; 0x05
    2572:	9e 81       	ldd	r25, Y+6	; 0x06
    2574:	01 97       	sbiw	r24, 0x01	; 1
    2576:	9e 83       	std	Y+6, r25	; 0x06
    2578:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    257a:	8d 81       	ldd	r24, Y+5	; 0x05
    257c:	9e 81       	ldd	r25, Y+6	; 0x06
    257e:	00 97       	sbiw	r24, 0x00	; 0
    2580:	69 f7       	brne	.-38     	; 0x255c <EEPROM_u8ReadByte+0xe2>
    2582:	14 c0       	rjmp	.+40     	; 0x25ac <EEPROM_u8ReadByte+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2584:	6f 81       	ldd	r22, Y+7	; 0x07
    2586:	78 85       	ldd	r23, Y+8	; 0x08
    2588:	89 85       	ldd	r24, Y+9	; 0x09
    258a:	9a 85       	ldd	r25, Y+10	; 0x0a
    258c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	9e 83       	std	Y+6, r25	; 0x06
    2596:	8d 83       	std	Y+5, r24	; 0x05
    2598:	8d 81       	ldd	r24, Y+5	; 0x05
    259a:	9e 81       	ldd	r25, Y+6	; 0x06
    259c:	9a 83       	std	Y+2, r25	; 0x02
    259e:	89 83       	std	Y+1, r24	; 0x01
    25a0:	89 81       	ldd	r24, Y+1	; 0x01
    25a2:	9a 81       	ldd	r25, Y+2	; 0x02
    25a4:	01 97       	sbiw	r24, 0x01	; 1
    25a6:	f1 f7       	brne	.-4      	; 0x25a4 <EEPROM_u8ReadByte+0x12a>
    25a8:	9a 83       	std	Y+2, r25	; 0x02
    25aa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	return data;
    25ac:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    25ae:	61 96       	adiw	r28, 0x11	; 17
    25b0:	0f b6       	in	r0, 0x3f	; 63
    25b2:	f8 94       	cli
    25b4:	de bf       	out	0x3e, r29	; 62
    25b6:	0f be       	out	0x3f, r0	; 63
    25b8:	cd bf       	out	0x3d, r28	; 61
    25ba:	cf 91       	pop	r28
    25bc:	df 91       	pop	r29
    25be:	08 95       	ret

000025c0 <EEPROM_vWritePage>:

void EEPROM_vWritePage(uint16 address, uint8* data){
    25c0:	df 93       	push	r29
    25c2:	cf 93       	push	r28
    25c4:	00 d0       	rcall	.+0      	; 0x25c6 <EEPROM_vWritePage+0x6>
    25c6:	00 d0       	rcall	.+0      	; 0x25c8 <EEPROM_vWritePage+0x8>
    25c8:	0f 92       	push	r0
    25ca:	cd b7       	in	r28, 0x3d	; 61
    25cc:	de b7       	in	r29, 0x3e	; 62
    25ce:	9b 83       	std	Y+3, r25	; 0x03
    25d0:	8a 83       	std	Y+2, r24	; 0x02
    25d2:	7d 83       	std	Y+5, r23	; 0x05
    25d4:	6c 83       	std	Y+4, r22	; 0x04
	I2C_vSendStartCondition();
    25d6:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <I2C_vSendStartCondition>
	I2C_vSendSlaveAddresswithWrite(EEPROM_ADDRESS | (address>>8));
    25da:	8a 81       	ldd	r24, Y+2	; 0x02
    25dc:	9b 81       	ldd	r25, Y+3	; 0x03
    25de:	89 2f       	mov	r24, r25
    25e0:	99 27       	eor	r25, r25
    25e2:	80 65       	ori	r24, 0x50	; 80
    25e4:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <I2C_vSendSlaveAddresswithWrite>
	I2C_vSendDataMaster((uint8)address);
    25e8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ea:	0e 94 44 09 	call	0x1288	; 0x1288 <I2C_vSendDataMaster>
	uint8 i = 0;
    25ee:	19 82       	std	Y+1, r1	; 0x01
    25f0:	0e c0       	rjmp	.+28     	; 0x260e <EEPROM_vWritePage+0x4e>
	while(data[i] != '\0' && i < MAX_PAGE_WRITE - 1){
		I2C_vSendDataMaster(data[i]);
    25f2:	89 81       	ldd	r24, Y+1	; 0x01
    25f4:	28 2f       	mov	r18, r24
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	8c 81       	ldd	r24, Y+4	; 0x04
    25fa:	9d 81       	ldd	r25, Y+5	; 0x05
    25fc:	fc 01       	movw	r30, r24
    25fe:	e2 0f       	add	r30, r18
    2600:	f3 1f       	adc	r31, r19
    2602:	80 81       	ld	r24, Z
    2604:	0e 94 44 09 	call	0x1288	; 0x1288 <I2C_vSendDataMaster>
		i++;
    2608:	89 81       	ldd	r24, Y+1	; 0x01
    260a:	8f 5f       	subi	r24, 0xFF	; 255
    260c:	89 83       	std	Y+1, r24	; 0x01
void EEPROM_vWritePage(uint16 address, uint8* data){
	I2C_vSendStartCondition();
	I2C_vSendSlaveAddresswithWrite(EEPROM_ADDRESS | (address>>8));
	I2C_vSendDataMaster((uint8)address);
	uint8 i = 0;
	while(data[i] != '\0' && i < MAX_PAGE_WRITE - 1){
    260e:	89 81       	ldd	r24, Y+1	; 0x01
    2610:	28 2f       	mov	r18, r24
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	8c 81       	ldd	r24, Y+4	; 0x04
    2616:	9d 81       	ldd	r25, Y+5	; 0x05
    2618:	fc 01       	movw	r30, r24
    261a:	e2 0f       	add	r30, r18
    261c:	f3 1f       	adc	r31, r19
    261e:	80 81       	ld	r24, Z
    2620:	88 23       	and	r24, r24
    2622:	19 f0       	breq	.+6      	; 0x262a <EEPROM_vWritePage+0x6a>
    2624:	89 81       	ldd	r24, Y+1	; 0x01
    2626:	86 30       	cpi	r24, 0x06	; 6
    2628:	20 f3       	brcs	.-56     	; 0x25f2 <EEPROM_vWritePage+0x32>
		I2C_vSendDataMaster(data[i]);
		i++;
	}
	I2C_vSendDataMaster(data[i]);
    262a:	89 81       	ldd	r24, Y+1	; 0x01
    262c:	28 2f       	mov	r18, r24
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	8c 81       	ldd	r24, Y+4	; 0x04
    2632:	9d 81       	ldd	r25, Y+5	; 0x05
    2634:	fc 01       	movw	r30, r24
    2636:	e2 0f       	add	r30, r18
    2638:	f3 1f       	adc	r31, r19
    263a:	80 81       	ld	r24, Z
    263c:	0e 94 44 09 	call	0x1288	; 0x1288 <I2C_vSendDataMaster>
	I2C_vSendStopCondition();
    2640:	0e 94 c3 08 	call	0x1186	; 0x1186 <I2C_vSendStopCondition>
}
    2644:	0f 90       	pop	r0
    2646:	0f 90       	pop	r0
    2648:	0f 90       	pop	r0
    264a:	0f 90       	pop	r0
    264c:	0f 90       	pop	r0
    264e:	cf 91       	pop	r28
    2650:	df 91       	pop	r29
    2652:	08 95       	ret

00002654 <EEPROM_u8SequentialRead>:

void EEPROM_u8SequentialRead(uint16 address, uint8* data){
    2654:	df 93       	push	r29
    2656:	cf 93       	push	r28
    2658:	cd b7       	in	r28, 0x3d	; 61
    265a:	de b7       	in	r29, 0x3e	; 62
    265c:	63 97       	sbiw	r28, 0x13	; 19
    265e:	0f b6       	in	r0, 0x3f	; 63
    2660:	f8 94       	cli
    2662:	de bf       	out	0x3e, r29	; 62
    2664:	0f be       	out	0x3f, r0	; 63
    2666:	cd bf       	out	0x3d, r28	; 61
    2668:	99 8b       	std	Y+17, r25	; 0x11
    266a:	88 8b       	std	Y+16, r24	; 0x10
    266c:	7b 8b       	std	Y+19, r23	; 0x13
    266e:	6a 8b       	std	Y+18, r22	; 0x12

	I2C_vSendStartCondition();
    2670:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <I2C_vSendStartCondition>
	I2C_vSendSlaveAddresswithWrite(EEPROM_ADDRESS | (address>>8));
    2674:	88 89       	ldd	r24, Y+16	; 0x10
    2676:	99 89       	ldd	r25, Y+17	; 0x11
    2678:	89 2f       	mov	r24, r25
    267a:	99 27       	eor	r25, r25
    267c:	80 65       	ori	r24, 0x50	; 80
    267e:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <I2C_vSendSlaveAddresswithWrite>
	I2C_vSendDataMaster((uint8)address);
    2682:	88 89       	ldd	r24, Y+16	; 0x10
    2684:	0e 94 44 09 	call	0x1288	; 0x1288 <I2C_vSendDataMaster>

	I2C_vSendRepeatedStartCondition();
    2688:	0e 94 9f 08 	call	0x113e	; 0x113e <I2C_vSendRepeatedStartCondition>
	I2C_vSendSlaveAddresswithRead(EEPROM_ADDRESS | (address>>8));
    268c:	88 89       	ldd	r24, Y+16	; 0x10
    268e:	99 89       	ldd	r25, Y+17	; 0x11
    2690:	89 2f       	mov	r24, r25
    2692:	99 27       	eor	r25, r25
    2694:	80 65       	ori	r24, 0x50	; 80
    2696:	0e 94 0e 09 	call	0x121c	; 0x121c <I2C_vSendSlaveAddresswithRead>
	uint8 i = 0;
    269a:	1f 86       	std	Y+15, r1	; 0x0f
    269c:	0c c0       	rjmp	.+24     	; 0x26b6 <EEPROM_u8SequentialRead+0x62>
	while(data[i] != '\0' && i < MAX_PAGE_WRITE - 1){
		I2C_vReadDataMaster(data + i);
    269e:	8f 85       	ldd	r24, Y+15	; 0x0f
    26a0:	28 2f       	mov	r18, r24
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	8a 89       	ldd	r24, Y+18	; 0x12
    26a6:	9b 89       	ldd	r25, Y+19	; 0x13
    26a8:	82 0f       	add	r24, r18
    26aa:	93 1f       	adc	r25, r19
    26ac:	0e 94 68 09 	call	0x12d0	; 0x12d0 <I2C_vReadDataMaster>
		i++;
    26b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    26b2:	8f 5f       	subi	r24, 0xFF	; 255
    26b4:	8f 87       	std	Y+15, r24	; 0x0f
	I2C_vSendDataMaster((uint8)address);

	I2C_vSendRepeatedStartCondition();
	I2C_vSendSlaveAddresswithRead(EEPROM_ADDRESS | (address>>8));
	uint8 i = 0;
	while(data[i] != '\0' && i < MAX_PAGE_WRITE - 1){
    26b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    26b8:	28 2f       	mov	r18, r24
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	8a 89       	ldd	r24, Y+18	; 0x12
    26be:	9b 89       	ldd	r25, Y+19	; 0x13
    26c0:	fc 01       	movw	r30, r24
    26c2:	e2 0f       	add	r30, r18
    26c4:	f3 1f       	adc	r31, r19
    26c6:	80 81       	ld	r24, Z
    26c8:	88 23       	and	r24, r24
    26ca:	19 f0       	breq	.+6      	; 0x26d2 <EEPROM_u8SequentialRead+0x7e>
    26cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    26ce:	86 30       	cpi	r24, 0x06	; 6
    26d0:	30 f3       	brcs	.-52     	; 0x269e <EEPROM_u8SequentialRead+0x4a>
		I2C_vReadDataMaster(data + i);
		i++;
	}
	I2C_vReadDataMaster(data + i);
    26d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    26d4:	28 2f       	mov	r18, r24
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	8a 89       	ldd	r24, Y+18	; 0x12
    26da:	9b 89       	ldd	r25, Y+19	; 0x13
    26dc:	82 0f       	add	r24, r18
    26de:	93 1f       	adc	r25, r19
    26e0:	0e 94 68 09 	call	0x12d0	; 0x12d0 <I2C_vReadDataMaster>

	I2C_vSendStopCondition();
    26e4:	0e 94 c3 08 	call	0x1186	; 0x1186 <I2C_vSendStopCondition>
    26e8:	80 e0       	ldi	r24, 0x00	; 0
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	a0 ea       	ldi	r26, 0xA0	; 160
    26ee:	b0 e4       	ldi	r27, 0x40	; 64
    26f0:	8b 87       	std	Y+11, r24	; 0x0b
    26f2:	9c 87       	std	Y+12, r25	; 0x0c
    26f4:	ad 87       	std	Y+13, r26	; 0x0d
    26f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    26fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    26fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    26fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2700:	20 e0       	ldi	r18, 0x00	; 0
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	4a e7       	ldi	r20, 0x7A	; 122
    2706:	55 e4       	ldi	r21, 0x45	; 69
    2708:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    270c:	dc 01       	movw	r26, r24
    270e:	cb 01       	movw	r24, r22
    2710:	8f 83       	std	Y+7, r24	; 0x07
    2712:	98 87       	std	Y+8, r25	; 0x08
    2714:	a9 87       	std	Y+9, r26	; 0x09
    2716:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2718:	6f 81       	ldd	r22, Y+7	; 0x07
    271a:	78 85       	ldd	r23, Y+8	; 0x08
    271c:	89 85       	ldd	r24, Y+9	; 0x09
    271e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	40 e8       	ldi	r20, 0x80	; 128
    2726:	5f e3       	ldi	r21, 0x3F	; 63
    2728:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    272c:	88 23       	and	r24, r24
    272e:	2c f4       	brge	.+10     	; 0x273a <EEPROM_u8SequentialRead+0xe6>
		__ticks = 1;
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	9e 83       	std	Y+6, r25	; 0x06
    2736:	8d 83       	std	Y+5, r24	; 0x05
    2738:	3f c0       	rjmp	.+126    	; 0x27b8 <EEPROM_u8SequentialRead+0x164>
	else if (__tmp > 65535)
    273a:	6f 81       	ldd	r22, Y+7	; 0x07
    273c:	78 85       	ldd	r23, Y+8	; 0x08
    273e:	89 85       	ldd	r24, Y+9	; 0x09
    2740:	9a 85       	ldd	r25, Y+10	; 0x0a
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	3f ef       	ldi	r19, 0xFF	; 255
    2746:	4f e7       	ldi	r20, 0x7F	; 127
    2748:	57 e4       	ldi	r21, 0x47	; 71
    274a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    274e:	18 16       	cp	r1, r24
    2750:	4c f5       	brge	.+82     	; 0x27a4 <EEPROM_u8SequentialRead+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2752:	6b 85       	ldd	r22, Y+11	; 0x0b
    2754:	7c 85       	ldd	r23, Y+12	; 0x0c
    2756:	8d 85       	ldd	r24, Y+13	; 0x0d
    2758:	9e 85       	ldd	r25, Y+14	; 0x0e
    275a:	20 e0       	ldi	r18, 0x00	; 0
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	40 e2       	ldi	r20, 0x20	; 32
    2760:	51 e4       	ldi	r21, 0x41	; 65
    2762:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2766:	dc 01       	movw	r26, r24
    2768:	cb 01       	movw	r24, r22
    276a:	bc 01       	movw	r22, r24
    276c:	cd 01       	movw	r24, r26
    276e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2772:	dc 01       	movw	r26, r24
    2774:	cb 01       	movw	r24, r22
    2776:	9e 83       	std	Y+6, r25	; 0x06
    2778:	8d 83       	std	Y+5, r24	; 0x05
    277a:	0f c0       	rjmp	.+30     	; 0x279a <EEPROM_u8SequentialRead+0x146>
    277c:	80 e9       	ldi	r24, 0x90	; 144
    277e:	91 e0       	ldi	r25, 0x01	; 1
    2780:	9c 83       	std	Y+4, r25	; 0x04
    2782:	8b 83       	std	Y+3, r24	; 0x03
    2784:	8b 81       	ldd	r24, Y+3	; 0x03
    2786:	9c 81       	ldd	r25, Y+4	; 0x04
    2788:	01 97       	sbiw	r24, 0x01	; 1
    278a:	f1 f7       	brne	.-4      	; 0x2788 <EEPROM_u8SequentialRead+0x134>
    278c:	9c 83       	std	Y+4, r25	; 0x04
    278e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2790:	8d 81       	ldd	r24, Y+5	; 0x05
    2792:	9e 81       	ldd	r25, Y+6	; 0x06
    2794:	01 97       	sbiw	r24, 0x01	; 1
    2796:	9e 83       	std	Y+6, r25	; 0x06
    2798:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    279a:	8d 81       	ldd	r24, Y+5	; 0x05
    279c:	9e 81       	ldd	r25, Y+6	; 0x06
    279e:	00 97       	sbiw	r24, 0x00	; 0
    27a0:	69 f7       	brne	.-38     	; 0x277c <EEPROM_u8SequentialRead+0x128>
    27a2:	14 c0       	rjmp	.+40     	; 0x27cc <EEPROM_u8SequentialRead+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a4:	6f 81       	ldd	r22, Y+7	; 0x07
    27a6:	78 85       	ldd	r23, Y+8	; 0x08
    27a8:	89 85       	ldd	r24, Y+9	; 0x09
    27aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b0:	dc 01       	movw	r26, r24
    27b2:	cb 01       	movw	r24, r22
    27b4:	9e 83       	std	Y+6, r25	; 0x06
    27b6:	8d 83       	std	Y+5, r24	; 0x05
    27b8:	8d 81       	ldd	r24, Y+5	; 0x05
    27ba:	9e 81       	ldd	r25, Y+6	; 0x06
    27bc:	9a 83       	std	Y+2, r25	; 0x02
    27be:	89 83       	std	Y+1, r24	; 0x01
    27c0:	89 81       	ldd	r24, Y+1	; 0x01
    27c2:	9a 81       	ldd	r25, Y+2	; 0x02
    27c4:	01 97       	sbiw	r24, 0x01	; 1
    27c6:	f1 f7       	brne	.-4      	; 0x27c4 <EEPROM_u8SequentialRead+0x170>
    27c8:	9a 83       	std	Y+2, r25	; 0x02
    27ca:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);

}
    27cc:	63 96       	adiw	r28, 0x13	; 19
    27ce:	0f b6       	in	r0, 0x3f	; 63
    27d0:	f8 94       	cli
    27d2:	de bf       	out	0x3e, r29	; 62
    27d4:	0f be       	out	0x3f, r0	; 63
    27d6:	cd bf       	out	0x3d, r28	; 61
    27d8:	cf 91       	pop	r28
    27da:	df 91       	pop	r29
    27dc:	08 95       	ret

000027de <LED_vRedOn>:
#include "LED_config.h"
#include "LED.h"
#include "../MCAL/dio.h"


void LED_vRedOn(void){
    27de:	df 93       	push	r29
    27e0:	cf 93       	push	r28
    27e2:	cd b7       	in	r28, 0x3d	; 61
    27e4:	de b7       	in	r29, 0x3e	; 62
	DIO_WriteChannel(RED_LED, HIGH);
    27e6:	8f e0       	ldi	r24, 0x0F	; 15
    27e8:	61 e0       	ldi	r22, 0x01	; 1
    27ea:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_WriteChannel>
}
    27ee:	cf 91       	pop	r28
    27f0:	df 91       	pop	r29
    27f2:	08 95       	ret

000027f4 <LED_vRedOff>:

void LED_vRedOff(void){
    27f4:	df 93       	push	r29
    27f6:	cf 93       	push	r28
    27f8:	cd b7       	in	r28, 0x3d	; 61
    27fa:	de b7       	in	r29, 0x3e	; 62
	DIO_WriteChannel(RED_LED, LOW);
    27fc:	8f e0       	ldi	r24, 0x0F	; 15
    27fe:	60 e0       	ldi	r22, 0x00	; 0
    2800:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_WriteChannel>
}
    2804:	cf 91       	pop	r28
    2806:	df 91       	pop	r29
    2808:	08 95       	ret

0000280a <LED_vGreenOn>:

void LED_vGreenOn(void){
    280a:	df 93       	push	r29
    280c:	cf 93       	push	r28
    280e:	cd b7       	in	r28, 0x3d	; 61
    2810:	de b7       	in	r29, 0x3e	; 62
	DIO_WriteChannel(GREEN_LED, HIGH);
    2812:	84 e0       	ldi	r24, 0x04	; 4
    2814:	61 e0       	ldi	r22, 0x01	; 1
    2816:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_WriteChannel>
}
    281a:	cf 91       	pop	r28
    281c:	df 91       	pop	r29
    281e:	08 95       	ret

00002820 <LED_vGreenOff>:


void LED_vGreenOff(void){
    2820:	df 93       	push	r29
    2822:	cf 93       	push	r28
    2824:	cd b7       	in	r28, 0x3d	; 61
    2826:	de b7       	in	r29, 0x3e	; 62
	DIO_WriteChannel(GREEN_LED, LOW);
    2828:	84 e0       	ldi	r24, 0x04	; 4
    282a:	60 e0       	ldi	r22, 0x00	; 0
    282c:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_WriteChannel>
}
    2830:	cf 91       	pop	r28
    2832:	df 91       	pop	r29
    2834:	08 95       	ret

00002836 <LED_vBlueOn>:

void LED_vBlueOn(void){
    2836:	df 93       	push	r29
    2838:	cf 93       	push	r28
    283a:	cd b7       	in	r28, 0x3d	; 61
    283c:	de b7       	in	r29, 0x3e	; 62
	DIO_WriteChannel(BLUE_LED, HIGH);
    283e:	85 e0       	ldi	r24, 0x05	; 5
    2840:	61 e0       	ldi	r22, 0x01	; 1
    2842:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_WriteChannel>
}
    2846:	cf 91       	pop	r28
    2848:	df 91       	pop	r29
    284a:	08 95       	ret

0000284c <LED_vBlueOff>:

void LED_vBlueOff(void){
    284c:	df 93       	push	r29
    284e:	cf 93       	push	r28
    2850:	cd b7       	in	r28, 0x3d	; 61
    2852:	de b7       	in	r29, 0x3e	; 62
	DIO_WriteChannel(BLUE_LED, LOW);
    2854:	85 e0       	ldi	r24, 0x05	; 5
    2856:	60 e0       	ldi	r22, 0x00	; 0
    2858:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_WriteChannel>
}
    285c:	cf 91       	pop	r28
    285e:	df 91       	pop	r29
    2860:	08 95       	ret

00002862 <LED_vYellowOn>:

void LED_vYellowOn(void){
    2862:	df 93       	push	r29
    2864:	cf 93       	push	r28
    2866:	cd b7       	in	r28, 0x3d	; 61
    2868:	de b7       	in	r29, 0x3e	; 62
	DIO_WriteChannel(YELLOW_LED, HIGH);
    286a:	86 e0       	ldi	r24, 0x06	; 6
    286c:	61 e0       	ldi	r22, 0x01	; 1
    286e:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_WriteChannel>
}
    2872:	cf 91       	pop	r28
    2874:	df 91       	pop	r29
    2876:	08 95       	ret

00002878 <LED_vYellowOff>:

void LED_vYellowOff(void){
    2878:	df 93       	push	r29
    287a:	cf 93       	push	r28
    287c:	cd b7       	in	r28, 0x3d	; 61
    287e:	de b7       	in	r29, 0x3e	; 62
	DIO_WriteChannel(YELLOW_LED, LOW);
    2880:	86 e0       	ldi	r24, 0x06	; 6
    2882:	60 e0       	ldi	r22, 0x00	; 0
    2884:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_WriteChannel>
}
    2888:	cf 91       	pop	r28
    288a:	df 91       	pop	r29
    288c:	08 95       	ret

0000288e <BUZZER_vOn>:

#include "buzzer.h"
#include "buzzer_config.h"
#include "../MCAL/dio.h"

void BUZZER_vOn(void){
    288e:	df 93       	push	r29
    2890:	cf 93       	push	r28
    2892:	cd b7       	in	r28, 0x3d	; 61
    2894:	de b7       	in	r29, 0x3e	; 62
	DIO_WriteChannel(BUZZER, HIGH);
    2896:	86 e1       	ldi	r24, 0x16	; 22
    2898:	61 e0       	ldi	r22, 0x01	; 1
    289a:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_WriteChannel>
}
    289e:	cf 91       	pop	r28
    28a0:	df 91       	pop	r29
    28a2:	08 95       	ret

000028a4 <BUZZER_vOff>:

void BUZZER_vOff(void){
    28a4:	df 93       	push	r29
    28a6:	cf 93       	push	r28
    28a8:	cd b7       	in	r28, 0x3d	; 61
    28aa:	de b7       	in	r29, 0x3e	; 62
	DIO_WriteChannel(BUZZER, LOW);
    28ac:	86 e1       	ldi	r24, 0x16	; 22
    28ae:	60 e0       	ldi	r22, 0x00	; 0
    28b0:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_WriteChannel>
}
    28b4:	cf 91       	pop	r28
    28b6:	df 91       	pop	r29
    28b8:	08 95       	ret

000028ba <Keypad_vInit>:


uint8 characters[ROWS_NUM][COLUMNS_NUM] = {};


void Keypad_vInit(void){
    28ba:	df 93       	push	r29
    28bc:	cf 93       	push	r28
    28be:	cd b7       	in	r28, 0x3d	; 61
    28c0:	de b7       	in	r29, 0x3e	; 62
	DIO_SetInternalPullup(COLUMN1, HIGH);
    28c2:	8f e1       	ldi	r24, 0x1F	; 31
    28c4:	61 e0       	ldi	r22, 0x01	; 1
    28c6:	0e 94 30 0c 	call	0x1860	; 0x1860 <DIO_SetInternalPullup>
	DIO_SetInternalPullup(COLUMN2, HIGH);
    28ca:	8e e1       	ldi	r24, 0x1E	; 30
    28cc:	61 e0       	ldi	r22, 0x01	; 1
    28ce:	0e 94 30 0c 	call	0x1860	; 0x1860 <DIO_SetInternalPullup>
	DIO_SetInternalPullup(COLUMN3, HIGH);
    28d2:	8c e1       	ldi	r24, 0x1C	; 28
    28d4:	61 e0       	ldi	r22, 0x01	; 1
    28d6:	0e 94 30 0c 	call	0x1860	; 0x1860 <DIO_SetInternalPullup>
	DIO_SetInternalPullup(COLUMN4, HIGH);
    28da:	8b e1       	ldi	r24, 0x1B	; 27
    28dc:	61 e0       	ldi	r22, 0x01	; 1
    28de:	0e 94 30 0c 	call	0x1860	; 0x1860 <DIO_SetInternalPullup>
}
    28e2:	cf 91       	pop	r28
    28e4:	df 91       	pop	r29
    28e6:	08 95       	ret

000028e8 <Keypad_u8GetPressed>:

uint8 Keypad_u8GetPressed(void){
    28e8:	df 93       	push	r29
    28ea:	cf 93       	push	r28
    28ec:	cd b7       	in	r28, 0x3d	; 61
    28ee:	de b7       	in	r29, 0x3e	; 62
    28f0:	a0 97       	sbiw	r28, 0x20	; 32
    28f2:	0f b6       	in	r0, 0x3f	; 63
    28f4:	f8 94       	cli
    28f6:	de bf       	out	0x3e, r29	; 62
    28f8:	0f be       	out	0x3f, r0	; 63
    28fa:	cd bf       	out	0x3d, r28	; 61
	uint8 rows[ROWS_NUM] = ROWS_ARR;
    28fc:	85 e1       	ldi	r24, 0x15	; 21
    28fe:	8b 83       	std	Y+3, r24	; 0x03
    2900:	84 e1       	ldi	r24, 0x14	; 20
    2902:	8c 83       	std	Y+4, r24	; 0x04
    2904:	83 e1       	ldi	r24, 0x13	; 19
    2906:	8d 83       	std	Y+5, r24	; 0x05
    2908:	82 e1       	ldi	r24, 0x12	; 18
    290a:	8e 83       	std	Y+6, r24	; 0x06
	uint8 columns[COLUMNS_NUM] = COLUMNS_ARR;
    290c:	8f e1       	ldi	r24, 0x1F	; 31
    290e:	8f 83       	std	Y+7, r24	; 0x07
    2910:	8e e1       	ldi	r24, 0x1E	; 30
    2912:	88 87       	std	Y+8, r24	; 0x08
    2914:	8c e1       	ldi	r24, 0x1C	; 28
    2916:	89 87       	std	Y+9, r24	; 0x09
    2918:	8b e1       	ldi	r24, 0x1B	; 27
    291a:	8a 87       	std	Y+10, r24	; 0x0a
	uint8 characters[ROWS_NUM][COLUMNS_NUM] = KEYPAD_KEYS;
    291c:	ce 01       	movw	r24, r28
    291e:	0b 96       	adiw	r24, 0x0b	; 11
    2920:	9d 8f       	std	Y+29, r25	; 0x1d
    2922:	8c 8f       	std	Y+28, r24	; 0x1c
    2924:	ea e0       	ldi	r30, 0x0A	; 10
    2926:	f3 e0       	ldi	r31, 0x03	; 3
    2928:	ff 8f       	std	Y+31, r31	; 0x1f
    292a:	ee 8f       	std	Y+30, r30	; 0x1e
    292c:	f0 e1       	ldi	r31, 0x10	; 16
    292e:	f8 a3       	std	Y+32, r31	; 0x20
    2930:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2932:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2934:	00 80       	ld	r0, Z
    2936:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2938:	9f 8d       	ldd	r25, Y+31	; 0x1f
    293a:	01 96       	adiw	r24, 0x01	; 1
    293c:	9f 8f       	std	Y+31, r25	; 0x1f
    293e:	8e 8f       	std	Y+30, r24	; 0x1e
    2940:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2942:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2944:	00 82       	st	Z, r0
    2946:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2948:	9d 8d       	ldd	r25, Y+29	; 0x1d
    294a:	01 96       	adiw	r24, 0x01	; 1
    294c:	9d 8f       	std	Y+29, r25	; 0x1d
    294e:	8c 8f       	std	Y+28, r24	; 0x1c
    2950:	98 a1       	ldd	r25, Y+32	; 0x20
    2952:	91 50       	subi	r25, 0x01	; 1
    2954:	98 a3       	std	Y+32, r25	; 0x20
    2956:	e8 a1       	ldd	r30, Y+32	; 0x20
    2958:	ee 23       	and	r30, r30
    295a:	51 f7       	brne	.-44     	; 0x2930 <Keypad_u8GetPressed+0x48>


	for (uint8 i = 0; i < ROWS_NUM; i++){
    295c:	1a 82       	std	Y+2, r1	; 0x02
    295e:	5f c0       	rjmp	.+190    	; 0x2a1e <Keypad_u8GetPressed+0x136>
		DIO_WriteChannel(rows[i], LOW);
    2960:	8a 81       	ldd	r24, Y+2	; 0x02
    2962:	28 2f       	mov	r18, r24
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	ce 01       	movw	r24, r28
    2968:	03 96       	adiw	r24, 0x03	; 3
    296a:	fc 01       	movw	r30, r24
    296c:	e2 0f       	add	r30, r18
    296e:	f3 1f       	adc	r31, r19
    2970:	80 81       	ld	r24, Z
    2972:	60 e0       	ldi	r22, 0x00	; 0
    2974:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_WriteChannel>
		for (uint8 j = 0; j < COLUMNS_NUM; j++){
    2978:	19 82       	std	Y+1, r1	; 0x01
    297a:	3e c0       	rjmp	.+124    	; 0x29f8 <Keypad_u8GetPressed+0x110>
			if (DIO_ReadChannel(columns[j]) == 0){
    297c:	89 81       	ldd	r24, Y+1	; 0x01
    297e:	28 2f       	mov	r18, r24
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	ce 01       	movw	r24, r28
    2984:	07 96       	adiw	r24, 0x07	; 7
    2986:	fc 01       	movw	r30, r24
    2988:	e2 0f       	add	r30, r18
    298a:	f3 1f       	adc	r31, r19
    298c:	80 81       	ld	r24, Z
    298e:	0e 94 a4 0b 	call	0x1748	; 0x1748 <DIO_ReadChannel>
    2992:	88 23       	and	r24, r24
    2994:	71 f5       	brne	.+92     	; 0x29f2 <Keypad_u8GetPressed+0x10a>
				while(0 == DIO_ReadChannel(columns[j]));
    2996:	89 81       	ldd	r24, Y+1	; 0x01
    2998:	28 2f       	mov	r18, r24
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	ce 01       	movw	r24, r28
    299e:	07 96       	adiw	r24, 0x07	; 7
    29a0:	fc 01       	movw	r30, r24
    29a2:	e2 0f       	add	r30, r18
    29a4:	f3 1f       	adc	r31, r19
    29a6:	80 81       	ld	r24, Z
    29a8:	0e 94 a4 0b 	call	0x1748	; 0x1748 <DIO_ReadChannel>
    29ac:	88 23       	and	r24, r24
    29ae:	99 f3       	breq	.-26     	; 0x2996 <Keypad_u8GetPressed+0xae>
				DIO_WriteChannel(rows[i], HIGH);
    29b0:	8a 81       	ldd	r24, Y+2	; 0x02
    29b2:	28 2f       	mov	r18, r24
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	ce 01       	movw	r24, r28
    29b8:	03 96       	adiw	r24, 0x03	; 3
    29ba:	fc 01       	movw	r30, r24
    29bc:	e2 0f       	add	r30, r18
    29be:	f3 1f       	adc	r31, r19
    29c0:	80 81       	ld	r24, Z
    29c2:	61 e0       	ldi	r22, 0x01	; 1
    29c4:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_WriteChannel>
				return characters[i][j];
    29c8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ca:	28 2f       	mov	r18, r24
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	89 81       	ldd	r24, Y+1	; 0x01
    29d0:	48 2f       	mov	r20, r24
    29d2:	50 e0       	ldi	r21, 0x00	; 0
    29d4:	22 0f       	add	r18, r18
    29d6:	33 1f       	adc	r19, r19
    29d8:	22 0f       	add	r18, r18
    29da:	33 1f       	adc	r19, r19
    29dc:	ce 01       	movw	r24, r28
    29de:	01 96       	adiw	r24, 0x01	; 1
    29e0:	82 0f       	add	r24, r18
    29e2:	93 1f       	adc	r25, r19
    29e4:	84 0f       	add	r24, r20
    29e6:	95 1f       	adc	r25, r21
    29e8:	fc 01       	movw	r30, r24
    29ea:	3a 96       	adiw	r30, 0x0a	; 10
    29ec:	80 81       	ld	r24, Z
    29ee:	8b 8f       	std	Y+27, r24	; 0x1b
    29f0:	1c c0       	rjmp	.+56     	; 0x2a2a <Keypad_u8GetPressed+0x142>
	uint8 characters[ROWS_NUM][COLUMNS_NUM] = KEYPAD_KEYS;


	for (uint8 i = 0; i < ROWS_NUM; i++){
		DIO_WriteChannel(rows[i], LOW);
		for (uint8 j = 0; j < COLUMNS_NUM; j++){
    29f2:	89 81       	ldd	r24, Y+1	; 0x01
    29f4:	8f 5f       	subi	r24, 0xFF	; 255
    29f6:	89 83       	std	Y+1, r24	; 0x01
    29f8:	89 81       	ldd	r24, Y+1	; 0x01
    29fa:	84 30       	cpi	r24, 0x04	; 4
    29fc:	08 f4       	brcc	.+2      	; 0x2a00 <Keypad_u8GetPressed+0x118>
    29fe:	be cf       	rjmp	.-132    	; 0x297c <Keypad_u8GetPressed+0x94>
				while(0 == DIO_ReadChannel(columns[j]));
				DIO_WriteChannel(rows[i], HIGH);
				return characters[i][j];
			}
		}
		DIO_WriteChannel(rows[i], HIGH);
    2a00:	8a 81       	ldd	r24, Y+2	; 0x02
    2a02:	28 2f       	mov	r18, r24
    2a04:	30 e0       	ldi	r19, 0x00	; 0
    2a06:	ce 01       	movw	r24, r28
    2a08:	03 96       	adiw	r24, 0x03	; 3
    2a0a:	fc 01       	movw	r30, r24
    2a0c:	e2 0f       	add	r30, r18
    2a0e:	f3 1f       	adc	r31, r19
    2a10:	80 81       	ld	r24, Z
    2a12:	61 e0       	ldi	r22, 0x01	; 1
    2a14:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_WriteChannel>
	uint8 rows[ROWS_NUM] = ROWS_ARR;
	uint8 columns[COLUMNS_NUM] = COLUMNS_ARR;
	uint8 characters[ROWS_NUM][COLUMNS_NUM] = KEYPAD_KEYS;


	for (uint8 i = 0; i < ROWS_NUM; i++){
    2a18:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1a:	8f 5f       	subi	r24, 0xFF	; 255
    2a1c:	8a 83       	std	Y+2, r24	; 0x02
    2a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a20:	84 30       	cpi	r24, 0x04	; 4
    2a22:	08 f4       	brcc	.+2      	; 0x2a26 <Keypad_u8GetPressed+0x13e>
    2a24:	9d cf       	rjmp	.-198    	; 0x2960 <Keypad_u8GetPressed+0x78>
				return characters[i][j];
			}
		}
		DIO_WriteChannel(rows[i], HIGH);
	}
	return KEY_NOT_PRESSED;
    2a26:	9f ef       	ldi	r25, 0xFF	; 255
    2a28:	9b 8f       	std	Y+27, r25	; 0x1b
    2a2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
}
    2a2c:	a0 96       	adiw	r28, 0x20	; 32
    2a2e:	0f b6       	in	r0, 0x3f	; 63
    2a30:	f8 94       	cli
    2a32:	de bf       	out	0x3e, r29	; 62
    2a34:	0f be       	out	0x3f, r0	; 63
    2a36:	cd bf       	out	0x3d, r28	; 61
    2a38:	cf 91       	pop	r28
    2a3a:	df 91       	pop	r29
    2a3c:	08 95       	ret

00002a3e <LCD_vInit>:

#include "lcd.h"
#include "lcd_config.h"


void LCD_vInit(void){
    2a3e:	0f 93       	push	r16
    2a40:	1f 93       	push	r17
    2a42:	df 93       	push	r29
    2a44:	cf 93       	push	r28
    2a46:	cd b7       	in	r28, 0x3d	; 61
    2a48:	de b7       	in	r29, 0x3e	; 62
    2a4a:	cc 54       	subi	r28, 0x4C	; 76
    2a4c:	d0 40       	sbci	r29, 0x00	; 0
    2a4e:	0f b6       	in	r0, 0x3f	; 63
    2a50:	f8 94       	cli
    2a52:	de bf       	out	0x3e, r29	; 62
    2a54:	0f be       	out	0x3f, r0	; 63
    2a56:	cd bf       	out	0x3d, r28	; 61
    2a58:	fe 01       	movw	r30, r28
    2a5a:	e7 5b       	subi	r30, 0xB7	; 183
    2a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5e:	80 e0       	ldi	r24, 0x00	; 0
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	a4 e3       	ldi	r26, 0x34	; 52
    2a64:	b2 e4       	ldi	r27, 0x42	; 66
    2a66:	80 83       	st	Z, r24
    2a68:	91 83       	std	Z+1, r25	; 0x01
    2a6a:	a2 83       	std	Z+2, r26	; 0x02
    2a6c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a6e:	8e 01       	movw	r16, r28
    2a70:	0b 5b       	subi	r16, 0xBB	; 187
    2a72:	1f 4f       	sbci	r17, 0xFF	; 255
    2a74:	fe 01       	movw	r30, r28
    2a76:	e7 5b       	subi	r30, 0xB7	; 183
    2a78:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7a:	60 81       	ld	r22, Z
    2a7c:	71 81       	ldd	r23, Z+1	; 0x01
    2a7e:	82 81       	ldd	r24, Z+2	; 0x02
    2a80:	93 81       	ldd	r25, Z+3	; 0x03
    2a82:	20 e0       	ldi	r18, 0x00	; 0
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	4a e7       	ldi	r20, 0x7A	; 122
    2a88:	55 e4       	ldi	r21, 0x45	; 69
    2a8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a8e:	dc 01       	movw	r26, r24
    2a90:	cb 01       	movw	r24, r22
    2a92:	f8 01       	movw	r30, r16
    2a94:	80 83       	st	Z, r24
    2a96:	91 83       	std	Z+1, r25	; 0x01
    2a98:	a2 83       	std	Z+2, r26	; 0x02
    2a9a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a9c:	fe 01       	movw	r30, r28
    2a9e:	eb 5b       	subi	r30, 0xBB	; 187
    2aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa2:	60 81       	ld	r22, Z
    2aa4:	71 81       	ldd	r23, Z+1	; 0x01
    2aa6:	82 81       	ldd	r24, Z+2	; 0x02
    2aa8:	93 81       	ldd	r25, Z+3	; 0x03
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	40 e8       	ldi	r20, 0x80	; 128
    2ab0:	5f e3       	ldi	r21, 0x3F	; 63
    2ab2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ab6:	88 23       	and	r24, r24
    2ab8:	44 f4       	brge	.+16     	; 0x2aca <LCD_vInit+0x8c>
		__ticks = 1;
    2aba:	fe 01       	movw	r30, r28
    2abc:	ed 5b       	subi	r30, 0xBD	; 189
    2abe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac0:	81 e0       	ldi	r24, 0x01	; 1
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	91 83       	std	Z+1, r25	; 0x01
    2ac6:	80 83       	st	Z, r24
    2ac8:	64 c0       	rjmp	.+200    	; 0x2b92 <LCD_vInit+0x154>
	else if (__tmp > 65535)
    2aca:	fe 01       	movw	r30, r28
    2acc:	eb 5b       	subi	r30, 0xBB	; 187
    2ace:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad0:	60 81       	ld	r22, Z
    2ad2:	71 81       	ldd	r23, Z+1	; 0x01
    2ad4:	82 81       	ldd	r24, Z+2	; 0x02
    2ad6:	93 81       	ldd	r25, Z+3	; 0x03
    2ad8:	20 e0       	ldi	r18, 0x00	; 0
    2ada:	3f ef       	ldi	r19, 0xFF	; 255
    2adc:	4f e7       	ldi	r20, 0x7F	; 127
    2ade:	57 e4       	ldi	r21, 0x47	; 71
    2ae0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ae4:	18 16       	cp	r1, r24
    2ae6:	0c f0       	brlt	.+2      	; 0x2aea <LCD_vInit+0xac>
    2ae8:	43 c0       	rjmp	.+134    	; 0x2b70 <LCD_vInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aea:	fe 01       	movw	r30, r28
    2aec:	e7 5b       	subi	r30, 0xB7	; 183
    2aee:	ff 4f       	sbci	r31, 0xFF	; 255
    2af0:	60 81       	ld	r22, Z
    2af2:	71 81       	ldd	r23, Z+1	; 0x01
    2af4:	82 81       	ldd	r24, Z+2	; 0x02
    2af6:	93 81       	ldd	r25, Z+3	; 0x03
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	40 e2       	ldi	r20, 0x20	; 32
    2afe:	51 e4       	ldi	r21, 0x41	; 65
    2b00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b04:	dc 01       	movw	r26, r24
    2b06:	cb 01       	movw	r24, r22
    2b08:	8e 01       	movw	r16, r28
    2b0a:	0d 5b       	subi	r16, 0xBD	; 189
    2b0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b0e:	bc 01       	movw	r22, r24
    2b10:	cd 01       	movw	r24, r26
    2b12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	f8 01       	movw	r30, r16
    2b1c:	91 83       	std	Z+1, r25	; 0x01
    2b1e:	80 83       	st	Z, r24
    2b20:	1f c0       	rjmp	.+62     	; 0x2b60 <LCD_vInit+0x122>
    2b22:	fe 01       	movw	r30, r28
    2b24:	ef 5b       	subi	r30, 0xBF	; 191
    2b26:	ff 4f       	sbci	r31, 0xFF	; 255
    2b28:	80 e9       	ldi	r24, 0x90	; 144
    2b2a:	91 e0       	ldi	r25, 0x01	; 1
    2b2c:	91 83       	std	Z+1, r25	; 0x01
    2b2e:	80 83       	st	Z, r24
    2b30:	fe 01       	movw	r30, r28
    2b32:	ef 5b       	subi	r30, 0xBF	; 191
    2b34:	ff 4f       	sbci	r31, 0xFF	; 255
    2b36:	80 81       	ld	r24, Z
    2b38:	91 81       	ldd	r25, Z+1	; 0x01
    2b3a:	01 97       	sbiw	r24, 0x01	; 1
    2b3c:	f1 f7       	brne	.-4      	; 0x2b3a <LCD_vInit+0xfc>
    2b3e:	fe 01       	movw	r30, r28
    2b40:	ef 5b       	subi	r30, 0xBF	; 191
    2b42:	ff 4f       	sbci	r31, 0xFF	; 255
    2b44:	91 83       	std	Z+1, r25	; 0x01
    2b46:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b48:	de 01       	movw	r26, r28
    2b4a:	ad 5b       	subi	r26, 0xBD	; 189
    2b4c:	bf 4f       	sbci	r27, 0xFF	; 255
    2b4e:	fe 01       	movw	r30, r28
    2b50:	ed 5b       	subi	r30, 0xBD	; 189
    2b52:	ff 4f       	sbci	r31, 0xFF	; 255
    2b54:	80 81       	ld	r24, Z
    2b56:	91 81       	ldd	r25, Z+1	; 0x01
    2b58:	01 97       	sbiw	r24, 0x01	; 1
    2b5a:	11 96       	adiw	r26, 0x01	; 1
    2b5c:	9c 93       	st	X, r25
    2b5e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b60:	fe 01       	movw	r30, r28
    2b62:	ed 5b       	subi	r30, 0xBD	; 189
    2b64:	ff 4f       	sbci	r31, 0xFF	; 255
    2b66:	80 81       	ld	r24, Z
    2b68:	91 81       	ldd	r25, Z+1	; 0x01
    2b6a:	00 97       	sbiw	r24, 0x00	; 0
    2b6c:	d1 f6       	brne	.-76     	; 0x2b22 <LCD_vInit+0xe4>
    2b6e:	24 c0       	rjmp	.+72     	; 0x2bb8 <LCD_vInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b70:	8e 01       	movw	r16, r28
    2b72:	0d 5b       	subi	r16, 0xBD	; 189
    2b74:	1f 4f       	sbci	r17, 0xFF	; 255
    2b76:	fe 01       	movw	r30, r28
    2b78:	eb 5b       	subi	r30, 0xBB	; 187
    2b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7c:	60 81       	ld	r22, Z
    2b7e:	71 81       	ldd	r23, Z+1	; 0x01
    2b80:	82 81       	ldd	r24, Z+2	; 0x02
    2b82:	93 81       	ldd	r25, Z+3	; 0x03
    2b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b88:	dc 01       	movw	r26, r24
    2b8a:	cb 01       	movw	r24, r22
    2b8c:	f8 01       	movw	r30, r16
    2b8e:	91 83       	std	Z+1, r25	; 0x01
    2b90:	80 83       	st	Z, r24
    2b92:	fe 01       	movw	r30, r28
    2b94:	ed 5b       	subi	r30, 0xBD	; 189
    2b96:	ff 4f       	sbci	r31, 0xFF	; 255
    2b98:	80 81       	ld	r24, Z
    2b9a:	91 81       	ldd	r25, Z+1	; 0x01
    2b9c:	fe 01       	movw	r30, r28
    2b9e:	ff 96       	adiw	r30, 0x3f	; 63
    2ba0:	91 83       	std	Z+1, r25	; 0x01
    2ba2:	80 83       	st	Z, r24
    2ba4:	fe 01       	movw	r30, r28
    2ba6:	ff 96       	adiw	r30, 0x3f	; 63
    2ba8:	80 81       	ld	r24, Z
    2baa:	91 81       	ldd	r25, Z+1	; 0x01
    2bac:	01 97       	sbiw	r24, 0x01	; 1
    2bae:	f1 f7       	brne	.-4      	; 0x2bac <LCD_vInit+0x16e>
    2bb0:	fe 01       	movw	r30, r28
    2bb2:	ff 96       	adiw	r30, 0x3f	; 63
    2bb4:	91 83       	std	Z+1, r25	; 0x01
    2bb6:	80 83       	st	Z, r24
//#if     LCD_MODE == 4
	_delay_ms(45);
	DIO_WriteChannel(RS, LOW);
    2bb8:	83 e0       	ldi	r24, 0x03	; 3
    2bba:	60 e0       	ldi	r22, 0x00	; 0
    2bbc:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_WriteChannel>
	vPriEnable();
    2bc0:	0e 94 67 19 	call	0x32ce	; 0x32ce <vPriEnable>
	vPriWriteHalfPort(0b0010);
    2bc4:	82 e0       	ldi	r24, 0x02	; 2
    2bc6:	0e 94 17 19 	call	0x322e	; 0x322e <vPriWriteHalfPort>
	vPriEnable();
    2bca:	0e 94 67 19 	call	0x32ce	; 0x32ce <vPriEnable>

	LCD_vSendCmnd(0b00101000);
    2bce:	88 e2       	ldi	r24, 0x28	; 40
    2bd0:	0e 94 ed 17 	call	0x2fda	; 0x2fda <LCD_vSendCmnd>
    2bd4:	80 e0       	ldi	r24, 0x00	; 0
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	a4 e3       	ldi	r26, 0x34	; 52
    2bda:	b2 e4       	ldi	r27, 0x42	; 66
    2bdc:	8b af       	std	Y+59, r24	; 0x3b
    2bde:	9c af       	std	Y+60, r25	; 0x3c
    2be0:	ad af       	std	Y+61, r26	; 0x3d
    2be2:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2be4:	6b ad       	ldd	r22, Y+59	; 0x3b
    2be6:	7c ad       	ldd	r23, Y+60	; 0x3c
    2be8:	8d ad       	ldd	r24, Y+61	; 0x3d
    2bea:	9e ad       	ldd	r25, Y+62	; 0x3e
    2bec:	2b ea       	ldi	r18, 0xAB	; 171
    2bee:	3a ea       	ldi	r19, 0xAA	; 170
    2bf0:	4a ea       	ldi	r20, 0xAA	; 170
    2bf2:	50 e4       	ldi	r21, 0x40	; 64
    2bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	cb 01       	movw	r24, r22
    2bfc:	8f ab       	std	Y+55, r24	; 0x37
    2bfe:	98 af       	std	Y+56, r25	; 0x38
    2c00:	a9 af       	std	Y+57, r26	; 0x39
    2c02:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2c04:	6f a9       	ldd	r22, Y+55	; 0x37
    2c06:	78 ad       	ldd	r23, Y+56	; 0x38
    2c08:	89 ad       	ldd	r24, Y+57	; 0x39
    2c0a:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c0c:	20 e0       	ldi	r18, 0x00	; 0
    2c0e:	30 e0       	ldi	r19, 0x00	; 0
    2c10:	40 e8       	ldi	r20, 0x80	; 128
    2c12:	5f e3       	ldi	r21, 0x3F	; 63
    2c14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c18:	88 23       	and	r24, r24
    2c1a:	1c f4       	brge	.+6      	; 0x2c22 <LCD_vInit+0x1e4>
		__ticks = 1;
    2c1c:	81 e0       	ldi	r24, 0x01	; 1
    2c1e:	8e ab       	std	Y+54, r24	; 0x36
    2c20:	91 c0       	rjmp	.+290    	; 0x2d44 <LCD_vInit+0x306>
	else if (__tmp > 255)
    2c22:	6f a9       	ldd	r22, Y+55	; 0x37
    2c24:	78 ad       	ldd	r23, Y+56	; 0x38
    2c26:	89 ad       	ldd	r24, Y+57	; 0x39
    2c28:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c2a:	20 e0       	ldi	r18, 0x00	; 0
    2c2c:	30 e0       	ldi	r19, 0x00	; 0
    2c2e:	4f e7       	ldi	r20, 0x7F	; 127
    2c30:	53 e4       	ldi	r21, 0x43	; 67
    2c32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c36:	18 16       	cp	r1, r24
    2c38:	0c f0       	brlt	.+2      	; 0x2c3c <LCD_vInit+0x1fe>
    2c3a:	7b c0       	rjmp	.+246    	; 0x2d32 <LCD_vInit+0x2f4>
	{
		_delay_ms(__us / 1000.0);
    2c3c:	6b ad       	ldd	r22, Y+59	; 0x3b
    2c3e:	7c ad       	ldd	r23, Y+60	; 0x3c
    2c40:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c42:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	4a e7       	ldi	r20, 0x7A	; 122
    2c4a:	54 e4       	ldi	r21, 0x44	; 68
    2c4c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c50:	dc 01       	movw	r26, r24
    2c52:	cb 01       	movw	r24, r22
    2c54:	8a ab       	std	Y+50, r24	; 0x32
    2c56:	9b ab       	std	Y+51, r25	; 0x33
    2c58:	ac ab       	std	Y+52, r26	; 0x34
    2c5a:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c5c:	6a a9       	ldd	r22, Y+50	; 0x32
    2c5e:	7b a9       	ldd	r23, Y+51	; 0x33
    2c60:	8c a9       	ldd	r24, Y+52	; 0x34
    2c62:	9d a9       	ldd	r25, Y+53	; 0x35
    2c64:	20 e0       	ldi	r18, 0x00	; 0
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	4a e7       	ldi	r20, 0x7A	; 122
    2c6a:	55 e4       	ldi	r21, 0x45	; 69
    2c6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c70:	dc 01       	movw	r26, r24
    2c72:	cb 01       	movw	r24, r22
    2c74:	8e a7       	std	Y+46, r24	; 0x2e
    2c76:	9f a7       	std	Y+47, r25	; 0x2f
    2c78:	a8 ab       	std	Y+48, r26	; 0x30
    2c7a:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2c7c:	6e a5       	ldd	r22, Y+46	; 0x2e
    2c7e:	7f a5       	ldd	r23, Y+47	; 0x2f
    2c80:	88 a9       	ldd	r24, Y+48	; 0x30
    2c82:	99 a9       	ldd	r25, Y+49	; 0x31
    2c84:	20 e0       	ldi	r18, 0x00	; 0
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	40 e8       	ldi	r20, 0x80	; 128
    2c8a:	5f e3       	ldi	r21, 0x3F	; 63
    2c8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c90:	88 23       	and	r24, r24
    2c92:	2c f4       	brge	.+10     	; 0x2c9e <LCD_vInit+0x260>
		__ticks = 1;
    2c94:	81 e0       	ldi	r24, 0x01	; 1
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	9d a7       	std	Y+45, r25	; 0x2d
    2c9a:	8c a7       	std	Y+44, r24	; 0x2c
    2c9c:	3f c0       	rjmp	.+126    	; 0x2d1c <LCD_vInit+0x2de>
	else if (__tmp > 65535)
    2c9e:	6e a5       	ldd	r22, Y+46	; 0x2e
    2ca0:	7f a5       	ldd	r23, Y+47	; 0x2f
    2ca2:	88 a9       	ldd	r24, Y+48	; 0x30
    2ca4:	99 a9       	ldd	r25, Y+49	; 0x31
    2ca6:	20 e0       	ldi	r18, 0x00	; 0
    2ca8:	3f ef       	ldi	r19, 0xFF	; 255
    2caa:	4f e7       	ldi	r20, 0x7F	; 127
    2cac:	57 e4       	ldi	r21, 0x47	; 71
    2cae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cb2:	18 16       	cp	r1, r24
    2cb4:	4c f5       	brge	.+82     	; 0x2d08 <LCD_vInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cb6:	6a a9       	ldd	r22, Y+50	; 0x32
    2cb8:	7b a9       	ldd	r23, Y+51	; 0x33
    2cba:	8c a9       	ldd	r24, Y+52	; 0x34
    2cbc:	9d a9       	ldd	r25, Y+53	; 0x35
    2cbe:	20 e0       	ldi	r18, 0x00	; 0
    2cc0:	30 e0       	ldi	r19, 0x00	; 0
    2cc2:	40 e2       	ldi	r20, 0x20	; 32
    2cc4:	51 e4       	ldi	r21, 0x41	; 65
    2cc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cca:	dc 01       	movw	r26, r24
    2ccc:	cb 01       	movw	r24, r22
    2cce:	bc 01       	movw	r22, r24
    2cd0:	cd 01       	movw	r24, r26
    2cd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd6:	dc 01       	movw	r26, r24
    2cd8:	cb 01       	movw	r24, r22
    2cda:	9d a7       	std	Y+45, r25	; 0x2d
    2cdc:	8c a7       	std	Y+44, r24	; 0x2c
    2cde:	0f c0       	rjmp	.+30     	; 0x2cfe <LCD_vInit+0x2c0>
    2ce0:	80 e9       	ldi	r24, 0x90	; 144
    2ce2:	91 e0       	ldi	r25, 0x01	; 1
    2ce4:	9b a7       	std	Y+43, r25	; 0x2b
    2ce6:	8a a7       	std	Y+42, r24	; 0x2a
    2ce8:	8a a5       	ldd	r24, Y+42	; 0x2a
    2cea:	9b a5       	ldd	r25, Y+43	; 0x2b
    2cec:	01 97       	sbiw	r24, 0x01	; 1
    2cee:	f1 f7       	brne	.-4      	; 0x2cec <LCD_vInit+0x2ae>
    2cf0:	9b a7       	std	Y+43, r25	; 0x2b
    2cf2:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cf4:	8c a5       	ldd	r24, Y+44	; 0x2c
    2cf6:	9d a5       	ldd	r25, Y+45	; 0x2d
    2cf8:	01 97       	sbiw	r24, 0x01	; 1
    2cfa:	9d a7       	std	Y+45, r25	; 0x2d
    2cfc:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cfe:	8c a5       	ldd	r24, Y+44	; 0x2c
    2d00:	9d a5       	ldd	r25, Y+45	; 0x2d
    2d02:	00 97       	sbiw	r24, 0x00	; 0
    2d04:	69 f7       	brne	.-38     	; 0x2ce0 <LCD_vInit+0x2a2>
    2d06:	24 c0       	rjmp	.+72     	; 0x2d50 <LCD_vInit+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d08:	6e a5       	ldd	r22, Y+46	; 0x2e
    2d0a:	7f a5       	ldd	r23, Y+47	; 0x2f
    2d0c:	88 a9       	ldd	r24, Y+48	; 0x30
    2d0e:	99 a9       	ldd	r25, Y+49	; 0x31
    2d10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d14:	dc 01       	movw	r26, r24
    2d16:	cb 01       	movw	r24, r22
    2d18:	9d a7       	std	Y+45, r25	; 0x2d
    2d1a:	8c a7       	std	Y+44, r24	; 0x2c
    2d1c:	8c a5       	ldd	r24, Y+44	; 0x2c
    2d1e:	9d a5       	ldd	r25, Y+45	; 0x2d
    2d20:	99 a7       	std	Y+41, r25	; 0x29
    2d22:	88 a7       	std	Y+40, r24	; 0x28
    2d24:	88 a5       	ldd	r24, Y+40	; 0x28
    2d26:	99 a5       	ldd	r25, Y+41	; 0x29
    2d28:	01 97       	sbiw	r24, 0x01	; 1
    2d2a:	f1 f7       	brne	.-4      	; 0x2d28 <LCD_vInit+0x2ea>
    2d2c:	99 a7       	std	Y+41, r25	; 0x29
    2d2e:	88 a7       	std	Y+40, r24	; 0x28
    2d30:	0f c0       	rjmp	.+30     	; 0x2d50 <LCD_vInit+0x312>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d32:	6f a9       	ldd	r22, Y+55	; 0x37
    2d34:	78 ad       	ldd	r23, Y+56	; 0x38
    2d36:	89 ad       	ldd	r24, Y+57	; 0x39
    2d38:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d3e:	dc 01       	movw	r26, r24
    2d40:	cb 01       	movw	r24, r22
    2d42:	8e ab       	std	Y+54, r24	; 0x36
    2d44:	8e a9       	ldd	r24, Y+54	; 0x36
    2d46:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d48:	8f a1       	ldd	r24, Y+39	; 0x27
    2d4a:	8a 95       	dec	r24
    2d4c:	f1 f7       	brne	.-4      	; 0x2d4a <LCD_vInit+0x30c>
    2d4e:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(45);
	//set display on/off control
	LCD_vSendCmnd(0b00001111);
    2d50:	8f e0       	ldi	r24, 0x0F	; 15
    2d52:	0e 94 ed 17 	call	0x2fda	; 0x2fda <LCD_vSendCmnd>
    2d56:	80 e0       	ldi	r24, 0x00	; 0
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	a4 e3       	ldi	r26, 0x34	; 52
    2d5c:	b2 e4       	ldi	r27, 0x42	; 66
    2d5e:	8b a3       	std	Y+35, r24	; 0x23
    2d60:	9c a3       	std	Y+36, r25	; 0x24
    2d62:	ad a3       	std	Y+37, r26	; 0x25
    2d64:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2d66:	6b a1       	ldd	r22, Y+35	; 0x23
    2d68:	7c a1       	ldd	r23, Y+36	; 0x24
    2d6a:	8d a1       	ldd	r24, Y+37	; 0x25
    2d6c:	9e a1       	ldd	r25, Y+38	; 0x26
    2d6e:	2b ea       	ldi	r18, 0xAB	; 171
    2d70:	3a ea       	ldi	r19, 0xAA	; 170
    2d72:	4a ea       	ldi	r20, 0xAA	; 170
    2d74:	50 e4       	ldi	r21, 0x40	; 64
    2d76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d7a:	dc 01       	movw	r26, r24
    2d7c:	cb 01       	movw	r24, r22
    2d7e:	8f 8f       	std	Y+31, r24	; 0x1f
    2d80:	98 a3       	std	Y+32, r25	; 0x20
    2d82:	a9 a3       	std	Y+33, r26	; 0x21
    2d84:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2d86:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2d88:	78 a1       	ldd	r23, Y+32	; 0x20
    2d8a:	89 a1       	ldd	r24, Y+33	; 0x21
    2d8c:	9a a1       	ldd	r25, Y+34	; 0x22
    2d8e:	20 e0       	ldi	r18, 0x00	; 0
    2d90:	30 e0       	ldi	r19, 0x00	; 0
    2d92:	40 e8       	ldi	r20, 0x80	; 128
    2d94:	5f e3       	ldi	r21, 0x3F	; 63
    2d96:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d9a:	88 23       	and	r24, r24
    2d9c:	1c f4       	brge	.+6      	; 0x2da4 <LCD_vInit+0x366>
		__ticks = 1;
    2d9e:	81 e0       	ldi	r24, 0x01	; 1
    2da0:	8e 8f       	std	Y+30, r24	; 0x1e
    2da2:	91 c0       	rjmp	.+290    	; 0x2ec6 <LCD_vInit+0x488>
	else if (__tmp > 255)
    2da4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2da6:	78 a1       	ldd	r23, Y+32	; 0x20
    2da8:	89 a1       	ldd	r24, Y+33	; 0x21
    2daa:	9a a1       	ldd	r25, Y+34	; 0x22
    2dac:	20 e0       	ldi	r18, 0x00	; 0
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	4f e7       	ldi	r20, 0x7F	; 127
    2db2:	53 e4       	ldi	r21, 0x43	; 67
    2db4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2db8:	18 16       	cp	r1, r24
    2dba:	0c f0       	brlt	.+2      	; 0x2dbe <LCD_vInit+0x380>
    2dbc:	7b c0       	rjmp	.+246    	; 0x2eb4 <LCD_vInit+0x476>
	{
		_delay_ms(__us / 1000.0);
    2dbe:	6b a1       	ldd	r22, Y+35	; 0x23
    2dc0:	7c a1       	ldd	r23, Y+36	; 0x24
    2dc2:	8d a1       	ldd	r24, Y+37	; 0x25
    2dc4:	9e a1       	ldd	r25, Y+38	; 0x26
    2dc6:	20 e0       	ldi	r18, 0x00	; 0
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	4a e7       	ldi	r20, 0x7A	; 122
    2dcc:	54 e4       	ldi	r21, 0x44	; 68
    2dce:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	cb 01       	movw	r24, r22
    2dd6:	8a 8f       	std	Y+26, r24	; 0x1a
    2dd8:	9b 8f       	std	Y+27, r25	; 0x1b
    2dda:	ac 8f       	std	Y+28, r26	; 0x1c
    2ddc:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dde:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2de0:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2de2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2de4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2de6:	20 e0       	ldi	r18, 0x00	; 0
    2de8:	30 e0       	ldi	r19, 0x00	; 0
    2dea:	4a e7       	ldi	r20, 0x7A	; 122
    2dec:	55 e4       	ldi	r21, 0x45	; 69
    2dee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df2:	dc 01       	movw	r26, r24
    2df4:	cb 01       	movw	r24, r22
    2df6:	8e 8b       	std	Y+22, r24	; 0x16
    2df8:	9f 8b       	std	Y+23, r25	; 0x17
    2dfa:	a8 8f       	std	Y+24, r26	; 0x18
    2dfc:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2dfe:	6e 89       	ldd	r22, Y+22	; 0x16
    2e00:	7f 89       	ldd	r23, Y+23	; 0x17
    2e02:	88 8d       	ldd	r24, Y+24	; 0x18
    2e04:	99 8d       	ldd	r25, Y+25	; 0x19
    2e06:	20 e0       	ldi	r18, 0x00	; 0
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	40 e8       	ldi	r20, 0x80	; 128
    2e0c:	5f e3       	ldi	r21, 0x3F	; 63
    2e0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e12:	88 23       	and	r24, r24
    2e14:	2c f4       	brge	.+10     	; 0x2e20 <LCD_vInit+0x3e2>
		__ticks = 1;
    2e16:	81 e0       	ldi	r24, 0x01	; 1
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	9d 8b       	std	Y+21, r25	; 0x15
    2e1c:	8c 8b       	std	Y+20, r24	; 0x14
    2e1e:	3f c0       	rjmp	.+126    	; 0x2e9e <LCD_vInit+0x460>
	else if (__tmp > 65535)
    2e20:	6e 89       	ldd	r22, Y+22	; 0x16
    2e22:	7f 89       	ldd	r23, Y+23	; 0x17
    2e24:	88 8d       	ldd	r24, Y+24	; 0x18
    2e26:	99 8d       	ldd	r25, Y+25	; 0x19
    2e28:	20 e0       	ldi	r18, 0x00	; 0
    2e2a:	3f ef       	ldi	r19, 0xFF	; 255
    2e2c:	4f e7       	ldi	r20, 0x7F	; 127
    2e2e:	57 e4       	ldi	r21, 0x47	; 71
    2e30:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e34:	18 16       	cp	r1, r24
    2e36:	4c f5       	brge	.+82     	; 0x2e8a <LCD_vInit+0x44c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e38:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2e3a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2e3c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2e3e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2e40:	20 e0       	ldi	r18, 0x00	; 0
    2e42:	30 e0       	ldi	r19, 0x00	; 0
    2e44:	40 e2       	ldi	r20, 0x20	; 32
    2e46:	51 e4       	ldi	r21, 0x41	; 65
    2e48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e4c:	dc 01       	movw	r26, r24
    2e4e:	cb 01       	movw	r24, r22
    2e50:	bc 01       	movw	r22, r24
    2e52:	cd 01       	movw	r24, r26
    2e54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e58:	dc 01       	movw	r26, r24
    2e5a:	cb 01       	movw	r24, r22
    2e5c:	9d 8b       	std	Y+21, r25	; 0x15
    2e5e:	8c 8b       	std	Y+20, r24	; 0x14
    2e60:	0f c0       	rjmp	.+30     	; 0x2e80 <LCD_vInit+0x442>
    2e62:	80 e9       	ldi	r24, 0x90	; 144
    2e64:	91 e0       	ldi	r25, 0x01	; 1
    2e66:	9b 8b       	std	Y+19, r25	; 0x13
    2e68:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e6a:	8a 89       	ldd	r24, Y+18	; 0x12
    2e6c:	9b 89       	ldd	r25, Y+19	; 0x13
    2e6e:	01 97       	sbiw	r24, 0x01	; 1
    2e70:	f1 f7       	brne	.-4      	; 0x2e6e <LCD_vInit+0x430>
    2e72:	9b 8b       	std	Y+19, r25	; 0x13
    2e74:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e76:	8c 89       	ldd	r24, Y+20	; 0x14
    2e78:	9d 89       	ldd	r25, Y+21	; 0x15
    2e7a:	01 97       	sbiw	r24, 0x01	; 1
    2e7c:	9d 8b       	std	Y+21, r25	; 0x15
    2e7e:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e80:	8c 89       	ldd	r24, Y+20	; 0x14
    2e82:	9d 89       	ldd	r25, Y+21	; 0x15
    2e84:	00 97       	sbiw	r24, 0x00	; 0
    2e86:	69 f7       	brne	.-38     	; 0x2e62 <LCD_vInit+0x424>
    2e88:	24 c0       	rjmp	.+72     	; 0x2ed2 <LCD_vInit+0x494>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e8a:	6e 89       	ldd	r22, Y+22	; 0x16
    2e8c:	7f 89       	ldd	r23, Y+23	; 0x17
    2e8e:	88 8d       	ldd	r24, Y+24	; 0x18
    2e90:	99 8d       	ldd	r25, Y+25	; 0x19
    2e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e96:	dc 01       	movw	r26, r24
    2e98:	cb 01       	movw	r24, r22
    2e9a:	9d 8b       	std	Y+21, r25	; 0x15
    2e9c:	8c 8b       	std	Y+20, r24	; 0x14
    2e9e:	8c 89       	ldd	r24, Y+20	; 0x14
    2ea0:	9d 89       	ldd	r25, Y+21	; 0x15
    2ea2:	99 8b       	std	Y+17, r25	; 0x11
    2ea4:	88 8b       	std	Y+16, r24	; 0x10
    2ea6:	88 89       	ldd	r24, Y+16	; 0x10
    2ea8:	99 89       	ldd	r25, Y+17	; 0x11
    2eaa:	01 97       	sbiw	r24, 0x01	; 1
    2eac:	f1 f7       	brne	.-4      	; 0x2eaa <LCD_vInit+0x46c>
    2eae:	99 8b       	std	Y+17, r25	; 0x11
    2eb0:	88 8b       	std	Y+16, r24	; 0x10
    2eb2:	0f c0       	rjmp	.+30     	; 0x2ed2 <LCD_vInit+0x494>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2eb4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2eb6:	78 a1       	ldd	r23, Y+32	; 0x20
    2eb8:	89 a1       	ldd	r24, Y+33	; 0x21
    2eba:	9a a1       	ldd	r25, Y+34	; 0x22
    2ebc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec0:	dc 01       	movw	r26, r24
    2ec2:	cb 01       	movw	r24, r22
    2ec4:	8e 8f       	std	Y+30, r24	; 0x1e
    2ec6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ec8:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2eca:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ecc:	8a 95       	dec	r24
    2ece:	f1 f7       	brne	.-4      	; 0x2ecc <LCD_vInit+0x48e>
    2ed0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(45);
	//set display clear
	LCD_vSendCmnd(0b00000001);
    2ed2:	81 e0       	ldi	r24, 0x01	; 1
    2ed4:	0e 94 ed 17 	call	0x2fda	; 0x2fda <LCD_vSendCmnd>
    2ed8:	80 e0       	ldi	r24, 0x00	; 0
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	a0 e0       	ldi	r26, 0x00	; 0
    2ede:	b0 e4       	ldi	r27, 0x40	; 64
    2ee0:	8b 87       	std	Y+11, r24	; 0x0b
    2ee2:	9c 87       	std	Y+12, r25	; 0x0c
    2ee4:	ad 87       	std	Y+13, r26	; 0x0d
    2ee6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ee8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eea:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eec:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eee:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ef0:	20 e0       	ldi	r18, 0x00	; 0
    2ef2:	30 e0       	ldi	r19, 0x00	; 0
    2ef4:	4a e7       	ldi	r20, 0x7A	; 122
    2ef6:	55 e4       	ldi	r21, 0x45	; 69
    2ef8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2efc:	dc 01       	movw	r26, r24
    2efe:	cb 01       	movw	r24, r22
    2f00:	8f 83       	std	Y+7, r24	; 0x07
    2f02:	98 87       	std	Y+8, r25	; 0x08
    2f04:	a9 87       	std	Y+9, r26	; 0x09
    2f06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f08:	6f 81       	ldd	r22, Y+7	; 0x07
    2f0a:	78 85       	ldd	r23, Y+8	; 0x08
    2f0c:	89 85       	ldd	r24, Y+9	; 0x09
    2f0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f10:	20 e0       	ldi	r18, 0x00	; 0
    2f12:	30 e0       	ldi	r19, 0x00	; 0
    2f14:	40 e8       	ldi	r20, 0x80	; 128
    2f16:	5f e3       	ldi	r21, 0x3F	; 63
    2f18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f1c:	88 23       	and	r24, r24
    2f1e:	2c f4       	brge	.+10     	; 0x2f2a <LCD_vInit+0x4ec>
		__ticks = 1;
    2f20:	81 e0       	ldi	r24, 0x01	; 1
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	9e 83       	std	Y+6, r25	; 0x06
    2f26:	8d 83       	std	Y+5, r24	; 0x05
    2f28:	3f c0       	rjmp	.+126    	; 0x2fa8 <LCD_vInit+0x56a>
	else if (__tmp > 65535)
    2f2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f2c:	78 85       	ldd	r23, Y+8	; 0x08
    2f2e:	89 85       	ldd	r24, Y+9	; 0x09
    2f30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f32:	20 e0       	ldi	r18, 0x00	; 0
    2f34:	3f ef       	ldi	r19, 0xFF	; 255
    2f36:	4f e7       	ldi	r20, 0x7F	; 127
    2f38:	57 e4       	ldi	r21, 0x47	; 71
    2f3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f3e:	18 16       	cp	r1, r24
    2f40:	4c f5       	brge	.+82     	; 0x2f94 <LCD_vInit+0x556>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f42:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f44:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f46:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f48:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f4a:	20 e0       	ldi	r18, 0x00	; 0
    2f4c:	30 e0       	ldi	r19, 0x00	; 0
    2f4e:	40 e2       	ldi	r20, 0x20	; 32
    2f50:	51 e4       	ldi	r21, 0x41	; 65
    2f52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f56:	dc 01       	movw	r26, r24
    2f58:	cb 01       	movw	r24, r22
    2f5a:	bc 01       	movw	r22, r24
    2f5c:	cd 01       	movw	r24, r26
    2f5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f62:	dc 01       	movw	r26, r24
    2f64:	cb 01       	movw	r24, r22
    2f66:	9e 83       	std	Y+6, r25	; 0x06
    2f68:	8d 83       	std	Y+5, r24	; 0x05
    2f6a:	0f c0       	rjmp	.+30     	; 0x2f8a <LCD_vInit+0x54c>
    2f6c:	80 e9       	ldi	r24, 0x90	; 144
    2f6e:	91 e0       	ldi	r25, 0x01	; 1
    2f70:	9c 83       	std	Y+4, r25	; 0x04
    2f72:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f74:	8b 81       	ldd	r24, Y+3	; 0x03
    2f76:	9c 81       	ldd	r25, Y+4	; 0x04
    2f78:	01 97       	sbiw	r24, 0x01	; 1
    2f7a:	f1 f7       	brne	.-4      	; 0x2f78 <LCD_vInit+0x53a>
    2f7c:	9c 83       	std	Y+4, r25	; 0x04
    2f7e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f80:	8d 81       	ldd	r24, Y+5	; 0x05
    2f82:	9e 81       	ldd	r25, Y+6	; 0x06
    2f84:	01 97       	sbiw	r24, 0x01	; 1
    2f86:	9e 83       	std	Y+6, r25	; 0x06
    2f88:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f8e:	00 97       	sbiw	r24, 0x00	; 0
    2f90:	69 f7       	brne	.-38     	; 0x2f6c <LCD_vInit+0x52e>
    2f92:	14 c0       	rjmp	.+40     	; 0x2fbc <LCD_vInit+0x57e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f94:	6f 81       	ldd	r22, Y+7	; 0x07
    2f96:	78 85       	ldd	r23, Y+8	; 0x08
    2f98:	89 85       	ldd	r24, Y+9	; 0x09
    2f9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa0:	dc 01       	movw	r26, r24
    2fa2:	cb 01       	movw	r24, r22
    2fa4:	9e 83       	std	Y+6, r25	; 0x06
    2fa6:	8d 83       	std	Y+5, r24	; 0x05
    2fa8:	8d 81       	ldd	r24, Y+5	; 0x05
    2faa:	9e 81       	ldd	r25, Y+6	; 0x06
    2fac:	9a 83       	std	Y+2, r25	; 0x02
    2fae:	89 83       	std	Y+1, r24	; 0x01
    2fb0:	89 81       	ldd	r24, Y+1	; 0x01
    2fb2:	9a 81       	ldd	r25, Y+2	; 0x02
    2fb4:	01 97       	sbiw	r24, 0x01	; 1
    2fb6:	f1 f7       	brne	.-4      	; 0x2fb4 <LCD_vInit+0x576>
    2fb8:	9a 83       	std	Y+2, r25	; 0x02
    2fba:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	//set entry mode
	LCD_vSendCmnd(0b00000110);
    2fbc:	86 e0       	ldi	r24, 0x06	; 6
    2fbe:	0e 94 ed 17 	call	0x2fda	; 0x2fda <LCD_vSendCmnd>

//#endif
}
    2fc2:	c4 5b       	subi	r28, 0xB4	; 180
    2fc4:	df 4f       	sbci	r29, 0xFF	; 255
    2fc6:	0f b6       	in	r0, 0x3f	; 63
    2fc8:	f8 94       	cli
    2fca:	de bf       	out	0x3e, r29	; 62
    2fcc:	0f be       	out	0x3f, r0	; 63
    2fce:	cd bf       	out	0x3d, r28	; 61
    2fd0:	cf 91       	pop	r28
    2fd2:	df 91       	pop	r29
    2fd4:	1f 91       	pop	r17
    2fd6:	0f 91       	pop	r16
    2fd8:	08 95       	ret

00002fda <LCD_vSendCmnd>:

void LCD_vSendCmnd(uint8 cmnd){
    2fda:	df 93       	push	r29
    2fdc:	cf 93       	push	r28
    2fde:	0f 92       	push	r0
    2fe0:	cd b7       	in	r28, 0x3d	; 61
    2fe2:	de b7       	in	r29, 0x3e	; 62
    2fe4:	89 83       	std	Y+1, r24	; 0x01
	DIO_WriteChannel(RS, LOW);
    2fe6:	83 e0       	ldi	r24, 0x03	; 3
    2fe8:	60 e0       	ldi	r22, 0x00	; 0
    2fea:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_WriteChannel>
//#if     LCD_MODE == 4
	vPriWriteHalfPort(cmnd >> 4);
    2fee:	89 81       	ldd	r24, Y+1	; 0x01
    2ff0:	82 95       	swap	r24
    2ff2:	8f 70       	andi	r24, 0x0F	; 15
    2ff4:	0e 94 17 19 	call	0x322e	; 0x322e <vPriWriteHalfPort>
	vPriEnable();
    2ff8:	0e 94 67 19 	call	0x32ce	; 0x32ce <vPriEnable>
	vPriWriteHalfPort(cmnd);
    2ffc:	89 81       	ldd	r24, Y+1	; 0x01
    2ffe:	0e 94 17 19 	call	0x322e	; 0x322e <vPriWriteHalfPort>
	vPriEnable();
    3002:	0e 94 67 19 	call	0x32ce	; 0x32ce <vPriEnable>
//#endif

}
    3006:	0f 90       	pop	r0
    3008:	cf 91       	pop	r28
    300a:	df 91       	pop	r29
    300c:	08 95       	ret

0000300e <LCD_vSendData>:

void LCD_vSendData(uint8 data){
    300e:	df 93       	push	r29
    3010:	cf 93       	push	r28
    3012:	0f 92       	push	r0
    3014:	cd b7       	in	r28, 0x3d	; 61
    3016:	de b7       	in	r29, 0x3e	; 62
    3018:	89 83       	std	Y+1, r24	; 0x01
	DIO_WriteChannel(RS, HIGH);
    301a:	83 e0       	ldi	r24, 0x03	; 3
    301c:	61 e0       	ldi	r22, 0x01	; 1
    301e:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_WriteChannel>
//#if     LCD_MODE == 4
	vPriWriteHalfPort(data >> 4);
    3022:	89 81       	ldd	r24, Y+1	; 0x01
    3024:	82 95       	swap	r24
    3026:	8f 70       	andi	r24, 0x0F	; 15
    3028:	0e 94 17 19 	call	0x322e	; 0x322e <vPriWriteHalfPort>
	vPriEnable();
    302c:	0e 94 67 19 	call	0x32ce	; 0x32ce <vPriEnable>
	vPriWriteHalfPort(data);
    3030:	89 81       	ldd	r24, Y+1	; 0x01
    3032:	0e 94 17 19 	call	0x322e	; 0x322e <vPriWriteHalfPort>
	vPriEnable();
    3036:	0e 94 67 19 	call	0x32ce	; 0x32ce <vPriEnable>
//#endif
}
    303a:	0f 90       	pop	r0
    303c:	cf 91       	pop	r28
    303e:	df 91       	pop	r29
    3040:	08 95       	ret

00003042 <LCD_vSendString>:

void LCD_vSendString(uint8* str){
    3042:	df 93       	push	r29
    3044:	cf 93       	push	r28
    3046:	00 d0       	rcall	.+0      	; 0x3048 <LCD_vSendString+0x6>
    3048:	0f 92       	push	r0
    304a:	cd b7       	in	r28, 0x3d	; 61
    304c:	de b7       	in	r29, 0x3e	; 62
    304e:	9b 83       	std	Y+3, r25	; 0x03
    3050:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3052:	19 82       	std	Y+1, r1	; 0x01
    3054:	0e c0       	rjmp	.+28     	; 0x3072 <LCD_vSendString+0x30>
	while (str[i] != '\0'){
		LCD_vSendData(str[i]);
    3056:	89 81       	ldd	r24, Y+1	; 0x01
    3058:	28 2f       	mov	r18, r24
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	8a 81       	ldd	r24, Y+2	; 0x02
    305e:	9b 81       	ldd	r25, Y+3	; 0x03
    3060:	fc 01       	movw	r30, r24
    3062:	e2 0f       	add	r30, r18
    3064:	f3 1f       	adc	r31, r19
    3066:	80 81       	ld	r24, Z
    3068:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vSendData>
		i++;
    306c:	89 81       	ldd	r24, Y+1	; 0x01
    306e:	8f 5f       	subi	r24, 0xFF	; 255
    3070:	89 83       	std	Y+1, r24	; 0x01
//#endif
}

void LCD_vSendString(uint8* str){
	uint8 i = 0;
	while (str[i] != '\0'){
    3072:	89 81       	ldd	r24, Y+1	; 0x01
    3074:	28 2f       	mov	r18, r24
    3076:	30 e0       	ldi	r19, 0x00	; 0
    3078:	8a 81       	ldd	r24, Y+2	; 0x02
    307a:	9b 81       	ldd	r25, Y+3	; 0x03
    307c:	fc 01       	movw	r30, r24
    307e:	e2 0f       	add	r30, r18
    3080:	f3 1f       	adc	r31, r19
    3082:	80 81       	ld	r24, Z
    3084:	88 23       	and	r24, r24
    3086:	39 f7       	brne	.-50     	; 0x3056 <LCD_vSendString+0x14>
		LCD_vSendData(str[i]);
		i++;
	}
}
    3088:	0f 90       	pop	r0
    308a:	0f 90       	pop	r0
    308c:	0f 90       	pop	r0
    308e:	cf 91       	pop	r28
    3090:	df 91       	pop	r29
    3092:	08 95       	ret

00003094 <LCD_vSendInt>:

void LCD_vSendInt(sint32 num){
    3094:	ef 92       	push	r14
    3096:	ff 92       	push	r15
    3098:	0f 93       	push	r16
    309a:	1f 93       	push	r17
    309c:	df 93       	push	r29
    309e:	cf 93       	push	r28
    30a0:	cd b7       	in	r28, 0x3d	; 61
    30a2:	de b7       	in	r29, 0x3e	; 62
    30a4:	28 97       	sbiw	r28, 0x08	; 8
    30a6:	0f b6       	in	r0, 0x3f	; 63
    30a8:	f8 94       	cli
    30aa:	de bf       	out	0x3e, r29	; 62
    30ac:	0f be       	out	0x3f, r0	; 63
    30ae:	cd bf       	out	0x3d, r28	; 61
    30b0:	6d 83       	std	Y+5, r22	; 0x05
    30b2:	7e 83       	std	Y+6, r23	; 0x06
    30b4:	8f 83       	std	Y+7, r24	; 0x07
    30b6:	98 87       	std	Y+8, r25	; 0x08
	sint32 out = 1;
    30b8:	81 e0       	ldi	r24, 0x01	; 1
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	a0 e0       	ldi	r26, 0x00	; 0
    30be:	b0 e0       	ldi	r27, 0x00	; 0
    30c0:	89 83       	std	Y+1, r24	; 0x01
    30c2:	9a 83       	std	Y+2, r25	; 0x02
    30c4:	ab 83       	std	Y+3, r26	; 0x03
    30c6:	bc 83       	std	Y+4, r27	; 0x04
	if(num < 0){
    30c8:	8d 81       	ldd	r24, Y+5	; 0x05
    30ca:	9e 81       	ldd	r25, Y+6	; 0x06
    30cc:	af 81       	ldd	r26, Y+7	; 0x07
    30ce:	b8 85       	ldd	r27, Y+8	; 0x08
    30d0:	bb 23       	and	r27, r27
    30d2:	0c f0       	brlt	.+2      	; 0x30d6 <LCD_vSendInt+0x42>
    30d4:	49 c0       	rjmp	.+146    	; 0x3168 <LCD_vSendInt+0xd4>
		LCD_vSendData('-');
    30d6:	8d e2       	ldi	r24, 0x2D	; 45
    30d8:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vSendData>
		num *= -1;
    30dc:	8d 81       	ldd	r24, Y+5	; 0x05
    30de:	9e 81       	ldd	r25, Y+6	; 0x06
    30e0:	af 81       	ldd	r26, Y+7	; 0x07
    30e2:	b8 85       	ldd	r27, Y+8	; 0x08
    30e4:	b0 95       	com	r27
    30e6:	a0 95       	com	r26
    30e8:	90 95       	com	r25
    30ea:	81 95       	neg	r24
    30ec:	9f 4f       	sbci	r25, 0xFF	; 255
    30ee:	af 4f       	sbci	r26, 0xFF	; 255
    30f0:	bf 4f       	sbci	r27, 0xFF	; 255
    30f2:	8d 83       	std	Y+5, r24	; 0x05
    30f4:	9e 83       	std	Y+6, r25	; 0x06
    30f6:	af 83       	std	Y+7, r26	; 0x07
    30f8:	b8 87       	std	Y+8, r27	; 0x08
    30fa:	36 c0       	rjmp	.+108    	; 0x3168 <LCD_vSendInt+0xd4>
	}

	while (num > 0){
		out = ((out*10) + (num%10));
    30fc:	89 81       	ldd	r24, Y+1	; 0x01
    30fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3100:	ab 81       	ldd	r26, Y+3	; 0x03
    3102:	bc 81       	ldd	r27, Y+4	; 0x04
    3104:	2a e0       	ldi	r18, 0x0A	; 10
    3106:	30 e0       	ldi	r19, 0x00	; 0
    3108:	40 e0       	ldi	r20, 0x00	; 0
    310a:	50 e0       	ldi	r21, 0x00	; 0
    310c:	bc 01       	movw	r22, r24
    310e:	cd 01       	movw	r24, r26
    3110:	0e 94 f9 23 	call	0x47f2	; 0x47f2 <__mulsi3>
    3114:	7b 01       	movw	r14, r22
    3116:	8c 01       	movw	r16, r24
    3118:	8d 81       	ldd	r24, Y+5	; 0x05
    311a:	9e 81       	ldd	r25, Y+6	; 0x06
    311c:	af 81       	ldd	r26, Y+7	; 0x07
    311e:	b8 85       	ldd	r27, Y+8	; 0x08
    3120:	2a e0       	ldi	r18, 0x0A	; 10
    3122:	30 e0       	ldi	r19, 0x00	; 0
    3124:	40 e0       	ldi	r20, 0x00	; 0
    3126:	50 e0       	ldi	r21, 0x00	; 0
    3128:	bc 01       	movw	r22, r24
    312a:	cd 01       	movw	r24, r26
    312c:	0e 94 6d 24 	call	0x48da	; 0x48da <__divmodsi4>
    3130:	dc 01       	movw	r26, r24
    3132:	cb 01       	movw	r24, r22
    3134:	8e 0d       	add	r24, r14
    3136:	9f 1d       	adc	r25, r15
    3138:	a0 1f       	adc	r26, r16
    313a:	b1 1f       	adc	r27, r17
    313c:	89 83       	std	Y+1, r24	; 0x01
    313e:	9a 83       	std	Y+2, r25	; 0x02
    3140:	ab 83       	std	Y+3, r26	; 0x03
    3142:	bc 83       	std	Y+4, r27	; 0x04
		num /= 10;
    3144:	8d 81       	ldd	r24, Y+5	; 0x05
    3146:	9e 81       	ldd	r25, Y+6	; 0x06
    3148:	af 81       	ldd	r26, Y+7	; 0x07
    314a:	b8 85       	ldd	r27, Y+8	; 0x08
    314c:	2a e0       	ldi	r18, 0x0A	; 10
    314e:	30 e0       	ldi	r19, 0x00	; 0
    3150:	40 e0       	ldi	r20, 0x00	; 0
    3152:	50 e0       	ldi	r21, 0x00	; 0
    3154:	bc 01       	movw	r22, r24
    3156:	cd 01       	movw	r24, r26
    3158:	0e 94 6d 24 	call	0x48da	; 0x48da <__divmodsi4>
    315c:	da 01       	movw	r26, r20
    315e:	c9 01       	movw	r24, r18
    3160:	8d 83       	std	Y+5, r24	; 0x05
    3162:	9e 83       	std	Y+6, r25	; 0x06
    3164:	af 83       	std	Y+7, r26	; 0x07
    3166:	b8 87       	std	Y+8, r27	; 0x08
	if(num < 0){
		LCD_vSendData('-');
		num *= -1;
	}

	while (num > 0){
    3168:	8d 81       	ldd	r24, Y+5	; 0x05
    316a:	9e 81       	ldd	r25, Y+6	; 0x06
    316c:	af 81       	ldd	r26, Y+7	; 0x07
    316e:	b8 85       	ldd	r27, Y+8	; 0x08
    3170:	18 16       	cp	r1, r24
    3172:	19 06       	cpc	r1, r25
    3174:	1a 06       	cpc	r1, r26
    3176:	1b 06       	cpc	r1, r27
    3178:	0c f2       	brlt	.-126    	; 0x30fc <LCD_vSendInt+0x68>
    317a:	23 c0       	rjmp	.+70     	; 0x31c2 <LCD_vSendInt+0x12e>
		out = ((out*10) + (num%10));
		num /= 10;
	}

	while (out > 1){
		LCD_vSendData(((out%10)+48));
    317c:	89 81       	ldd	r24, Y+1	; 0x01
    317e:	9a 81       	ldd	r25, Y+2	; 0x02
    3180:	ab 81       	ldd	r26, Y+3	; 0x03
    3182:	bc 81       	ldd	r27, Y+4	; 0x04
    3184:	2a e0       	ldi	r18, 0x0A	; 10
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	40 e0       	ldi	r20, 0x00	; 0
    318a:	50 e0       	ldi	r21, 0x00	; 0
    318c:	bc 01       	movw	r22, r24
    318e:	cd 01       	movw	r24, r26
    3190:	0e 94 6d 24 	call	0x48da	; 0x48da <__divmodsi4>
    3194:	dc 01       	movw	r26, r24
    3196:	cb 01       	movw	r24, r22
    3198:	80 5d       	subi	r24, 0xD0	; 208
    319a:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vSendData>
		out /= 10;
    319e:	89 81       	ldd	r24, Y+1	; 0x01
    31a0:	9a 81       	ldd	r25, Y+2	; 0x02
    31a2:	ab 81       	ldd	r26, Y+3	; 0x03
    31a4:	bc 81       	ldd	r27, Y+4	; 0x04
    31a6:	2a e0       	ldi	r18, 0x0A	; 10
    31a8:	30 e0       	ldi	r19, 0x00	; 0
    31aa:	40 e0       	ldi	r20, 0x00	; 0
    31ac:	50 e0       	ldi	r21, 0x00	; 0
    31ae:	bc 01       	movw	r22, r24
    31b0:	cd 01       	movw	r24, r26
    31b2:	0e 94 6d 24 	call	0x48da	; 0x48da <__divmodsi4>
    31b6:	da 01       	movw	r26, r20
    31b8:	c9 01       	movw	r24, r18
    31ba:	89 83       	std	Y+1, r24	; 0x01
    31bc:	9a 83       	std	Y+2, r25	; 0x02
    31be:	ab 83       	std	Y+3, r26	; 0x03
    31c0:	bc 83       	std	Y+4, r27	; 0x04
	while (num > 0){
		out = ((out*10) + (num%10));
		num /= 10;
	}

	while (out > 1){
    31c2:	89 81       	ldd	r24, Y+1	; 0x01
    31c4:	9a 81       	ldd	r25, Y+2	; 0x02
    31c6:	ab 81       	ldd	r26, Y+3	; 0x03
    31c8:	bc 81       	ldd	r27, Y+4	; 0x04
    31ca:	82 30       	cpi	r24, 0x02	; 2
    31cc:	91 05       	cpc	r25, r1
    31ce:	a1 05       	cpc	r26, r1
    31d0:	b1 05       	cpc	r27, r1
    31d2:	a4 f6       	brge	.-88     	; 0x317c <LCD_vSendInt+0xe8>
		LCD_vSendData(((out%10)+48));
		out /= 10;
	}
}
    31d4:	28 96       	adiw	r28, 0x08	; 8
    31d6:	0f b6       	in	r0, 0x3f	; 63
    31d8:	f8 94       	cli
    31da:	de bf       	out	0x3e, r29	; 62
    31dc:	0f be       	out	0x3f, r0	; 63
    31de:	cd bf       	out	0x3d, r28	; 61
    31e0:	cf 91       	pop	r28
    31e2:	df 91       	pop	r29
    31e4:	1f 91       	pop	r17
    31e6:	0f 91       	pop	r16
    31e8:	ff 90       	pop	r15
    31ea:	ef 90       	pop	r14
    31ec:	08 95       	ret

000031ee <LCD_vGoTo>:

void LCD_vGoTo(uint8 row , uint8 col)
{
    31ee:	df 93       	push	r29
    31f0:	cf 93       	push	r28
    31f2:	00 d0       	rcall	.+0      	; 0x31f4 <LCD_vGoTo+0x6>
    31f4:	00 d0       	rcall	.+0      	; 0x31f6 <LCD_vGoTo+0x8>
    31f6:	cd b7       	in	r28, 0x3d	; 61
    31f8:	de b7       	in	r29, 0x3e	; 62
    31fa:	8b 83       	std	Y+3, r24	; 0x03
    31fc:	6c 83       	std	Y+4, r22	; 0x04
	uint8 pos[2] = {0x80 , 0xc0};
    31fe:	80 e8       	ldi	r24, 0x80	; 128
    3200:	89 83       	std	Y+1, r24	; 0x01
    3202:	80 ec       	ldi	r24, 0xC0	; 192
    3204:	8a 83       	std	Y+2, r24	; 0x02

	LCD_vSendCmnd(pos[row]+col);
    3206:	8b 81       	ldd	r24, Y+3	; 0x03
    3208:	28 2f       	mov	r18, r24
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	ce 01       	movw	r24, r28
    320e:	01 96       	adiw	r24, 0x01	; 1
    3210:	fc 01       	movw	r30, r24
    3212:	e2 0f       	add	r30, r18
    3214:	f3 1f       	adc	r31, r19
    3216:	90 81       	ld	r25, Z
    3218:	8c 81       	ldd	r24, Y+4	; 0x04
    321a:	89 0f       	add	r24, r25
    321c:	0e 94 ed 17 	call	0x2fda	; 0x2fda <LCD_vSendCmnd>
}
    3220:	0f 90       	pop	r0
    3222:	0f 90       	pop	r0
    3224:	0f 90       	pop	r0
    3226:	0f 90       	pop	r0
    3228:	cf 91       	pop	r28
    322a:	df 91       	pop	r29
    322c:	08 95       	ret

0000322e <vPriWriteHalfPort>:


static void vPriWriteHalfPort(uint8 value){
    322e:	df 93       	push	r29
    3230:	cf 93       	push	r28
    3232:	0f 92       	push	r0
    3234:	cd b7       	in	r28, 0x3d	; 61
    3236:	de b7       	in	r29, 0x3e	; 62
    3238:	89 83       	std	Y+1, r24	; 0x01
	if(GET_BIT(value, 0) == 1){
    323a:	89 81       	ldd	r24, Y+1	; 0x01
    323c:	88 2f       	mov	r24, r24
    323e:	90 e0       	ldi	r25, 0x00	; 0
    3240:	81 70       	andi	r24, 0x01	; 1
    3242:	90 70       	andi	r25, 0x00	; 0
    3244:	88 23       	and	r24, r24
    3246:	29 f0       	breq	.+10     	; 0x3252 <vPriWriteHalfPort+0x24>
		DIO_WriteChannel(D4, HIGH);
    3248:	88 e0       	ldi	r24, 0x08	; 8
    324a:	61 e0       	ldi	r22, 0x01	; 1
    324c:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_WriteChannel>
    3250:	04 c0       	rjmp	.+8      	; 0x325a <vPriWriteHalfPort+0x2c>
	}
	else{
		DIO_WriteChannel(D4, LOW);
    3252:	88 e0       	ldi	r24, 0x08	; 8
    3254:	60 e0       	ldi	r22, 0x00	; 0
    3256:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_WriteChannel>
	}
	if(GET_BIT(value, 1) == 1){
    325a:	89 81       	ldd	r24, Y+1	; 0x01
    325c:	86 95       	lsr	r24
    325e:	88 2f       	mov	r24, r24
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	81 70       	andi	r24, 0x01	; 1
    3264:	90 70       	andi	r25, 0x00	; 0
    3266:	88 23       	and	r24, r24
    3268:	29 f0       	breq	.+10     	; 0x3274 <vPriWriteHalfPort+0x46>
		DIO_WriteChannel(D5, HIGH);
    326a:	89 e0       	ldi	r24, 0x09	; 9
    326c:	61 e0       	ldi	r22, 0x01	; 1
    326e:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_WriteChannel>
    3272:	04 c0       	rjmp	.+8      	; 0x327c <vPriWriteHalfPort+0x4e>
	}
	else{
		DIO_WriteChannel(D5, LOW);
    3274:	89 e0       	ldi	r24, 0x09	; 9
    3276:	60 e0       	ldi	r22, 0x00	; 0
    3278:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_WriteChannel>
	}
	if(GET_BIT(value, 2) == 1){
    327c:	89 81       	ldd	r24, Y+1	; 0x01
    327e:	86 95       	lsr	r24
    3280:	86 95       	lsr	r24
    3282:	88 2f       	mov	r24, r24
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	81 70       	andi	r24, 0x01	; 1
    3288:	90 70       	andi	r25, 0x00	; 0
    328a:	88 23       	and	r24, r24
    328c:	29 f0       	breq	.+10     	; 0x3298 <vPriWriteHalfPort+0x6a>
		DIO_WriteChannel(D6, HIGH);
    328e:	8a e0       	ldi	r24, 0x0A	; 10
    3290:	61 e0       	ldi	r22, 0x01	; 1
    3292:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_WriteChannel>
    3296:	04 c0       	rjmp	.+8      	; 0x32a0 <vPriWriteHalfPort+0x72>
	}
	else{
		DIO_WriteChannel(D6, LOW);
    3298:	8a e0       	ldi	r24, 0x0A	; 10
    329a:	60 e0       	ldi	r22, 0x00	; 0
    329c:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_WriteChannel>
		}
	if(GET_BIT(value, 3) == 1){
    32a0:	89 81       	ldd	r24, Y+1	; 0x01
    32a2:	86 95       	lsr	r24
    32a4:	86 95       	lsr	r24
    32a6:	86 95       	lsr	r24
    32a8:	88 2f       	mov	r24, r24
    32aa:	90 e0       	ldi	r25, 0x00	; 0
    32ac:	81 70       	andi	r24, 0x01	; 1
    32ae:	90 70       	andi	r25, 0x00	; 0
    32b0:	88 23       	and	r24, r24
    32b2:	29 f0       	breq	.+10     	; 0x32be <vPriWriteHalfPort+0x90>
		DIO_WriteChannel(D7, HIGH);
    32b4:	8c e0       	ldi	r24, 0x0C	; 12
    32b6:	61 e0       	ldi	r22, 0x01	; 1
    32b8:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_WriteChannel>
    32bc:	04 c0       	rjmp	.+8      	; 0x32c6 <vPriWriteHalfPort+0x98>
	}
	else{
		DIO_WriteChannel(D7, LOW);
    32be:	8c e0       	ldi	r24, 0x0C	; 12
    32c0:	60 e0       	ldi	r22, 0x00	; 0
    32c2:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_WriteChannel>
	}
}
    32c6:	0f 90       	pop	r0
    32c8:	cf 91       	pop	r28
    32ca:	df 91       	pop	r29
    32cc:	08 95       	ret

000032ce <vPriEnable>:

static void vPriEnable(void){
    32ce:	df 93       	push	r29
    32d0:	cf 93       	push	r28
    32d2:	cd b7       	in	r28, 0x3d	; 61
    32d4:	de b7       	in	r29, 0x3e	; 62
    32d6:	2e 97       	sbiw	r28, 0x0e	; 14
    32d8:	0f b6       	in	r0, 0x3f	; 63
    32da:	f8 94       	cli
    32dc:	de bf       	out	0x3e, r29	; 62
    32de:	0f be       	out	0x3f, r0	; 63
    32e0:	cd bf       	out	0x3d, r28	; 61
	DIO_WriteChannel(EN, HIGH);
    32e2:	82 e0       	ldi	r24, 0x02	; 2
    32e4:	61 e0       	ldi	r22, 0x01	; 1
    32e6:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_WriteChannel>
    32ea:	80 e0       	ldi	r24, 0x00	; 0
    32ec:	90 e0       	ldi	r25, 0x00	; 0
    32ee:	a0 e8       	ldi	r26, 0x80	; 128
    32f0:	bf e3       	ldi	r27, 0x3F	; 63
    32f2:	8b 87       	std	Y+11, r24	; 0x0b
    32f4:	9c 87       	std	Y+12, r25	; 0x0c
    32f6:	ad 87       	std	Y+13, r26	; 0x0d
    32f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    32fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    32fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3300:	9e 85       	ldd	r25, Y+14	; 0x0e
    3302:	20 e0       	ldi	r18, 0x00	; 0
    3304:	30 e0       	ldi	r19, 0x00	; 0
    3306:	4a e7       	ldi	r20, 0x7A	; 122
    3308:	55 e4       	ldi	r21, 0x45	; 69
    330a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    330e:	dc 01       	movw	r26, r24
    3310:	cb 01       	movw	r24, r22
    3312:	8f 83       	std	Y+7, r24	; 0x07
    3314:	98 87       	std	Y+8, r25	; 0x08
    3316:	a9 87       	std	Y+9, r26	; 0x09
    3318:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    331a:	6f 81       	ldd	r22, Y+7	; 0x07
    331c:	78 85       	ldd	r23, Y+8	; 0x08
    331e:	89 85       	ldd	r24, Y+9	; 0x09
    3320:	9a 85       	ldd	r25, Y+10	; 0x0a
    3322:	20 e0       	ldi	r18, 0x00	; 0
    3324:	30 e0       	ldi	r19, 0x00	; 0
    3326:	40 e8       	ldi	r20, 0x80	; 128
    3328:	5f e3       	ldi	r21, 0x3F	; 63
    332a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    332e:	88 23       	and	r24, r24
    3330:	2c f4       	brge	.+10     	; 0x333c <vPriEnable+0x6e>
		__ticks = 1;
    3332:	81 e0       	ldi	r24, 0x01	; 1
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	9e 83       	std	Y+6, r25	; 0x06
    3338:	8d 83       	std	Y+5, r24	; 0x05
    333a:	3f c0       	rjmp	.+126    	; 0x33ba <vPriEnable+0xec>
	else if (__tmp > 65535)
    333c:	6f 81       	ldd	r22, Y+7	; 0x07
    333e:	78 85       	ldd	r23, Y+8	; 0x08
    3340:	89 85       	ldd	r24, Y+9	; 0x09
    3342:	9a 85       	ldd	r25, Y+10	; 0x0a
    3344:	20 e0       	ldi	r18, 0x00	; 0
    3346:	3f ef       	ldi	r19, 0xFF	; 255
    3348:	4f e7       	ldi	r20, 0x7F	; 127
    334a:	57 e4       	ldi	r21, 0x47	; 71
    334c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3350:	18 16       	cp	r1, r24
    3352:	4c f5       	brge	.+82     	; 0x33a6 <vPriEnable+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3354:	6b 85       	ldd	r22, Y+11	; 0x0b
    3356:	7c 85       	ldd	r23, Y+12	; 0x0c
    3358:	8d 85       	ldd	r24, Y+13	; 0x0d
    335a:	9e 85       	ldd	r25, Y+14	; 0x0e
    335c:	20 e0       	ldi	r18, 0x00	; 0
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	40 e2       	ldi	r20, 0x20	; 32
    3362:	51 e4       	ldi	r21, 0x41	; 65
    3364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3368:	dc 01       	movw	r26, r24
    336a:	cb 01       	movw	r24, r22
    336c:	bc 01       	movw	r22, r24
    336e:	cd 01       	movw	r24, r26
    3370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3374:	dc 01       	movw	r26, r24
    3376:	cb 01       	movw	r24, r22
    3378:	9e 83       	std	Y+6, r25	; 0x06
    337a:	8d 83       	std	Y+5, r24	; 0x05
    337c:	0f c0       	rjmp	.+30     	; 0x339c <vPriEnable+0xce>
    337e:	80 e9       	ldi	r24, 0x90	; 144
    3380:	91 e0       	ldi	r25, 0x01	; 1
    3382:	9c 83       	std	Y+4, r25	; 0x04
    3384:	8b 83       	std	Y+3, r24	; 0x03
    3386:	8b 81       	ldd	r24, Y+3	; 0x03
    3388:	9c 81       	ldd	r25, Y+4	; 0x04
    338a:	01 97       	sbiw	r24, 0x01	; 1
    338c:	f1 f7       	brne	.-4      	; 0x338a <vPriEnable+0xbc>
    338e:	9c 83       	std	Y+4, r25	; 0x04
    3390:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3392:	8d 81       	ldd	r24, Y+5	; 0x05
    3394:	9e 81       	ldd	r25, Y+6	; 0x06
    3396:	01 97       	sbiw	r24, 0x01	; 1
    3398:	9e 83       	std	Y+6, r25	; 0x06
    339a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    339c:	8d 81       	ldd	r24, Y+5	; 0x05
    339e:	9e 81       	ldd	r25, Y+6	; 0x06
    33a0:	00 97       	sbiw	r24, 0x00	; 0
    33a2:	69 f7       	brne	.-38     	; 0x337e <vPriEnable+0xb0>
    33a4:	14 c0       	rjmp	.+40     	; 0x33ce <vPriEnable+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33a6:	6f 81       	ldd	r22, Y+7	; 0x07
    33a8:	78 85       	ldd	r23, Y+8	; 0x08
    33aa:	89 85       	ldd	r24, Y+9	; 0x09
    33ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    33ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33b2:	dc 01       	movw	r26, r24
    33b4:	cb 01       	movw	r24, r22
    33b6:	9e 83       	std	Y+6, r25	; 0x06
    33b8:	8d 83       	std	Y+5, r24	; 0x05
    33ba:	8d 81       	ldd	r24, Y+5	; 0x05
    33bc:	9e 81       	ldd	r25, Y+6	; 0x06
    33be:	9a 83       	std	Y+2, r25	; 0x02
    33c0:	89 83       	std	Y+1, r24	; 0x01
    33c2:	89 81       	ldd	r24, Y+1	; 0x01
    33c4:	9a 81       	ldd	r25, Y+2	; 0x02
    33c6:	01 97       	sbiw	r24, 0x01	; 1
    33c8:	f1 f7       	brne	.-4      	; 0x33c6 <vPriEnable+0xf8>
    33ca:	9a 83       	std	Y+2, r25	; 0x02
    33cc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_WriteChannel(EN, LOW);
    33ce:	82 e0       	ldi	r24, 0x02	; 2
    33d0:	60 e0       	ldi	r22, 0x00	; 0
    33d2:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_WriteChannel>
}
    33d6:	2e 96       	adiw	r28, 0x0e	; 14
    33d8:	0f b6       	in	r0, 0x3f	; 63
    33da:	f8 94       	cli
    33dc:	de bf       	out	0x3e, r29	; 62
    33de:	0f be       	out	0x3f, r0	; 63
    33e0:	cd bf       	out	0x3d, r28	; 61
    33e2:	cf 91       	pop	r28
    33e4:	df 91       	pop	r29
    33e6:	08 95       	ret

000033e8 <Servo_vOn>:

#include "servo.h"
#include "../MCAL/timer1.h"


void Servo_vOn (sint8 angle){
    33e8:	df 93       	push	r29
    33ea:	cf 93       	push	r28
    33ec:	00 d0       	rcall	.+0      	; 0x33ee <Servo_vOn+0x6>
    33ee:	cd b7       	in	r28, 0x3d	; 61
    33f0:	de b7       	in	r29, 0x3e	; 62
    33f2:	8a 83       	std	Y+2, r24	; 0x02
	Timer1_vInit();
    33f4:	0e 94 88 10 	call	0x2110	; 0x2110 <Timer1_vInit>

	uint8 duty = DUTY(angle);
    33f8:	8a 81       	ldd	r24, Y+2	; 0x02
    33fa:	99 27       	eor	r25, r25
    33fc:	87 fd       	sbrc	r24, 7
    33fe:	90 95       	com	r25
    3400:	a9 2f       	mov	r26, r25
    3402:	b9 2f       	mov	r27, r25
    3404:	bc 01       	movw	r22, r24
    3406:	cd 01       	movw	r24, r26
    3408:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    340c:	dc 01       	movw	r26, r24
    340e:	cb 01       	movw	r24, r22
    3410:	bc 01       	movw	r22, r24
    3412:	cd 01       	movw	r24, r26
    3414:	29 e3       	ldi	r18, 0x39	; 57
    3416:	3e e8       	ldi	r19, 0x8E	; 142
    3418:	43 ee       	ldi	r20, 0xE3	; 227
    341a:	5c e3       	ldi	r21, 0x3C	; 60
    341c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3420:	dc 01       	movw	r26, r24
    3422:	cb 01       	movw	r24, r22
    3424:	bc 01       	movw	r22, r24
    3426:	cd 01       	movw	r24, r26
    3428:	20 e0       	ldi	r18, 0x00	; 0
    342a:	30 e0       	ldi	r19, 0x00	; 0
    342c:	40 ef       	ldi	r20, 0xF0	; 240
    342e:	50 e4       	ldi	r21, 0x40	; 64
    3430:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3434:	dc 01       	movw	r26, r24
    3436:	cb 01       	movw	r24, r22
    3438:	bc 01       	movw	r22, r24
    343a:	cd 01       	movw	r24, r26
    343c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3440:	dc 01       	movw	r26, r24
    3442:	cb 01       	movw	r24, r22
    3444:	89 83       	std	Y+1, r24	; 0x01
	Timer1_SetPWMFast(duty, 100);
    3446:	89 81       	ldd	r24, Y+1	; 0x01
    3448:	64 e6       	ldi	r22, 0x64	; 100
    344a:	0e 94 fe 10 	call	0x21fc	; 0x21fc <Timer1_SetPWMFast>
	Timer1_vStart(0);
    344e:	80 e0       	ldi	r24, 0x00	; 0
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	0e 94 b9 10 	call	0x2172	; 0x2172 <Timer1_vStart>
}
    3456:	0f 90       	pop	r0
    3458:	0f 90       	pop	r0
    345a:	cf 91       	pop	r28
    345c:	df 91       	pop	r29
    345e:	08 95       	ret

00003460 <Servo_vOff>:

void Servo_vOff(void){
    3460:	df 93       	push	r29
    3462:	cf 93       	push	r28
    3464:	cd b7       	in	r28, 0x3d	; 61
    3466:	de b7       	in	r29, 0x3e	; 62
	Timer1_vStop();
    3468:	0e 94 cd 10 	call	0x219a	; 0x219a <Timer1_vStop>
}
    346c:	cf 91       	pop	r28
    346e:	df 91       	pop	r29
    3470:	08 95       	ret

00003472 <admin_mode>:
#include "../UTILS/STD_TYPES.h"
#include "../MCAL/USART.h"
#include "../HAL/EEPROM.h"

uint8 admin_mode()
{
    3472:	df 93       	push	r29
    3474:	cf 93       	push	r28
    3476:	cd b7       	in	r28, 0x3d	; 61
    3478:	de b7       	in	r29, 0x3e	; 62
    347a:	e8 97       	sbiw	r28, 0x38	; 56
    347c:	0f b6       	in	r0, 0x3f	; 63
    347e:	f8 94       	cli
    3480:	de bf       	out	0x3e, r29	; 62
    3482:	0f be       	out	0x3f, r0	; 63
    3484:	cd bf       	out	0x3d, r28	; 61
	uint8 Local_Choice =0;
    3486:	1c 82       	std	Y+4, r1	; 0x04
	uint8 Local_pass[4];
	uint8 Local_send2eep;
	uint8 var1;
	uint8 opt1[10] = "1.Add    ";
    3488:	9e 01       	movw	r18, r28
    348a:	27 5f       	subi	r18, 0xF7	; 247
    348c:	3f 4f       	sbci	r19, 0xFF	; 255
    348e:	3b a7       	std	Y+43, r19	; 0x2b
    3490:	2a a7       	std	Y+42, r18	; 0x2a
    3492:	86 ea       	ldi	r24, 0xA6	; 166
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	9d a7       	std	Y+45, r25	; 0x2d
    3498:	8c a7       	std	Y+44, r24	; 0x2c
    349a:	9a e0       	ldi	r25, 0x0A	; 10
    349c:	9e a7       	std	Y+46, r25	; 0x2e
    349e:	ac a5       	ldd	r26, Y+44	; 0x2c
    34a0:	bd a5       	ldd	r27, Y+45	; 0x2d
    34a2:	0c 90       	ld	r0, X
    34a4:	ec a5       	ldd	r30, Y+44	; 0x2c
    34a6:	fd a5       	ldd	r31, Y+45	; 0x2d
    34a8:	31 96       	adiw	r30, 0x01	; 1
    34aa:	fd a7       	std	Y+45, r31	; 0x2d
    34ac:	ec a7       	std	Y+44, r30	; 0x2c
    34ae:	aa a5       	ldd	r26, Y+42	; 0x2a
    34b0:	bb a5       	ldd	r27, Y+43	; 0x2b
    34b2:	0c 92       	st	X, r0
    34b4:	ea a5       	ldd	r30, Y+42	; 0x2a
    34b6:	fb a5       	ldd	r31, Y+43	; 0x2b
    34b8:	31 96       	adiw	r30, 0x01	; 1
    34ba:	fb a7       	std	Y+43, r31	; 0x2b
    34bc:	ea a7       	std	Y+42, r30	; 0x2a
    34be:	fe a5       	ldd	r31, Y+46	; 0x2e
    34c0:	f1 50       	subi	r31, 0x01	; 1
    34c2:	fe a7       	std	Y+46, r31	; 0x2e
    34c4:	2e a5       	ldd	r18, Y+46	; 0x2e
    34c6:	22 23       	and	r18, r18
    34c8:	51 f7       	brne	.-44     	; 0x349e <admin_mode+0x2c>
	uint8 opt2[10] = "2.Delete    ";
    34ca:	ce 01       	movw	r24, r28
    34cc:	43 96       	adiw	r24, 0x13	; 19
    34ce:	98 ab       	std	Y+48, r25	; 0x30
    34d0:	8f a7       	std	Y+47, r24	; 0x2f
    34d2:	a0 eb       	ldi	r26, 0xB0	; 176
    34d4:	b0 e0       	ldi	r27, 0x00	; 0
    34d6:	ba ab       	std	Y+50, r27	; 0x32
    34d8:	a9 ab       	std	Y+49, r26	; 0x31
    34da:	ba e0       	ldi	r27, 0x0A	; 10
    34dc:	bb ab       	std	Y+51, r27	; 0x33
    34de:	e9 a9       	ldd	r30, Y+49	; 0x31
    34e0:	fa a9       	ldd	r31, Y+50	; 0x32
    34e2:	00 80       	ld	r0, Z
    34e4:	29 a9       	ldd	r18, Y+49	; 0x31
    34e6:	3a a9       	ldd	r19, Y+50	; 0x32
    34e8:	2f 5f       	subi	r18, 0xFF	; 255
    34ea:	3f 4f       	sbci	r19, 0xFF	; 255
    34ec:	3a ab       	std	Y+50, r19	; 0x32
    34ee:	29 ab       	std	Y+49, r18	; 0x31
    34f0:	af a5       	ldd	r26, Y+47	; 0x2f
    34f2:	b8 a9       	ldd	r27, Y+48	; 0x30
    34f4:	0c 92       	st	X, r0
    34f6:	ef a5       	ldd	r30, Y+47	; 0x2f
    34f8:	f8 a9       	ldd	r31, Y+48	; 0x30
    34fa:	31 96       	adiw	r30, 0x01	; 1
    34fc:	f8 ab       	std	Y+48, r31	; 0x30
    34fe:	ef a7       	std	Y+47, r30	; 0x2f
    3500:	fb a9       	ldd	r31, Y+51	; 0x33
    3502:	f1 50       	subi	r31, 0x01	; 1
    3504:	fb ab       	std	Y+51, r31	; 0x33
    3506:	2b a9       	ldd	r18, Y+51	; 0x33
    3508:	22 23       	and	r18, r18
    350a:	49 f7       	brne	.-46     	; 0x34de <admin_mode+0x6c>
	uint8 opt3[10] = "3.Exit";
    350c:	ce 01       	movw	r24, r28
    350e:	4d 96       	adiw	r24, 0x1d	; 29
    3510:	9d ab       	std	Y+53, r25	; 0x35
    3512:	8c ab       	std	Y+52, r24	; 0x34
    3514:	ad eb       	ldi	r26, 0xBD	; 189
    3516:	b0 e0       	ldi	r27, 0x00	; 0
    3518:	bf ab       	std	Y+55, r27	; 0x37
    351a:	ae ab       	std	Y+54, r26	; 0x36
    351c:	b7 e0       	ldi	r27, 0x07	; 7
    351e:	b8 af       	std	Y+56, r27	; 0x38
    3520:	ee a9       	ldd	r30, Y+54	; 0x36
    3522:	ff a9       	ldd	r31, Y+55	; 0x37
    3524:	00 80       	ld	r0, Z
    3526:	2e a9       	ldd	r18, Y+54	; 0x36
    3528:	3f a9       	ldd	r19, Y+55	; 0x37
    352a:	2f 5f       	subi	r18, 0xFF	; 255
    352c:	3f 4f       	sbci	r19, 0xFF	; 255
    352e:	3f ab       	std	Y+55, r19	; 0x37
    3530:	2e ab       	std	Y+54, r18	; 0x36
    3532:	ac a9       	ldd	r26, Y+52	; 0x34
    3534:	bd a9       	ldd	r27, Y+53	; 0x35
    3536:	0c 92       	st	X, r0
    3538:	ec a9       	ldd	r30, Y+52	; 0x34
    353a:	fd a9       	ldd	r31, Y+53	; 0x35
    353c:	31 96       	adiw	r30, 0x01	; 1
    353e:	fd ab       	std	Y+53, r31	; 0x35
    3540:	ec ab       	std	Y+52, r30	; 0x34
    3542:	f8 ad       	ldd	r31, Y+56	; 0x38
    3544:	f1 50       	subi	r31, 0x01	; 1
    3546:	f8 af       	std	Y+56, r31	; 0x38
    3548:	28 ad       	ldd	r18, Y+56	; 0x38
    354a:	22 23       	and	r18, r18
    354c:	49 f7       	brne	.-46     	; 0x3520 <admin_mode+0xae>
    354e:	83 e0       	ldi	r24, 0x03	; 3
    3550:	fe 01       	movw	r30, r28
    3552:	b4 96       	adiw	r30, 0x24	; 36
    3554:	df 01       	movw	r26, r30
    3556:	28 2f       	mov	r18, r24
    3558:	1d 92       	st	X+, r1
    355a:	2a 95       	dec	r18
    355c:	e9 f7       	brne	.-6      	; 0x3558 <admin_mode+0xe6>
	uint8 Local_ID;
	UART_SendString("Choose:   ");
    355e:	80 e6       	ldi	r24, 0x60	; 96
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	0e 94 3a 0a 	call	0x1474	; 0x1474 <UART_SendString>
	UART_SendString(opt1);
    3566:	ce 01       	movw	r24, r28
    3568:	09 96       	adiw	r24, 0x09	; 9
    356a:	0e 94 3a 0a 	call	0x1474	; 0x1474 <UART_SendString>
	UART_SendString(opt2);
    356e:	ce 01       	movw	r24, r28
    3570:	43 96       	adiw	r24, 0x13	; 19
    3572:	0e 94 3a 0a 	call	0x1474	; 0x1474 <UART_SendString>
	UART_SendString(opt3);
    3576:	ce 01       	movw	r24, r28
    3578:	4d 96       	adiw	r24, 0x1d	; 29
    357a:	0e 94 3a 0a 	call	0x1474	; 0x1474 <UART_SendString>
	Local_Choice = USART_u16Receive();
    357e:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_u16Receive>
    3582:	8c 83       	std	Y+4, r24	; 0x04

	switch(Local_Choice-48)
    3584:	8c 81       	ldd	r24, Y+4	; 0x04
    3586:	88 2f       	mov	r24, r24
    3588:	90 e0       	ldi	r25, 0x00	; 0
    358a:	dc 01       	movw	r26, r24
    358c:	d0 97       	sbiw	r26, 0x30	; 48
    358e:	b8 a7       	std	Y+40, r27	; 0x28
    3590:	af a3       	std	Y+39, r26	; 0x27
    3592:	ef a1       	ldd	r30, Y+39	; 0x27
    3594:	f8 a5       	ldd	r31, Y+40	; 0x28
    3596:	e2 30       	cpi	r30, 0x02	; 2
    3598:	f1 05       	cpc	r31, r1
    359a:	a1 f1       	breq	.+104    	; 0x3604 <admin_mode+0x192>
    359c:	2f a1       	ldd	r18, Y+39	; 0x27
    359e:	38 a5       	ldd	r19, Y+40	; 0x28
    35a0:	23 30       	cpi	r18, 0x03	; 3
    35a2:	31 05       	cpc	r19, r1
    35a4:	09 f4       	brne	.+2      	; 0x35a8 <admin_mode+0x136>
    35a6:	3d c0       	rjmp	.+122    	; 0x3622 <admin_mode+0x1b0>
    35a8:	8f a1       	ldd	r24, Y+39	; 0x27
    35aa:	98 a5       	ldd	r25, Y+40	; 0x28
    35ac:	81 30       	cpi	r24, 0x01	; 1
    35ae:	91 05       	cpc	r25, r1
    35b0:	e1 f5       	brne	.+120    	; 0x362a <admin_mode+0x1b8>
	{
	case 1:
		UART_SendString("     Enter The ID:  ");
    35b2:	8b e6       	ldi	r24, 0x6B	; 107
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	0e 94 3a 0a 	call	0x1474	; 0x1474 <UART_SendString>
    35ba:	04 c0       	rjmp	.+8      	; 0x35c4 <admin_mode+0x152>
		while(var1==0)
		{
			var1 = USART_u16Receive()-48;
    35bc:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_u16Receive>
    35c0:	80 53       	subi	r24, 0x30	; 48
    35c2:	8a 83       	std	Y+2, r24	; 0x02

	switch(Local_Choice-48)
	{
	case 1:
		UART_SendString("     Enter The ID:  ");
		while(var1==0)
    35c4:	8a 81       	ldd	r24, Y+2	; 0x02
    35c6:	88 23       	and	r24, r24
    35c8:	c9 f3       	breq	.-14     	; 0x35bc <admin_mode+0x14a>
		{
			var1 = USART_u16Receive()-48;
		}
		Local_ID = var1;
    35ca:	8a 81       	ldd	r24, Y+2	; 0x02
    35cc:	89 83       	std	Y+1, r24	; 0x01

		UART_SendString("    Enter Password:  ");
    35ce:	80 e8       	ldi	r24, 0x80	; 128
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	0e 94 3a 0a 	call	0x1474	; 0x1474 <UART_SendString>

		UART_RecString(&Local_pass[0]);
    35d6:	ce 01       	movw	r24, r28
    35d8:	05 96       	adiw	r24, 0x05	; 5
    35da:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <UART_RecString>
		UART_SendString(&Local_pass[0]);
    35de:	ce 01       	movw	r24, r28
    35e0:	05 96       	adiw	r24, 0x05	; 5
    35e2:	0e 94 3a 0a 	call	0x1474	; 0x1474 <UART_SendString>

		Local_send2eep=string_to_int(Local_pass);
    35e6:	ce 01       	movw	r24, r28
    35e8:	05 96       	adiw	r24, 0x05	; 5
    35ea:	0e 94 49 1b 	call	0x3692	; 0x3692 <string_to_int>
    35ee:	8b 83       	std	Y+3, r24	; 0x03
		USART_vTransmit(Local_send2eep);
    35f0:	8b 81       	ldd	r24, Y+3	; 0x03
    35f2:	0e 94 20 0a 	call	0x1440	; 0x1440 <USART_vTransmit>
		EEPROM_vWriteByte(Local_ID, Local_send2eep);
    35f6:	89 81       	ldd	r24, Y+1	; 0x01
    35f8:	88 2f       	mov	r24, r24
    35fa:	90 e0       	ldi	r25, 0x00	; 0
    35fc:	6b 81       	ldd	r22, Y+3	; 0x03
    35fe:	0e 94 a4 11 	call	0x2348	; 0x2348 <EEPROM_vWriteByte>
    3602:	13 c0       	rjmp	.+38     	; 0x362a <admin_mode+0x1b8>

		break;
	case 2:
		UART_SendString("Enter The ID:  ");
    3604:	86 e9       	ldi	r24, 0x96	; 150
    3606:	90 e0       	ldi	r25, 0x00	; 0
    3608:	0e 94 3a 0a 	call	0x1474	; 0x1474 <UART_SendString>
		Local_ID = USART_u16Receive()-48;
    360c:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_u16Receive>
    3610:	80 53       	subi	r24, 0x30	; 48
    3612:	89 83       	std	Y+1, r24	; 0x01
		EEPROM_vWriteByte(Local_ID, 0);
    3614:	89 81       	ldd	r24, Y+1	; 0x01
    3616:	88 2f       	mov	r24, r24
    3618:	90 e0       	ldi	r25, 0x00	; 0
    361a:	60 e0       	ldi	r22, 0x00	; 0
    361c:	0e 94 a4 11 	call	0x2348	; 0x2348 <EEPROM_vWriteByte>
    3620:	04 c0       	rjmp	.+8      	; 0x362a <admin_mode+0x1b8>
		break;
	case 3:
		return 255;
    3622:	8f ef       	ldi	r24, 0xFF	; 255
    3624:	89 a7       	std	Y+41, r24	; 0x29
		break;
	}

}
    3626:	89 a5       	ldd	r24, Y+41	; 0x29
    3628:	00 c0       	rjmp	.+0      	; 0x362a <admin_mode+0x1b8>
    362a:	e8 96       	adiw	r28, 0x38	; 56
    362c:	0f b6       	in	r0, 0x3f	; 63
    362e:	f8 94       	cli
    3630:	de bf       	out	0x3e, r29	; 62
    3632:	0f be       	out	0x3f, r0	; 63
    3634:	cd bf       	out	0x3d, r28	; 61
    3636:	cf 91       	pop	r28
    3638:	df 91       	pop	r29
    363a:	08 95       	ret

0000363c <int_to_string>:
uint8* int_to_string(uint8 data)
{
    363c:	df 93       	push	r29
    363e:	cf 93       	push	r28
    3640:	00 d0       	rcall	.+0      	; 0x3642 <int_to_string+0x6>
    3642:	00 d0       	rcall	.+0      	; 0x3644 <int_to_string+0x8>
    3644:	cd b7       	in	r28, 0x3d	; 61
    3646:	de b7       	in	r29, 0x3e	; 62
    3648:	8c 83       	std	Y+4, r24	; 0x04
	uint8 buff[3];
	buff[0]=data/100;
    364a:	8c 81       	ldd	r24, Y+4	; 0x04
    364c:	94 e6       	ldi	r25, 0x64	; 100
    364e:	69 2f       	mov	r22, r25
    3650:	0e 94 18 24 	call	0x4830	; 0x4830 <__udivmodqi4>
    3654:	89 83       	std	Y+1, r24	; 0x01
	buff[1]=(data/10)-buff[0];
    3656:	8c 81       	ldd	r24, Y+4	; 0x04
    3658:	9a e0       	ldi	r25, 0x0A	; 10
    365a:	69 2f       	mov	r22, r25
    365c:	0e 94 18 24 	call	0x4830	; 0x4830 <__udivmodqi4>
    3660:	98 2f       	mov	r25, r24
    3662:	89 81       	ldd	r24, Y+1	; 0x01
    3664:	29 2f       	mov	r18, r25
    3666:	28 1b       	sub	r18, r24
    3668:	82 2f       	mov	r24, r18
    366a:	8a 83       	std	Y+2, r24	; 0x02
	buff[2]=(data)-buff[0]-buff[1];
    366c:	99 81       	ldd	r25, Y+1	; 0x01
    366e:	8c 81       	ldd	r24, Y+4	; 0x04
    3670:	28 2f       	mov	r18, r24
    3672:	29 1b       	sub	r18, r25
    3674:	92 2f       	mov	r25, r18
    3676:	8a 81       	ldd	r24, Y+2	; 0x02
    3678:	29 2f       	mov	r18, r25
    367a:	28 1b       	sub	r18, r24
    367c:	82 2f       	mov	r24, r18
    367e:	8b 83       	std	Y+3, r24	; 0x03
	return buff;
    3680:	ce 01       	movw	r24, r28
    3682:	01 96       	adiw	r24, 0x01	; 1
}
    3684:	0f 90       	pop	r0
    3686:	0f 90       	pop	r0
    3688:	0f 90       	pop	r0
    368a:	0f 90       	pop	r0
    368c:	cf 91       	pop	r28
    368e:	df 91       	pop	r29
    3690:	08 95       	ret

00003692 <string_to_int>:

uint8 string_to_int(uint8* data)
{
    3692:	df 93       	push	r29
    3694:	cf 93       	push	r28
    3696:	00 d0       	rcall	.+0      	; 0x3698 <string_to_int+0x6>
    3698:	0f 92       	push	r0
    369a:	cd b7       	in	r28, 0x3d	; 61
    369c:	de b7       	in	r29, 0x3e	; 62
    369e:	9b 83       	std	Y+3, r25	; 0x03
    36a0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Wdata;
	Wdata = (data[2]-48) +(data[1]-48)*10+(data[0]-48)*100;
    36a2:	8a 81       	ldd	r24, Y+2	; 0x02
    36a4:	9b 81       	ldd	r25, Y+3	; 0x03
    36a6:	fc 01       	movw	r30, r24
    36a8:	32 96       	adiw	r30, 0x02	; 2
    36aa:	40 81       	ld	r20, Z
    36ac:	8a 81       	ldd	r24, Y+2	; 0x02
    36ae:	9b 81       	ldd	r25, Y+3	; 0x03
    36b0:	fc 01       	movw	r30, r24
    36b2:	31 96       	adiw	r30, 0x01	; 1
    36b4:	80 81       	ld	r24, Z
    36b6:	88 2f       	mov	r24, r24
    36b8:	90 e0       	ldi	r25, 0x00	; 0
    36ba:	9c 01       	movw	r18, r24
    36bc:	22 0f       	add	r18, r18
    36be:	33 1f       	adc	r19, r19
    36c0:	c9 01       	movw	r24, r18
    36c2:	88 0f       	add	r24, r24
    36c4:	99 1f       	adc	r25, r25
    36c6:	88 0f       	add	r24, r24
    36c8:	99 1f       	adc	r25, r25
    36ca:	82 0f       	add	r24, r18
    36cc:	93 1f       	adc	r25, r19
    36ce:	48 0f       	add	r20, r24
    36d0:	ea 81       	ldd	r30, Y+2	; 0x02
    36d2:	fb 81       	ldd	r31, Y+3	; 0x03
    36d4:	80 81       	ld	r24, Z
    36d6:	28 2f       	mov	r18, r24
    36d8:	30 e0       	ldi	r19, 0x00	; 0
    36da:	84 e6       	ldi	r24, 0x64	; 100
    36dc:	90 e0       	ldi	r25, 0x00	; 0
    36de:	bc 01       	movw	r22, r24
    36e0:	26 9f       	mul	r18, r22
    36e2:	c0 01       	movw	r24, r0
    36e4:	27 9f       	mul	r18, r23
    36e6:	90 0d       	add	r25, r0
    36e8:	36 9f       	mul	r19, r22
    36ea:	90 0d       	add	r25, r0
    36ec:	11 24       	eor	r1, r1
    36ee:	84 0f       	add	r24, r20
    36f0:	80 5d       	subi	r24, 0xD0	; 208
    36f2:	89 83       	std	Y+1, r24	; 0x01

	return Wdata;
    36f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    36f6:	0f 90       	pop	r0
    36f8:	0f 90       	pop	r0
    36fa:	0f 90       	pop	r0
    36fc:	cf 91       	pop	r28
    36fe:	df 91       	pop	r29
    3700:	08 95       	ret

00003702 <main>:
 * 255-> admin/user
 */



int main (void){
    3702:	0f 93       	push	r16
    3704:	1f 93       	push	r17
    3706:	df 93       	push	r29
    3708:	cf 93       	push	r28
    370a:	cd b7       	in	r28, 0x3d	; 61
    370c:	de b7       	in	r29, 0x3e	; 62
    370e:	ca 54       	subi	r28, 0x4A	; 74
    3710:	d0 40       	sbci	r29, 0x00	; 0
    3712:	0f b6       	in	r0, 0x3f	; 63
    3714:	f8 94       	cli
    3716:	de bf       	out	0x3e, r29	; 62
    3718:	0f be       	out	0x3f, r0	; 63
    371a:	cd bf       	out	0x3d, r28	; 61
	DIO_init();
    371c:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <DIO_init>
	Keypad_vInit();
    3720:	0e 94 5d 14 	call	0x28ba	; 0x28ba <Keypad_vInit>
	LCD_vInit();
    3724:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <LCD_vInit>
	USART_vInit();
    3728:	0e 94 94 09 	call	0x1328	; 0x1328 <USART_vInit>
	EEPROM_vInit();
    372c:	0e 94 9a 11 	call	0x2334	; 0x2334 <EEPROM_vInit>
	ADC_vInit();
    3730:	0e 94 75 07 	call	0xeea	; 0xeea <ADC_vInit>
	DC_vInit();
    3734:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <DC_vInit>

	LCD_vSendString("1- User Mode");
    3738:	87 ec       	ldi	r24, 0xC7	; 199
    373a:	90 e0       	ldi	r25, 0x00	; 0
    373c:	0e 94 21 18 	call	0x3042	; 0x3042 <LCD_vSendString>
	LCD_vGoTo(1,0);
    3740:	81 e0       	ldi	r24, 0x01	; 1
    3742:	60 e0       	ldi	r22, 0x00	; 0
    3744:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_vGoTo>
	LCD_vSendString("2- Admin Mode");
    3748:	84 ed       	ldi	r24, 0xD4	; 212
    374a:	90 e0       	ldi	r25, 0x00	; 0
    374c:	0e 94 21 18 	call	0x3042	; 0x3042 <LCD_vSendString>

	while(1){
		uint8 key_pressed = Keypad_u8GetPressed();
    3750:	0e 94 74 14 	call	0x28e8	; 0x28e8 <Keypad_u8GetPressed>
    3754:	fe 01       	movw	r30, r28
    3756:	e8 5b       	subi	r30, 0xB8	; 184
    3758:	ff 4f       	sbci	r31, 0xFF	; 255
    375a:	80 83       	st	Z, r24
		if (KEY_NOT_PRESSED != key_pressed && flag == 0){
    375c:	fe 01       	movw	r30, r28
    375e:	e8 5b       	subi	r30, 0xB8	; 184
    3760:	ff 4f       	sbci	r31, 0xFF	; 255
    3762:	80 81       	ld	r24, Z
    3764:	8f 3f       	cpi	r24, 0xFF	; 255
    3766:	f9 f0       	breq	.+62     	; 0x37a6 <main+0xa4>
    3768:	80 91 2e 03 	lds	r24, 0x032E
    376c:	88 23       	and	r24, r24
    376e:	d9 f4       	brne	.+54     	; 0x37a6 <main+0xa4>
			count = 0;
    3770:	10 92 31 03 	sts	0x0331, r1
			if(key_pressed == '1'){
    3774:	fe 01       	movw	r30, r28
    3776:	e8 5b       	subi	r30, 0xB8	; 184
    3778:	ff 4f       	sbci	r31, 0xFF	; 255
    377a:	80 81       	ld	r24, Z
    377c:	81 33       	cpi	r24, 0x31	; 49
    377e:	39 f4       	brne	.+14     	; 0x378e <main+0x8c>
				LCD_vSendCmnd(0x01);
    3780:	81 e0       	ldi	r24, 0x01	; 1
    3782:	0e 94 ed 17 	call	0x2fda	; 0x2fda <LCD_vSendCmnd>
				flag = 1;
    3786:	81 e0       	ldi	r24, 0x01	; 1
    3788:	80 93 2e 03 	sts	0x032E, r24
    378c:	0c c0       	rjmp	.+24     	; 0x37a6 <main+0xa4>
			}
			else if (key_pressed == '2'){
    378e:	fe 01       	movw	r30, r28
    3790:	e8 5b       	subi	r30, 0xB8	; 184
    3792:	ff 4f       	sbci	r31, 0xFF	; 255
    3794:	80 81       	ld	r24, Z
    3796:	82 33       	cpi	r24, 0x32	; 50
    3798:	31 f4       	brne	.+12     	; 0x37a6 <main+0xa4>
				LCD_vSendCmnd(0x01);
    379a:	81 e0       	ldi	r24, 0x01	; 1
    379c:	0e 94 ed 17 	call	0x2fda	; 0x2fda <LCD_vSendCmnd>
				flag = 101;
    37a0:	85 e6       	ldi	r24, 0x65	; 101
    37a2:	80 93 2e 03 	sts	0x032E, r24
		/*
		 *
		 * USER
		 *
		 */
		if (flag == 1 && count < 3) {
    37a6:	80 91 2e 03 	lds	r24, 0x032E
    37aa:	81 30       	cpi	r24, 0x01	; 1
    37ac:	99 f4       	brne	.+38     	; 0x37d4 <main+0xd2>
    37ae:	80 91 31 03 	lds	r24, 0x0331
    37b2:	83 30       	cpi	r24, 0x03	; 3
    37b4:	78 f4       	brcc	.+30     	; 0x37d4 <main+0xd2>
			LCD_vSendString("Enter Username:");
    37b6:	82 ee       	ldi	r24, 0xE2	; 226
    37b8:	90 e0       	ldi	r25, 0x00	; 0
    37ba:	0e 94 21 18 	call	0x3042	; 0x3042 <LCD_vSendString>
			LCD_vGoTo(1,0);
    37be:	81 e0       	ldi	r24, 0x01	; 1
    37c0:	60 e0       	ldi	r22, 0x00	; 0
    37c2:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_vGoTo>
			flag = 2;
    37c6:	82 e0       	ldi	r24, 0x02	; 2
    37c8:	80 93 2e 03 	sts	0x032E, r24
			user_entry_username = 0;
    37cc:	10 92 34 03 	sts	0x0334, r1
    37d0:	10 92 33 03 	sts	0x0333, r1
		}

		if (flag == 2){
    37d4:	80 91 2e 03 	lds	r24, 0x032E
    37d8:	82 30       	cpi	r24, 0x02	; 2
    37da:	09 f0       	breq	.+2      	; 0x37de <main+0xdc>
    37dc:	42 c0       	rjmp	.+132    	; 0x3862 <main+0x160>
			key_pressed = Keypad_u8GetPressed();
    37de:	0e 94 74 14 	call	0x28e8	; 0x28e8 <Keypad_u8GetPressed>
    37e2:	fe 01       	movw	r30, r28
    37e4:	e8 5b       	subi	r30, 0xB8	; 184
    37e6:	ff 4f       	sbci	r31, 0xFF	; 255
    37e8:	80 83       	st	Z, r24
			if (KEY_NOT_PRESSED != key_pressed) {
    37ea:	fe 01       	movw	r30, r28
    37ec:	e8 5b       	subi	r30, 0xB8	; 184
    37ee:	ff 4f       	sbci	r31, 0xFF	; 255
    37f0:	80 81       	ld	r24, Z
    37f2:	8f 3f       	cpi	r24, 0xFF	; 255
    37f4:	b1 f1       	breq	.+108    	; 0x3862 <main+0x160>
				if(key_pressed != '='){
    37f6:	fe 01       	movw	r30, r28
    37f8:	e8 5b       	subi	r30, 0xB8	; 184
    37fa:	ff 4f       	sbci	r31, 0xFF	; 255
    37fc:	80 81       	ld	r24, Z
    37fe:	8d 33       	cpi	r24, 0x3D	; 61
    3800:	51 f1       	breq	.+84     	; 0x3856 <main+0x154>
					LCD_vSendData(key_pressed);
    3802:	fe 01       	movw	r30, r28
    3804:	e8 5b       	subi	r30, 0xB8	; 184
    3806:	ff 4f       	sbci	r31, 0xFF	; 255
    3808:	80 81       	ld	r24, Z
    380a:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vSendData>
					user_entry_username *= 10;
    380e:	80 91 33 03 	lds	r24, 0x0333
    3812:	90 91 34 03 	lds	r25, 0x0334
    3816:	9c 01       	movw	r18, r24
    3818:	22 0f       	add	r18, r18
    381a:	33 1f       	adc	r19, r19
    381c:	c9 01       	movw	r24, r18
    381e:	88 0f       	add	r24, r24
    3820:	99 1f       	adc	r25, r25
    3822:	88 0f       	add	r24, r24
    3824:	99 1f       	adc	r25, r25
    3826:	82 0f       	add	r24, r18
    3828:	93 1f       	adc	r25, r19
    382a:	90 93 34 03 	sts	0x0334, r25
    382e:	80 93 33 03 	sts	0x0333, r24
					user_entry_username += key_pressed - '0';
    3832:	fe 01       	movw	r30, r28
    3834:	e8 5b       	subi	r30, 0xB8	; 184
    3836:	ff 4f       	sbci	r31, 0xFF	; 255
    3838:	80 81       	ld	r24, Z
    383a:	28 2f       	mov	r18, r24
    383c:	30 e0       	ldi	r19, 0x00	; 0
    383e:	80 91 33 03 	lds	r24, 0x0333
    3842:	90 91 34 03 	lds	r25, 0x0334
    3846:	82 0f       	add	r24, r18
    3848:	93 1f       	adc	r25, r19
    384a:	c0 97       	sbiw	r24, 0x30	; 48
    384c:	90 93 34 03 	sts	0x0334, r25
    3850:	80 93 33 03 	sts	0x0333, r24
    3854:	06 c0       	rjmp	.+12     	; 0x3862 <main+0x160>
				}
				else{
					flag = 3;
    3856:	83 e0       	ldi	r24, 0x03	; 3
    3858:	80 93 2e 03 	sts	0x032E, r24
					LCD_vSendCmnd(0x01);
    385c:	81 e0       	ldi	r24, 0x01	; 1
    385e:	0e 94 ed 17 	call	0x2fda	; 0x2fda <LCD_vSendCmnd>
				}
			}
		}


		if (flag == 3 && count < 3) {
    3862:	80 91 2e 03 	lds	r24, 0x032E
    3866:	83 30       	cpi	r24, 0x03	; 3
    3868:	91 f4       	brne	.+36     	; 0x388e <main+0x18c>
    386a:	80 91 31 03 	lds	r24, 0x0331
    386e:	83 30       	cpi	r24, 0x03	; 3
    3870:	70 f4       	brcc	.+28     	; 0x388e <main+0x18c>
			LCD_vSendString("Enter Password:");
    3872:	82 ef       	ldi	r24, 0xF2	; 242
    3874:	90 e0       	ldi	r25, 0x00	; 0
    3876:	0e 94 21 18 	call	0x3042	; 0x3042 <LCD_vSendString>
			LCD_vGoTo(1,0);
    387a:	81 e0       	ldi	r24, 0x01	; 1
    387c:	60 e0       	ldi	r22, 0x00	; 0
    387e:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_vGoTo>
			flag = 4;
    3882:	84 e0       	ldi	r24, 0x04	; 4
    3884:	80 93 2e 03 	sts	0x032E, r24
			user_entry_pass = 0;
    3888:	10 92 2f 03 	sts	0x032F, r1
    388c:	97 c0       	rjmp	.+302    	; 0x39bc <main+0x2ba>
		}
		else if (flag == 3 && count >=3){
    388e:	80 91 2e 03 	lds	r24, 0x032E
    3892:	83 30       	cpi	r24, 0x03	; 3
    3894:	09 f0       	breq	.+2      	; 0x3898 <main+0x196>
    3896:	92 c0       	rjmp	.+292    	; 0x39bc <main+0x2ba>
    3898:	80 91 31 03 	lds	r24, 0x0331
    389c:	83 30       	cpi	r24, 0x03	; 3
    389e:	08 f4       	brcc	.+2      	; 0x38a2 <main+0x1a0>
    38a0:	8d c0       	rjmp	.+282    	; 0x39bc <main+0x2ba>
			BUZZER_On();
    38a2:	0e 94 fd 22 	call	0x45fa	; 0x45fa <BUZZER_On>
    38a6:	fe 01       	movw	r30, r28
    38a8:	ed 5b       	subi	r30, 0xBD	; 189
    38aa:	ff 4f       	sbci	r31, 0xFF	; 255
    38ac:	80 e0       	ldi	r24, 0x00	; 0
    38ae:	90 e0       	ldi	r25, 0x00	; 0
    38b0:	aa ef       	ldi	r26, 0xFA	; 250
    38b2:	b4 e4       	ldi	r27, 0x44	; 68
    38b4:	80 83       	st	Z, r24
    38b6:	91 83       	std	Z+1, r25	; 0x01
    38b8:	a2 83       	std	Z+2, r26	; 0x02
    38ba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38bc:	8e 01       	movw	r16, r28
    38be:	01 5c       	subi	r16, 0xC1	; 193
    38c0:	1f 4f       	sbci	r17, 0xFF	; 255
    38c2:	fe 01       	movw	r30, r28
    38c4:	ed 5b       	subi	r30, 0xBD	; 189
    38c6:	ff 4f       	sbci	r31, 0xFF	; 255
    38c8:	60 81       	ld	r22, Z
    38ca:	71 81       	ldd	r23, Z+1	; 0x01
    38cc:	82 81       	ldd	r24, Z+2	; 0x02
    38ce:	93 81       	ldd	r25, Z+3	; 0x03
    38d0:	20 e0       	ldi	r18, 0x00	; 0
    38d2:	30 e0       	ldi	r19, 0x00	; 0
    38d4:	4a e7       	ldi	r20, 0x7A	; 122
    38d6:	55 e4       	ldi	r21, 0x45	; 69
    38d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38dc:	dc 01       	movw	r26, r24
    38de:	cb 01       	movw	r24, r22
    38e0:	f8 01       	movw	r30, r16
    38e2:	80 83       	st	Z, r24
    38e4:	91 83       	std	Z+1, r25	; 0x01
    38e6:	a2 83       	std	Z+2, r26	; 0x02
    38e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38ea:	fe 01       	movw	r30, r28
    38ec:	ff 96       	adiw	r30, 0x3f	; 63
    38ee:	60 81       	ld	r22, Z
    38f0:	71 81       	ldd	r23, Z+1	; 0x01
    38f2:	82 81       	ldd	r24, Z+2	; 0x02
    38f4:	93 81       	ldd	r25, Z+3	; 0x03
    38f6:	20 e0       	ldi	r18, 0x00	; 0
    38f8:	30 e0       	ldi	r19, 0x00	; 0
    38fa:	40 e8       	ldi	r20, 0x80	; 128
    38fc:	5f e3       	ldi	r21, 0x3F	; 63
    38fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3902:	88 23       	and	r24, r24
    3904:	2c f4       	brge	.+10     	; 0x3910 <main+0x20e>
		__ticks = 1;
    3906:	81 e0       	ldi	r24, 0x01	; 1
    3908:	90 e0       	ldi	r25, 0x00	; 0
    390a:	9e af       	std	Y+62, r25	; 0x3e
    390c:	8d af       	std	Y+61, r24	; 0x3d
    390e:	46 c0       	rjmp	.+140    	; 0x399c <main+0x29a>
	else if (__tmp > 65535)
    3910:	fe 01       	movw	r30, r28
    3912:	ff 96       	adiw	r30, 0x3f	; 63
    3914:	60 81       	ld	r22, Z
    3916:	71 81       	ldd	r23, Z+1	; 0x01
    3918:	82 81       	ldd	r24, Z+2	; 0x02
    391a:	93 81       	ldd	r25, Z+3	; 0x03
    391c:	20 e0       	ldi	r18, 0x00	; 0
    391e:	3f ef       	ldi	r19, 0xFF	; 255
    3920:	4f e7       	ldi	r20, 0x7F	; 127
    3922:	57 e4       	ldi	r21, 0x47	; 71
    3924:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3928:	18 16       	cp	r1, r24
    392a:	64 f5       	brge	.+88     	; 0x3984 <main+0x282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    392c:	fe 01       	movw	r30, r28
    392e:	ed 5b       	subi	r30, 0xBD	; 189
    3930:	ff 4f       	sbci	r31, 0xFF	; 255
    3932:	60 81       	ld	r22, Z
    3934:	71 81       	ldd	r23, Z+1	; 0x01
    3936:	82 81       	ldd	r24, Z+2	; 0x02
    3938:	93 81       	ldd	r25, Z+3	; 0x03
    393a:	20 e0       	ldi	r18, 0x00	; 0
    393c:	30 e0       	ldi	r19, 0x00	; 0
    393e:	40 e2       	ldi	r20, 0x20	; 32
    3940:	51 e4       	ldi	r21, 0x41	; 65
    3942:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3946:	dc 01       	movw	r26, r24
    3948:	cb 01       	movw	r24, r22
    394a:	bc 01       	movw	r22, r24
    394c:	cd 01       	movw	r24, r26
    394e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3952:	dc 01       	movw	r26, r24
    3954:	cb 01       	movw	r24, r22
    3956:	9e af       	std	Y+62, r25	; 0x3e
    3958:	8d af       	std	Y+61, r24	; 0x3d
    395a:	0f c0       	rjmp	.+30     	; 0x397a <main+0x278>
    395c:	80 e9       	ldi	r24, 0x90	; 144
    395e:	91 e0       	ldi	r25, 0x01	; 1
    3960:	9c af       	std	Y+60, r25	; 0x3c
    3962:	8b af       	std	Y+59, r24	; 0x3b
    3964:	8b ad       	ldd	r24, Y+59	; 0x3b
    3966:	9c ad       	ldd	r25, Y+60	; 0x3c
    3968:	01 97       	sbiw	r24, 0x01	; 1
    396a:	f1 f7       	brne	.-4      	; 0x3968 <main+0x266>
    396c:	9c af       	std	Y+60, r25	; 0x3c
    396e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3970:	8d ad       	ldd	r24, Y+61	; 0x3d
    3972:	9e ad       	ldd	r25, Y+62	; 0x3e
    3974:	01 97       	sbiw	r24, 0x01	; 1
    3976:	9e af       	std	Y+62, r25	; 0x3e
    3978:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    397a:	8d ad       	ldd	r24, Y+61	; 0x3d
    397c:	9e ad       	ldd	r25, Y+62	; 0x3e
    397e:	00 97       	sbiw	r24, 0x00	; 0
    3980:	69 f7       	brne	.-38     	; 0x395c <main+0x25a>
    3982:	16 c0       	rjmp	.+44     	; 0x39b0 <main+0x2ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3984:	fe 01       	movw	r30, r28
    3986:	ff 96       	adiw	r30, 0x3f	; 63
    3988:	60 81       	ld	r22, Z
    398a:	71 81       	ldd	r23, Z+1	; 0x01
    398c:	82 81       	ldd	r24, Z+2	; 0x02
    398e:	93 81       	ldd	r25, Z+3	; 0x03
    3990:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3994:	dc 01       	movw	r26, r24
    3996:	cb 01       	movw	r24, r22
    3998:	9e af       	std	Y+62, r25	; 0x3e
    399a:	8d af       	std	Y+61, r24	; 0x3d
    399c:	8d ad       	ldd	r24, Y+61	; 0x3d
    399e:	9e ad       	ldd	r25, Y+62	; 0x3e
    39a0:	9a af       	std	Y+58, r25	; 0x3a
    39a2:	89 af       	std	Y+57, r24	; 0x39
    39a4:	89 ad       	ldd	r24, Y+57	; 0x39
    39a6:	9a ad       	ldd	r25, Y+58	; 0x3a
    39a8:	01 97       	sbiw	r24, 0x01	; 1
    39aa:	f1 f7       	brne	.-4      	; 0x39a8 <main+0x2a6>
    39ac:	9a af       	std	Y+58, r25	; 0x3a
    39ae:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(2000);
			BUZZER_Off();
    39b0:	0e 94 08 23 	call	0x4610	; 0x4610 <BUZZER_Off>
			count = 0;
    39b4:	10 92 31 03 	sts	0x0331, r1
			flag = 0;
    39b8:	10 92 2e 03 	sts	0x032E, r1
		}

		if (flag == 4){
    39bc:	80 91 2e 03 	lds	r24, 0x032E
    39c0:	84 30       	cpi	r24, 0x04	; 4
    39c2:	09 f0       	breq	.+2      	; 0x39c6 <main+0x2c4>
    39c4:	48 c1       	rjmp	.+656    	; 0x3c56 <main+0x554>
			key_pressed = Keypad_u8GetPressed();
    39c6:	0e 94 74 14 	call	0x28e8	; 0x28e8 <Keypad_u8GetPressed>
    39ca:	fe 01       	movw	r30, r28
    39cc:	e8 5b       	subi	r30, 0xB8	; 184
    39ce:	ff 4f       	sbci	r31, 0xFF	; 255
    39d0:	80 83       	st	Z, r24
			if (KEY_NOT_PRESSED != key_pressed) {
    39d2:	fe 01       	movw	r30, r28
    39d4:	e8 5b       	subi	r30, 0xB8	; 184
    39d6:	ff 4f       	sbci	r31, 0xFF	; 255
    39d8:	80 81       	ld	r24, Z
    39da:	8f 3f       	cpi	r24, 0xFF	; 255
    39dc:	09 f4       	brne	.+2      	; 0x39e0 <main+0x2de>
    39de:	3b c1       	rjmp	.+630    	; 0x3c56 <main+0x554>
				if(key_pressed != '='){
    39e0:	fe 01       	movw	r30, r28
    39e2:	e8 5b       	subi	r30, 0xB8	; 184
    39e4:	ff 4f       	sbci	r31, 0xFF	; 255
    39e6:	80 81       	ld	r24, Z
    39e8:	8d 33       	cpi	r24, 0x3D	; 61
    39ea:	f1 f0       	breq	.+60     	; 0x3a28 <main+0x326>
					LCD_vSendData('*');
    39ec:	8a e2       	ldi	r24, 0x2A	; 42
    39ee:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vSendData>
					user_entry_pass *= 10;
    39f2:	80 91 2f 03 	lds	r24, 0x032F
    39f6:	88 2f       	mov	r24, r24
    39f8:	90 e0       	ldi	r25, 0x00	; 0
    39fa:	9c 01       	movw	r18, r24
    39fc:	22 0f       	add	r18, r18
    39fe:	33 1f       	adc	r19, r19
    3a00:	c9 01       	movw	r24, r18
    3a02:	88 0f       	add	r24, r24
    3a04:	99 1f       	adc	r25, r25
    3a06:	88 0f       	add	r24, r24
    3a08:	99 1f       	adc	r25, r25
    3a0a:	82 0f       	add	r24, r18
    3a0c:	93 1f       	adc	r25, r19
    3a0e:	80 93 2f 03 	sts	0x032F, r24
					user_entry_pass += key_pressed - '0';
    3a12:	90 91 2f 03 	lds	r25, 0x032F
    3a16:	fe 01       	movw	r30, r28
    3a18:	e8 5b       	subi	r30, 0xB8	; 184
    3a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1c:	80 81       	ld	r24, Z
    3a1e:	89 0f       	add	r24, r25
    3a20:	80 53       	subi	r24, 0x30	; 48
    3a22:	80 93 2f 03 	sts	0x032F, r24
    3a26:	17 c1       	rjmp	.+558    	; 0x3c56 <main+0x554>
				}
				else{
					flag = 5;
    3a28:	85 e0       	ldi	r24, 0x05	; 5
    3a2a:	80 93 2e 03 	sts	0x032E, r24
					count++;
    3a2e:	80 91 31 03 	lds	r24, 0x0331
    3a32:	8f 5f       	subi	r24, 0xFF	; 255
    3a34:	80 93 31 03 	sts	0x0331, r24
					LCD_vSendInt(user_entry_pass);
    3a38:	80 91 2f 03 	lds	r24, 0x032F
    3a3c:	88 2f       	mov	r24, r24
    3a3e:	90 e0       	ldi	r25, 0x00	; 0
    3a40:	a0 e0       	ldi	r26, 0x00	; 0
    3a42:	b0 e0       	ldi	r27, 0x00	; 0
    3a44:	bc 01       	movw	r22, r24
    3a46:	cd 01       	movw	r24, r26
    3a48:	0e 94 4a 18 	call	0x3094	; 0x3094 <LCD_vSendInt>
					password_user = EEPROM_u8ReadByte(user_entry_username);
    3a4c:	80 91 33 03 	lds	r24, 0x0333
    3a50:	90 91 34 03 	lds	r25, 0x0334
    3a54:	0e 94 3d 12 	call	0x247a	; 0x247a <EEPROM_u8ReadByte>
    3a58:	80 93 36 03 	sts	0x0336, r24
					if (user_entry_pass == password_user){
    3a5c:	90 91 2f 03 	lds	r25, 0x032F
    3a60:	80 91 36 03 	lds	r24, 0x0336
    3a64:	98 17       	cp	r25, r24
    3a66:	09 f0       	breq	.+2      	; 0x3a6a <main+0x368>
    3a68:	7a c0       	rjmp	.+244    	; 0x3b5e <main+0x45c>
						LCD_vSendCmnd(0x01);
    3a6a:	81 e0       	ldi	r24, 0x01	; 1
    3a6c:	0e 94 ed 17 	call	0x2fda	; 0x2fda <LCD_vSendCmnd>
						LCD_vSendString(" Welcome User");
    3a70:	82 e0       	ldi	r24, 0x02	; 2
    3a72:	91 e0       	ldi	r25, 0x01	; 1
    3a74:	0e 94 21 18 	call	0x3042	; 0x3042 <LCD_vSendString>
    3a78:	80 e0       	ldi	r24, 0x00	; 0
    3a7a:	90 e0       	ldi	r25, 0x00	; 0
    3a7c:	aa e7       	ldi	r26, 0x7A	; 122
    3a7e:	b4 e4       	ldi	r27, 0x44	; 68
    3a80:	8d ab       	std	Y+53, r24	; 0x35
    3a82:	9e ab       	std	Y+54, r25	; 0x36
    3a84:	af ab       	std	Y+55, r26	; 0x37
    3a86:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a88:	6d a9       	ldd	r22, Y+53	; 0x35
    3a8a:	7e a9       	ldd	r23, Y+54	; 0x36
    3a8c:	8f a9       	ldd	r24, Y+55	; 0x37
    3a8e:	98 ad       	ldd	r25, Y+56	; 0x38
    3a90:	20 e0       	ldi	r18, 0x00	; 0
    3a92:	30 e0       	ldi	r19, 0x00	; 0
    3a94:	4a e7       	ldi	r20, 0x7A	; 122
    3a96:	55 e4       	ldi	r21, 0x45	; 69
    3a98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a9c:	dc 01       	movw	r26, r24
    3a9e:	cb 01       	movw	r24, r22
    3aa0:	89 ab       	std	Y+49, r24	; 0x31
    3aa2:	9a ab       	std	Y+50, r25	; 0x32
    3aa4:	ab ab       	std	Y+51, r26	; 0x33
    3aa6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3aa8:	69 a9       	ldd	r22, Y+49	; 0x31
    3aaa:	7a a9       	ldd	r23, Y+50	; 0x32
    3aac:	8b a9       	ldd	r24, Y+51	; 0x33
    3aae:	9c a9       	ldd	r25, Y+52	; 0x34
    3ab0:	20 e0       	ldi	r18, 0x00	; 0
    3ab2:	30 e0       	ldi	r19, 0x00	; 0
    3ab4:	40 e8       	ldi	r20, 0x80	; 128
    3ab6:	5f e3       	ldi	r21, 0x3F	; 63
    3ab8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3abc:	88 23       	and	r24, r24
    3abe:	2c f4       	brge	.+10     	; 0x3aca <main+0x3c8>
		__ticks = 1;
    3ac0:	81 e0       	ldi	r24, 0x01	; 1
    3ac2:	90 e0       	ldi	r25, 0x00	; 0
    3ac4:	98 ab       	std	Y+48, r25	; 0x30
    3ac6:	8f a7       	std	Y+47, r24	; 0x2f
    3ac8:	3f c0       	rjmp	.+126    	; 0x3b48 <main+0x446>
	else if (__tmp > 65535)
    3aca:	69 a9       	ldd	r22, Y+49	; 0x31
    3acc:	7a a9       	ldd	r23, Y+50	; 0x32
    3ace:	8b a9       	ldd	r24, Y+51	; 0x33
    3ad0:	9c a9       	ldd	r25, Y+52	; 0x34
    3ad2:	20 e0       	ldi	r18, 0x00	; 0
    3ad4:	3f ef       	ldi	r19, 0xFF	; 255
    3ad6:	4f e7       	ldi	r20, 0x7F	; 127
    3ad8:	57 e4       	ldi	r21, 0x47	; 71
    3ada:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ade:	18 16       	cp	r1, r24
    3ae0:	4c f5       	brge	.+82     	; 0x3b34 <main+0x432>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ae2:	6d a9       	ldd	r22, Y+53	; 0x35
    3ae4:	7e a9       	ldd	r23, Y+54	; 0x36
    3ae6:	8f a9       	ldd	r24, Y+55	; 0x37
    3ae8:	98 ad       	ldd	r25, Y+56	; 0x38
    3aea:	20 e0       	ldi	r18, 0x00	; 0
    3aec:	30 e0       	ldi	r19, 0x00	; 0
    3aee:	40 e2       	ldi	r20, 0x20	; 32
    3af0:	51 e4       	ldi	r21, 0x41	; 65
    3af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3af6:	dc 01       	movw	r26, r24
    3af8:	cb 01       	movw	r24, r22
    3afa:	bc 01       	movw	r22, r24
    3afc:	cd 01       	movw	r24, r26
    3afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b02:	dc 01       	movw	r26, r24
    3b04:	cb 01       	movw	r24, r22
    3b06:	98 ab       	std	Y+48, r25	; 0x30
    3b08:	8f a7       	std	Y+47, r24	; 0x2f
    3b0a:	0f c0       	rjmp	.+30     	; 0x3b2a <main+0x428>
    3b0c:	80 e9       	ldi	r24, 0x90	; 144
    3b0e:	91 e0       	ldi	r25, 0x01	; 1
    3b10:	9e a7       	std	Y+46, r25	; 0x2e
    3b12:	8d a7       	std	Y+45, r24	; 0x2d
    3b14:	8d a5       	ldd	r24, Y+45	; 0x2d
    3b16:	9e a5       	ldd	r25, Y+46	; 0x2e
    3b18:	01 97       	sbiw	r24, 0x01	; 1
    3b1a:	f1 f7       	brne	.-4      	; 0x3b18 <main+0x416>
    3b1c:	9e a7       	std	Y+46, r25	; 0x2e
    3b1e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b20:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b22:	98 a9       	ldd	r25, Y+48	; 0x30
    3b24:	01 97       	sbiw	r24, 0x01	; 1
    3b26:	98 ab       	std	Y+48, r25	; 0x30
    3b28:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b2c:	98 a9       	ldd	r25, Y+48	; 0x30
    3b2e:	00 97       	sbiw	r24, 0x00	; 0
    3b30:	69 f7       	brne	.-38     	; 0x3b0c <main+0x40a>
    3b32:	91 c0       	rjmp	.+290    	; 0x3c56 <main+0x554>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b34:	69 a9       	ldd	r22, Y+49	; 0x31
    3b36:	7a a9       	ldd	r23, Y+50	; 0x32
    3b38:	8b a9       	ldd	r24, Y+51	; 0x33
    3b3a:	9c a9       	ldd	r25, Y+52	; 0x34
    3b3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b40:	dc 01       	movw	r26, r24
    3b42:	cb 01       	movw	r24, r22
    3b44:	98 ab       	std	Y+48, r25	; 0x30
    3b46:	8f a7       	std	Y+47, r24	; 0x2f
    3b48:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b4a:	98 a9       	ldd	r25, Y+48	; 0x30
    3b4c:	9c a7       	std	Y+44, r25	; 0x2c
    3b4e:	8b a7       	std	Y+43, r24	; 0x2b
    3b50:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b52:	9c a5       	ldd	r25, Y+44	; 0x2c
    3b54:	01 97       	sbiw	r24, 0x01	; 1
    3b56:	f1 f7       	brne	.-4      	; 0x3b54 <main+0x452>
    3b58:	9c a7       	std	Y+44, r25	; 0x2c
    3b5a:	8b a7       	std	Y+43, r24	; 0x2b
    3b5c:	7c c0       	rjmp	.+248    	; 0x3c56 <main+0x554>
						_delay_ms(1000);

					}
					else{
						LCD_vSendString("Wrong Password");
    3b5e:	80 e1       	ldi	r24, 0x10	; 16
    3b60:	91 e0       	ldi	r25, 0x01	; 1
    3b62:	0e 94 21 18 	call	0x3042	; 0x3042 <LCD_vSendString>
    3b66:	80 e0       	ldi	r24, 0x00	; 0
    3b68:	90 e0       	ldi	r25, 0x00	; 0
    3b6a:	aa e7       	ldi	r26, 0x7A	; 122
    3b6c:	b4 e4       	ldi	r27, 0x44	; 68
    3b6e:	8f a3       	std	Y+39, r24	; 0x27
    3b70:	98 a7       	std	Y+40, r25	; 0x28
    3b72:	a9 a7       	std	Y+41, r26	; 0x29
    3b74:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b76:	6f a1       	ldd	r22, Y+39	; 0x27
    3b78:	78 a5       	ldd	r23, Y+40	; 0x28
    3b7a:	89 a5       	ldd	r24, Y+41	; 0x29
    3b7c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b7e:	20 e0       	ldi	r18, 0x00	; 0
    3b80:	30 e0       	ldi	r19, 0x00	; 0
    3b82:	4a e7       	ldi	r20, 0x7A	; 122
    3b84:	55 e4       	ldi	r21, 0x45	; 69
    3b86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b8a:	dc 01       	movw	r26, r24
    3b8c:	cb 01       	movw	r24, r22
    3b8e:	8b a3       	std	Y+35, r24	; 0x23
    3b90:	9c a3       	std	Y+36, r25	; 0x24
    3b92:	ad a3       	std	Y+37, r26	; 0x25
    3b94:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3b96:	6b a1       	ldd	r22, Y+35	; 0x23
    3b98:	7c a1       	ldd	r23, Y+36	; 0x24
    3b9a:	8d a1       	ldd	r24, Y+37	; 0x25
    3b9c:	9e a1       	ldd	r25, Y+38	; 0x26
    3b9e:	20 e0       	ldi	r18, 0x00	; 0
    3ba0:	30 e0       	ldi	r19, 0x00	; 0
    3ba2:	40 e8       	ldi	r20, 0x80	; 128
    3ba4:	5f e3       	ldi	r21, 0x3F	; 63
    3ba6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3baa:	88 23       	and	r24, r24
    3bac:	2c f4       	brge	.+10     	; 0x3bb8 <main+0x4b6>
		__ticks = 1;
    3bae:	81 e0       	ldi	r24, 0x01	; 1
    3bb0:	90 e0       	ldi	r25, 0x00	; 0
    3bb2:	9a a3       	std	Y+34, r25	; 0x22
    3bb4:	89 a3       	std	Y+33, r24	; 0x21
    3bb6:	3f c0       	rjmp	.+126    	; 0x3c36 <main+0x534>
	else if (__tmp > 65535)
    3bb8:	6b a1       	ldd	r22, Y+35	; 0x23
    3bba:	7c a1       	ldd	r23, Y+36	; 0x24
    3bbc:	8d a1       	ldd	r24, Y+37	; 0x25
    3bbe:	9e a1       	ldd	r25, Y+38	; 0x26
    3bc0:	20 e0       	ldi	r18, 0x00	; 0
    3bc2:	3f ef       	ldi	r19, 0xFF	; 255
    3bc4:	4f e7       	ldi	r20, 0x7F	; 127
    3bc6:	57 e4       	ldi	r21, 0x47	; 71
    3bc8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bcc:	18 16       	cp	r1, r24
    3bce:	4c f5       	brge	.+82     	; 0x3c22 <main+0x520>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bd0:	6f a1       	ldd	r22, Y+39	; 0x27
    3bd2:	78 a5       	ldd	r23, Y+40	; 0x28
    3bd4:	89 a5       	ldd	r24, Y+41	; 0x29
    3bd6:	9a a5       	ldd	r25, Y+42	; 0x2a
    3bd8:	20 e0       	ldi	r18, 0x00	; 0
    3bda:	30 e0       	ldi	r19, 0x00	; 0
    3bdc:	40 e2       	ldi	r20, 0x20	; 32
    3bde:	51 e4       	ldi	r21, 0x41	; 65
    3be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3be4:	dc 01       	movw	r26, r24
    3be6:	cb 01       	movw	r24, r22
    3be8:	bc 01       	movw	r22, r24
    3bea:	cd 01       	movw	r24, r26
    3bec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bf0:	dc 01       	movw	r26, r24
    3bf2:	cb 01       	movw	r24, r22
    3bf4:	9a a3       	std	Y+34, r25	; 0x22
    3bf6:	89 a3       	std	Y+33, r24	; 0x21
    3bf8:	0f c0       	rjmp	.+30     	; 0x3c18 <main+0x516>
    3bfa:	80 e9       	ldi	r24, 0x90	; 144
    3bfc:	91 e0       	ldi	r25, 0x01	; 1
    3bfe:	98 a3       	std	Y+32, r25	; 0x20
    3c00:	8f 8f       	std	Y+31, r24	; 0x1f
    3c02:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3c04:	98 a1       	ldd	r25, Y+32	; 0x20
    3c06:	01 97       	sbiw	r24, 0x01	; 1
    3c08:	f1 f7       	brne	.-4      	; 0x3c06 <main+0x504>
    3c0a:	98 a3       	std	Y+32, r25	; 0x20
    3c0c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c0e:	89 a1       	ldd	r24, Y+33	; 0x21
    3c10:	9a a1       	ldd	r25, Y+34	; 0x22
    3c12:	01 97       	sbiw	r24, 0x01	; 1
    3c14:	9a a3       	std	Y+34, r25	; 0x22
    3c16:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c18:	89 a1       	ldd	r24, Y+33	; 0x21
    3c1a:	9a a1       	ldd	r25, Y+34	; 0x22
    3c1c:	00 97       	sbiw	r24, 0x00	; 0
    3c1e:	69 f7       	brne	.-38     	; 0x3bfa <main+0x4f8>
    3c20:	14 c0       	rjmp	.+40     	; 0x3c4a <main+0x548>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c22:	6b a1       	ldd	r22, Y+35	; 0x23
    3c24:	7c a1       	ldd	r23, Y+36	; 0x24
    3c26:	8d a1       	ldd	r24, Y+37	; 0x25
    3c28:	9e a1       	ldd	r25, Y+38	; 0x26
    3c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c2e:	dc 01       	movw	r26, r24
    3c30:	cb 01       	movw	r24, r22
    3c32:	9a a3       	std	Y+34, r25	; 0x22
    3c34:	89 a3       	std	Y+33, r24	; 0x21
    3c36:	89 a1       	ldd	r24, Y+33	; 0x21
    3c38:	9a a1       	ldd	r25, Y+34	; 0x22
    3c3a:	9e 8f       	std	Y+30, r25	; 0x1e
    3c3c:	8d 8f       	std	Y+29, r24	; 0x1d
    3c3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c40:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3c42:	01 97       	sbiw	r24, 0x01	; 1
    3c44:	f1 f7       	brne	.-4      	; 0x3c42 <main+0x540>
    3c46:	9e 8f       	std	Y+30, r25	; 0x1e
    3c48:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(1000);
						LCD_vSendCmnd(0x01);
    3c4a:	81 e0       	ldi	r24, 0x01	; 1
    3c4c:	0e 94 ed 17 	call	0x2fda	; 0x2fda <LCD_vSendCmnd>
						flag = 1;
    3c50:	81 e0       	ldi	r24, 0x01	; 1
    3c52:	80 93 2e 03 	sts	0x032E, r24
				}
			}
		}


		if (flag == 5){
    3c56:	80 91 2e 03 	lds	r24, 0x032E
    3c5a:	85 30       	cpi	r24, 0x05	; 5
    3c5c:	91 f4       	brne	.+36     	; 0x3c82 <main+0x580>
			LCD_vSendCmnd(0x01);
    3c5e:	81 e0       	ldi	r24, 0x01	; 1
    3c60:	0e 94 ed 17 	call	0x2fda	; 0x2fda <LCD_vSendCmnd>
			LCD_vSendString("1. Temperature");
    3c64:	8f e1       	ldi	r24, 0x1F	; 31
    3c66:	91 e0       	ldi	r25, 0x01	; 1
    3c68:	0e 94 21 18 	call	0x3042	; 0x3042 <LCD_vSendString>
			LCD_vGoTo(1,0);
    3c6c:	81 e0       	ldi	r24, 0x01	; 1
    3c6e:	60 e0       	ldi	r22, 0x00	; 0
    3c70:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_vGoTo>
			LCD_vSendString("2. Next");
    3c74:	8e e2       	ldi	r24, 0x2E	; 46
    3c76:	91 e0       	ldi	r25, 0x01	; 1
    3c78:	0e 94 21 18 	call	0x3042	; 0x3042 <LCD_vSendString>
			flag = 6;
    3c7c:	86 e0       	ldi	r24, 0x06	; 6
    3c7e:	80 93 2e 03 	sts	0x032E, r24
		}

		if (flag == 6){
    3c82:	80 91 2e 03 	lds	r24, 0x032E
    3c86:	86 30       	cpi	r24, 0x06	; 6
    3c88:	f9 f4       	brne	.+62     	; 0x3cc8 <main+0x5c6>
			key_pressed = Keypad_u8GetPressed();
    3c8a:	0e 94 74 14 	call	0x28e8	; 0x28e8 <Keypad_u8GetPressed>
    3c8e:	fe 01       	movw	r30, r28
    3c90:	e8 5b       	subi	r30, 0xB8	; 184
    3c92:	ff 4f       	sbci	r31, 0xFF	; 255
    3c94:	80 83       	st	Z, r24
			if (KEY_NOT_PRESSED != key_pressed) {
    3c96:	fe 01       	movw	r30, r28
    3c98:	e8 5b       	subi	r30, 0xB8	; 184
    3c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c9c:	80 81       	ld	r24, Z
    3c9e:	8f 3f       	cpi	r24, 0xFF	; 255
    3ca0:	99 f0       	breq	.+38     	; 0x3cc8 <main+0x5c6>
				if(key_pressed == '1'){
    3ca2:	fe 01       	movw	r30, r28
    3ca4:	e8 5b       	subi	r30, 0xB8	; 184
    3ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca8:	80 81       	ld	r24, Z
    3caa:	81 33       	cpi	r24, 0x31	; 49
    3cac:	21 f4       	brne	.+8      	; 0x3cb6 <main+0x5b4>
					flag = 50;
    3cae:	82 e3       	ldi	r24, 0x32	; 50
    3cb0:	80 93 2e 03 	sts	0x032E, r24
    3cb4:	09 c0       	rjmp	.+18     	; 0x3cc8 <main+0x5c6>
				}
				else if (key_pressed == '2'){
    3cb6:	fe 01       	movw	r30, r28
    3cb8:	e8 5b       	subi	r30, 0xB8	; 184
    3cba:	ff 4f       	sbci	r31, 0xFF	; 255
    3cbc:	80 81       	ld	r24, Z
    3cbe:	82 33       	cpi	r24, 0x32	; 50
    3cc0:	19 f4       	brne	.+6      	; 0x3cc8 <main+0x5c6>
					flag = 7;
    3cc2:	87 e0       	ldi	r24, 0x07	; 7
    3cc4:	80 93 2e 03 	sts	0x032E, r24
				}
			}
		}

		if (flag == 7){
    3cc8:	80 91 2e 03 	lds	r24, 0x032E
    3ccc:	87 30       	cpi	r24, 0x07	; 7
    3cce:	91 f4       	brne	.+36     	; 0x3cf4 <main+0x5f2>
			LCD_vSendCmnd(0x01);
    3cd0:	81 e0       	ldi	r24, 0x01	; 1
    3cd2:	0e 94 ed 17 	call	0x2fda	; 0x2fda <LCD_vSendCmnd>
			LCD_vSendString("1. Room Lights");
    3cd6:	86 e3       	ldi	r24, 0x36	; 54
    3cd8:	91 e0       	ldi	r25, 0x01	; 1
    3cda:	0e 94 21 18 	call	0x3042	; 0x3042 <LCD_vSendString>
			LCD_vGoTo(1,0);
    3cde:	81 e0       	ldi	r24, 0x01	; 1
    3ce0:	60 e0       	ldi	r22, 0x00	; 0
    3ce2:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_vGoTo>
			LCD_vSendString("2. Next");
    3ce6:	8e e2       	ldi	r24, 0x2E	; 46
    3ce8:	91 e0       	ldi	r25, 0x01	; 1
    3cea:	0e 94 21 18 	call	0x3042	; 0x3042 <LCD_vSendString>
			flag = 8;
    3cee:	88 e0       	ldi	r24, 0x08	; 8
    3cf0:	80 93 2e 03 	sts	0x032E, r24
		}
		if (flag == 8){
    3cf4:	80 91 2e 03 	lds	r24, 0x032E
    3cf8:	88 30       	cpi	r24, 0x08	; 8
    3cfa:	f9 f4       	brne	.+62     	; 0x3d3a <main+0x638>
			key_pressed = Keypad_u8GetPressed();
    3cfc:	0e 94 74 14 	call	0x28e8	; 0x28e8 <Keypad_u8GetPressed>
    3d00:	fe 01       	movw	r30, r28
    3d02:	e8 5b       	subi	r30, 0xB8	; 184
    3d04:	ff 4f       	sbci	r31, 0xFF	; 255
    3d06:	80 83       	st	Z, r24
			if (KEY_NOT_PRESSED != key_pressed) {
    3d08:	fe 01       	movw	r30, r28
    3d0a:	e8 5b       	subi	r30, 0xB8	; 184
    3d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d0e:	80 81       	ld	r24, Z
    3d10:	8f 3f       	cpi	r24, 0xFF	; 255
    3d12:	99 f0       	breq	.+38     	; 0x3d3a <main+0x638>
				if(key_pressed == '1'){
    3d14:	fe 01       	movw	r30, r28
    3d16:	e8 5b       	subi	r30, 0xB8	; 184
    3d18:	ff 4f       	sbci	r31, 0xFF	; 255
    3d1a:	80 81       	ld	r24, Z
    3d1c:	81 33       	cpi	r24, 0x31	; 49
    3d1e:	21 f4       	brne	.+8      	; 0x3d28 <main+0x626>
					flag = 53;
    3d20:	85 e3       	ldi	r24, 0x35	; 53
    3d22:	80 93 2e 03 	sts	0x032E, r24
    3d26:	09 c0       	rjmp	.+18     	; 0x3d3a <main+0x638>
				}
				else if (key_pressed == '2'){
    3d28:	fe 01       	movw	r30, r28
    3d2a:	e8 5b       	subi	r30, 0xB8	; 184
    3d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d2e:	80 81       	ld	r24, Z
    3d30:	82 33       	cpi	r24, 0x32	; 50
    3d32:	19 f4       	brne	.+6      	; 0x3d3a <main+0x638>
					flag = 9;
    3d34:	89 e0       	ldi	r24, 0x09	; 9
    3d36:	80 93 2e 03 	sts	0x032E, r24
				}
			}
		}

		if (flag == 9){
    3d3a:	80 91 2e 03 	lds	r24, 0x032E
    3d3e:	89 30       	cpi	r24, 0x09	; 9
    3d40:	91 f4       	brne	.+36     	; 0x3d66 <main+0x664>
			LCD_vSendCmnd(0x01);
    3d42:	81 e0       	ldi	r24, 0x01	; 1
    3d44:	0e 94 ed 17 	call	0x2fda	; 0x2fda <LCD_vSendCmnd>
			LCD_vSendString("1. Door");
    3d48:	85 e4       	ldi	r24, 0x45	; 69
    3d4a:	91 e0       	ldi	r25, 0x01	; 1
    3d4c:	0e 94 21 18 	call	0x3042	; 0x3042 <LCD_vSendString>
			LCD_vGoTo(1,0);
    3d50:	81 e0       	ldi	r24, 0x01	; 1
    3d52:	60 e0       	ldi	r22, 0x00	; 0
    3d54:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_vGoTo>
			LCD_vSendString("2. Next");
    3d58:	8e e2       	ldi	r24, 0x2E	; 46
    3d5a:	91 e0       	ldi	r25, 0x01	; 1
    3d5c:	0e 94 21 18 	call	0x3042	; 0x3042 <LCD_vSendString>
			flag = 10;
    3d60:	8a e0       	ldi	r24, 0x0A	; 10
    3d62:	80 93 2e 03 	sts	0x032E, r24
		}

		if (flag == 10){
    3d66:	80 91 2e 03 	lds	r24, 0x032E
    3d6a:	8a 30       	cpi	r24, 0x0A	; 10
    3d6c:	f9 f4       	brne	.+62     	; 0x3dac <main+0x6aa>
			key_pressed = Keypad_u8GetPressed();
    3d6e:	0e 94 74 14 	call	0x28e8	; 0x28e8 <Keypad_u8GetPressed>
    3d72:	fe 01       	movw	r30, r28
    3d74:	e8 5b       	subi	r30, 0xB8	; 184
    3d76:	ff 4f       	sbci	r31, 0xFF	; 255
    3d78:	80 83       	st	Z, r24
			if (KEY_NOT_PRESSED != key_pressed) {
    3d7a:	fe 01       	movw	r30, r28
    3d7c:	e8 5b       	subi	r30, 0xB8	; 184
    3d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d80:	80 81       	ld	r24, Z
    3d82:	8f 3f       	cpi	r24, 0xFF	; 255
    3d84:	99 f0       	breq	.+38     	; 0x3dac <main+0x6aa>
				if(key_pressed == '1'){
    3d86:	fe 01       	movw	r30, r28
    3d88:	e8 5b       	subi	r30, 0xB8	; 184
    3d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8c:	80 81       	ld	r24, Z
    3d8e:	81 33       	cpi	r24, 0x31	; 49
    3d90:	21 f4       	brne	.+8      	; 0x3d9a <main+0x698>
					flag = 57;
    3d92:	89 e3       	ldi	r24, 0x39	; 57
    3d94:	80 93 2e 03 	sts	0x032E, r24
    3d98:	09 c0       	rjmp	.+18     	; 0x3dac <main+0x6aa>
				}
				else if (key_pressed == '2'){
    3d9a:	fe 01       	movw	r30, r28
    3d9c:	e8 5b       	subi	r30, 0xB8	; 184
    3d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3da0:	80 81       	ld	r24, Z
    3da2:	82 33       	cpi	r24, 0x32	; 50
    3da4:	19 f4       	brne	.+6      	; 0x3dac <main+0x6aa>
					flag = 5;
    3da6:	85 e0       	ldi	r24, 0x05	; 5
    3da8:	80 93 2e 03 	sts	0x032E, r24

		/*
		 * USER ACTIONS
		 */

		ADC_vChannel_Select(0);
    3dac:	80 e0       	ldi	r24, 0x00	; 0
    3dae:	0e 94 9a 07 	call	0xf34	; 0xf34 <ADC_vChannel_Select>
		ADC_vStart_Conversion();
    3db2:	0e 94 b6 07 	call	0xf6c	; 0xf6c <ADC_vStart_Conversion>

		dig_read=0.25*ADC_u16PollingRead();
    3db6:	0e 94 dd 07 	call	0xfba	; 0xfba <ADC_u16PollingRead>
    3dba:	cc 01       	movw	r24, r24
    3dbc:	a0 e0       	ldi	r26, 0x00	; 0
    3dbe:	b0 e0       	ldi	r27, 0x00	; 0
    3dc0:	bc 01       	movw	r22, r24
    3dc2:	cd 01       	movw	r24, r26
    3dc4:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3dc8:	dc 01       	movw	r26, r24
    3dca:	cb 01       	movw	r24, r22
    3dcc:	bc 01       	movw	r22, r24
    3dce:	cd 01       	movw	r24, r26
    3dd0:	20 e0       	ldi	r18, 0x00	; 0
    3dd2:	30 e0       	ldi	r19, 0x00	; 0
    3dd4:	40 e8       	ldi	r20, 0x80	; 128
    3dd6:	5e e3       	ldi	r21, 0x3E	; 62
    3dd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ddc:	dc 01       	movw	r26, r24
    3dde:	cb 01       	movw	r24, r22
    3de0:	bc 01       	movw	r22, r24
    3de2:	cd 01       	movw	r24, r26
    3de4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3de8:	dc 01       	movw	r26, r24
    3dea:	cb 01       	movw	r24, r22
    3dec:	80 93 32 03 	sts	0x0332, r24

		if(dig_read > temp_entry){
    3df0:	90 91 32 03 	lds	r25, 0x0332
    3df4:	80 91 09 03 	lds	r24, 0x0309
    3df8:	89 17       	cp	r24, r25
    3dfa:	38 f4       	brcc	.+14     	; 0x3e0a <main+0x708>
			DC_vOn(DC_CLOCK_WISE);
    3dfc:	81 e0       	ldi	r24, 0x01	; 1
    3dfe:	0e 94 65 11 	call	0x22ca	; 0x22ca <DC_vOn>
			DC_vControlSpeed(50);
    3e02:	82 e3       	ldi	r24, 0x32	; 50
    3e04:	0e 94 82 11 	call	0x2304	; 0x2304 <DC_vControlSpeed>
    3e08:	02 c0       	rjmp	.+4      	; 0x3e0e <main+0x70c>
		}
		else{
			DC_vOff();
    3e0a:	0e 94 8f 11 	call	0x231e	; 0x231e <DC_vOff>
		}

		if(flag == 50){
    3e0e:	80 91 2e 03 	lds	r24, 0x032E
    3e12:	82 33       	cpi	r24, 0x32	; 50
    3e14:	81 f4       	brne	.+32     	; 0x3e36 <main+0x734>
			LCD_vSendCmnd(0x01);
    3e16:	81 e0       	ldi	r24, 0x01	; 1
    3e18:	0e 94 ed 17 	call	0x2fda	; 0x2fda <LCD_vSendCmnd>
			LCD_vSendString("Enter Desired Temp:");
    3e1c:	8d e4       	ldi	r24, 0x4D	; 77
    3e1e:	91 e0       	ldi	r25, 0x01	; 1
    3e20:	0e 94 21 18 	call	0x3042	; 0x3042 <LCD_vSendString>
			LCD_vGoTo(1,0);
    3e24:	81 e0       	ldi	r24, 0x01	; 1
    3e26:	60 e0       	ldi	r22, 0x00	; 0
    3e28:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_vGoTo>
			temp_entry = 0;
    3e2c:	10 92 09 03 	sts	0x0309, r1
			flag = 51;
    3e30:	83 e3       	ldi	r24, 0x33	; 51
    3e32:	80 93 2e 03 	sts	0x032E, r24
		}

		if(flag == 51){
    3e36:	80 91 2e 03 	lds	r24, 0x032E
    3e3a:	83 33       	cpi	r24, 0x33	; 51
    3e3c:	c9 f5       	brne	.+114    	; 0x3eb0 <main+0x7ae>
			key_pressed = Keypad_u8GetPressed();
    3e3e:	0e 94 74 14 	call	0x28e8	; 0x28e8 <Keypad_u8GetPressed>
    3e42:	fe 01       	movw	r30, r28
    3e44:	e8 5b       	subi	r30, 0xB8	; 184
    3e46:	ff 4f       	sbci	r31, 0xFF	; 255
    3e48:	80 83       	st	Z, r24
			if (KEY_NOT_PRESSED != key_pressed) {
    3e4a:	fe 01       	movw	r30, r28
    3e4c:	e8 5b       	subi	r30, 0xB8	; 184
    3e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e50:	80 81       	ld	r24, Z
    3e52:	8f 3f       	cpi	r24, 0xFF	; 255
    3e54:	69 f1       	breq	.+90     	; 0x3eb0 <main+0x7ae>
				if(key_pressed != '='){
    3e56:	fe 01       	movw	r30, r28
    3e58:	e8 5b       	subi	r30, 0xB8	; 184
    3e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e5c:	80 81       	ld	r24, Z
    3e5e:	8d 33       	cpi	r24, 0x3D	; 61
    3e60:	09 f1       	breq	.+66     	; 0x3ea4 <main+0x7a2>
					LCD_vSendData(key_pressed);
    3e62:	fe 01       	movw	r30, r28
    3e64:	e8 5b       	subi	r30, 0xB8	; 184
    3e66:	ff 4f       	sbci	r31, 0xFF	; 255
    3e68:	80 81       	ld	r24, Z
    3e6a:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vSendData>
					temp_entry *= 10;
    3e6e:	80 91 09 03 	lds	r24, 0x0309
    3e72:	88 2f       	mov	r24, r24
    3e74:	90 e0       	ldi	r25, 0x00	; 0
    3e76:	9c 01       	movw	r18, r24
    3e78:	22 0f       	add	r18, r18
    3e7a:	33 1f       	adc	r19, r19
    3e7c:	c9 01       	movw	r24, r18
    3e7e:	88 0f       	add	r24, r24
    3e80:	99 1f       	adc	r25, r25
    3e82:	88 0f       	add	r24, r24
    3e84:	99 1f       	adc	r25, r25
    3e86:	82 0f       	add	r24, r18
    3e88:	93 1f       	adc	r25, r19
    3e8a:	80 93 09 03 	sts	0x0309, r24
					temp_entry += key_pressed - '0';
    3e8e:	90 91 09 03 	lds	r25, 0x0309
    3e92:	fe 01       	movw	r30, r28
    3e94:	e8 5b       	subi	r30, 0xB8	; 184
    3e96:	ff 4f       	sbci	r31, 0xFF	; 255
    3e98:	80 81       	ld	r24, Z
    3e9a:	89 0f       	add	r24, r25
    3e9c:	80 53       	subi	r24, 0x30	; 48
    3e9e:	80 93 09 03 	sts	0x0309, r24
    3ea2:	06 c0       	rjmp	.+12     	; 0x3eb0 <main+0x7ae>
				}
				else{
					flag = 52;
    3ea4:	84 e3       	ldi	r24, 0x34	; 52
    3ea6:	80 93 2e 03 	sts	0x032E, r24
					LCD_vSendCmnd(0x01);
    3eaa:	81 e0       	ldi	r24, 0x01	; 1
    3eac:	0e 94 ed 17 	call	0x2fda	; 0x2fda <LCD_vSendCmnd>
				}
			}
		}

		if(flag == 52){
    3eb0:	80 91 2e 03 	lds	r24, 0x032E
    3eb4:	84 33       	cpi	r24, 0x34	; 52
    3eb6:	e9 f4       	brne	.+58     	; 0x3ef2 <main+0x7f0>
			temp(temp_entry);
    3eb8:	80 91 09 03 	lds	r24, 0x0309
    3ebc:	0e 94 13 23 	call	0x4626	; 0x4626 <temp>
			key_pressed = Keypad_u8GetPressed();
    3ec0:	0e 94 74 14 	call	0x28e8	; 0x28e8 <Keypad_u8GetPressed>
    3ec4:	fe 01       	movw	r30, r28
    3ec6:	e8 5b       	subi	r30, 0xB8	; 184
    3ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eca:	80 83       	st	Z, r24
			if('-' == key_pressed){
    3ecc:	fe 01       	movw	r30, r28
    3ece:	e8 5b       	subi	r30, 0xB8	; 184
    3ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed2:	80 81       	ld	r24, Z
    3ed4:	8d 32       	cpi	r24, 0x2D	; 45
    3ed6:	21 f4       	brne	.+8      	; 0x3ee0 <main+0x7de>
				flag = 5;
    3ed8:	85 e0       	ldi	r24, 0x05	; 5
    3eda:	80 93 2e 03 	sts	0x032E, r24
    3ede:	09 c0       	rjmp	.+18     	; 0x3ef2 <main+0x7f0>
			}
			else if('c' == key_pressed){
    3ee0:	fe 01       	movw	r30, r28
    3ee2:	e8 5b       	subi	r30, 0xB8	; 184
    3ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee6:	80 81       	ld	r24, Z
    3ee8:	83 36       	cpi	r24, 0x63	; 99
    3eea:	19 f4       	brne	.+6      	; 0x3ef2 <main+0x7f0>
				flag = 255;
    3eec:	8f ef       	ldi	r24, 0xFF	; 255
    3eee:	80 93 2e 03 	sts	0x032E, r24
			}
		}

		if(flag == 53){
    3ef2:	80 91 2e 03 	lds	r24, 0x032E
    3ef6:	85 33       	cpi	r24, 0x35	; 53
    3ef8:	51 f4       	brne	.+20     	; 0x3f0e <main+0x80c>
			LCD_vSendCmnd(0x01);
    3efa:	81 e0       	ldi	r24, 0x01	; 1
    3efc:	0e 94 ed 17 	call	0x2fda	; 0x2fda <LCD_vSendCmnd>
			LCD_vSendString("Enter Room Num:");
    3f00:	81 e6       	ldi	r24, 0x61	; 97
    3f02:	91 e0       	ldi	r25, 0x01	; 1
    3f04:	0e 94 21 18 	call	0x3042	; 0x3042 <LCD_vSendString>
			flag = 54;
    3f08:	86 e3       	ldi	r24, 0x36	; 54
    3f0a:	80 93 2e 03 	sts	0x032E, r24

		}

		if (flag == 54){
    3f0e:	80 91 2e 03 	lds	r24, 0x032E
    3f12:	86 33       	cpi	r24, 0x36	; 54
    3f14:	39 f5       	brne	.+78     	; 0x3f64 <main+0x862>
			choice = Keypad_u8GetPressed();
    3f16:	0e 94 74 14 	call	0x28e8	; 0x28e8 <Keypad_u8GetPressed>
    3f1a:	80 93 35 03 	sts	0x0335, r24
			if (KEY_NOT_PRESSED != choice){
    3f1e:	80 91 35 03 	lds	r24, 0x0335
    3f22:	8f 3f       	cpi	r24, 0xFF	; 255
    3f24:	f9 f0       	breq	.+62     	; 0x3f64 <main+0x862>
				if(choice <= '5' && choice >= '1'){
    3f26:	80 91 35 03 	lds	r24, 0x0335
    3f2a:	86 33       	cpi	r24, 0x36	; 54
    3f2c:	40 f4       	brcc	.+16     	; 0x3f3e <main+0x83c>
    3f2e:	80 91 35 03 	lds	r24, 0x0335
    3f32:	81 33       	cpi	r24, 0x31	; 49
    3f34:	20 f0       	brcs	.+8      	; 0x3f3e <main+0x83c>
					flag = 55;
    3f36:	87 e3       	ldi	r24, 0x37	; 55
    3f38:	80 93 2e 03 	sts	0x032E, r24
    3f3c:	13 c0       	rjmp	.+38     	; 0x3f64 <main+0x862>
				}
				else if('-' == key_pressed){
    3f3e:	fe 01       	movw	r30, r28
    3f40:	e8 5b       	subi	r30, 0xB8	; 184
    3f42:	ff 4f       	sbci	r31, 0xFF	; 255
    3f44:	80 81       	ld	r24, Z
    3f46:	8d 32       	cpi	r24, 0x2D	; 45
    3f48:	21 f4       	brne	.+8      	; 0x3f52 <main+0x850>
					flag = 5;
    3f4a:	85 e0       	ldi	r24, 0x05	; 5
    3f4c:	80 93 2e 03 	sts	0x032E, r24
    3f50:	09 c0       	rjmp	.+18     	; 0x3f64 <main+0x862>
				}
				else if('c' == key_pressed){
    3f52:	fe 01       	movw	r30, r28
    3f54:	e8 5b       	subi	r30, 0xB8	; 184
    3f56:	ff 4f       	sbci	r31, 0xFF	; 255
    3f58:	80 81       	ld	r24, Z
    3f5a:	83 36       	cpi	r24, 0x63	; 99
    3f5c:	19 f4       	brne	.+6      	; 0x3f64 <main+0x862>
					flag = 255;
    3f5e:	8f ef       	ldi	r24, 0xFF	; 255
    3f60:	80 93 2e 03 	sts	0x032E, r24
				}
			}
		}

		if(flag == 55){
    3f64:	80 91 2e 03 	lds	r24, 0x032E
    3f68:	87 33       	cpi	r24, 0x37	; 55
    3f6a:	91 f4       	brne	.+36     	; 0x3f90 <main+0x88e>
			LCD_vSendCmnd(0x01);
    3f6c:	81 e0       	ldi	r24, 0x01	; 1
    3f6e:	0e 94 ed 17 	call	0x2fda	; 0x2fda <LCD_vSendCmnd>
			LCD_vSendString("1. On");
    3f72:	81 e7       	ldi	r24, 0x71	; 113
    3f74:	91 e0       	ldi	r25, 0x01	; 1
    3f76:	0e 94 21 18 	call	0x3042	; 0x3042 <LCD_vSendString>
			LCD_vGoTo(1,0);
    3f7a:	81 e0       	ldi	r24, 0x01	; 1
    3f7c:	60 e0       	ldi	r22, 0x00	; 0
    3f7e:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_vGoTo>
			LCD_vSendString("2. Off");
    3f82:	87 e7       	ldi	r24, 0x77	; 119
    3f84:	91 e0       	ldi	r25, 0x01	; 1
    3f86:	0e 94 21 18 	call	0x3042	; 0x3042 <LCD_vSendString>
			flag = 56;
    3f8a:	88 e3       	ldi	r24, 0x38	; 56
    3f8c:	80 93 2e 03 	sts	0x032E, r24
		}

		if(flag == 56){
    3f90:	80 91 2e 03 	lds	r24, 0x032E
    3f94:	88 33       	cpi	r24, 0x38	; 56
    3f96:	09 f0       	breq	.+2      	; 0x3f9a <main+0x898>
    3f98:	c5 c0       	rjmp	.+394    	; 0x4124 <main+0xa22>
			key_pressed = KEY_NOT_PRESSED;
    3f9a:	fe 01       	movw	r30, r28
    3f9c:	e8 5b       	subi	r30, 0xB8	; 184
    3f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa0:	8f ef       	ldi	r24, 0xFF	; 255
    3fa2:	80 83       	st	Z, r24
			key_pressed = Keypad_u8GetPressed();
    3fa4:	0e 94 74 14 	call	0x28e8	; 0x28e8 <Keypad_u8GetPressed>
    3fa8:	fe 01       	movw	r30, r28
    3faa:	e8 5b       	subi	r30, 0xB8	; 184
    3fac:	ff 4f       	sbci	r31, 0xFF	; 255
    3fae:	80 83       	st	Z, r24
			if (KEY_NOT_PRESSED != key_pressed && ('1' == key_pressed || '2' == key_pressed)) {
    3fb0:	fe 01       	movw	r30, r28
    3fb2:	e8 5b       	subi	r30, 0xB8	; 184
    3fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb6:	80 81       	ld	r24, Z
    3fb8:	8f 3f       	cpi	r24, 0xFF	; 255
    3fba:	09 f4       	brne	.+2      	; 0x3fbe <main+0x8bc>
    3fbc:	a0 c0       	rjmp	.+320    	; 0x40fe <main+0x9fc>
    3fbe:	fe 01       	movw	r30, r28
    3fc0:	e8 5b       	subi	r30, 0xB8	; 184
    3fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc4:	80 81       	ld	r24, Z
    3fc6:	81 33       	cpi	r24, 0x31	; 49
    3fc8:	39 f0       	breq	.+14     	; 0x3fd8 <main+0x8d6>
    3fca:	fe 01       	movw	r30, r28
    3fcc:	e8 5b       	subi	r30, 0xB8	; 184
    3fce:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd0:	80 81       	ld	r24, Z
    3fd2:	82 33       	cpi	r24, 0x32	; 50
    3fd4:	09 f0       	breq	.+2      	; 0x3fd8 <main+0x8d6>
    3fd6:	93 c0       	rjmp	.+294    	; 0x40fe <main+0x9fc>
				switch(choice){
    3fd8:	80 91 35 03 	lds	r24, 0x0335
    3fdc:	28 2f       	mov	r18, r24
    3fde:	30 e0       	ldi	r19, 0x00	; 0
    3fe0:	2b 96       	adiw	r28, 0x0b	; 11
    3fe2:	3f af       	std	Y+63, r19	; 0x3f
    3fe4:	2e af       	std	Y+62, r18	; 0x3e
    3fe6:	2b 97       	sbiw	r28, 0x0b	; 11
    3fe8:	2b 96       	adiw	r28, 0x0b	; 11
    3fea:	8e ad       	ldd	r24, Y+62	; 0x3e
    3fec:	9f ad       	ldd	r25, Y+63	; 0x3f
    3fee:	2b 97       	sbiw	r28, 0x0b	; 11
    3ff0:	83 33       	cpi	r24, 0x33	; 51
    3ff2:	91 05       	cpc	r25, r1
    3ff4:	09 f4       	brne	.+2      	; 0x3ff8 <main+0x8f6>
    3ff6:	4d c0       	rjmp	.+154    	; 0x4092 <main+0x990>
    3ff8:	2b 96       	adiw	r28, 0x0b	; 11
    3ffa:	ee ad       	ldd	r30, Y+62	; 0x3e
    3ffc:	ff ad       	ldd	r31, Y+63	; 0x3f
    3ffe:	2b 97       	sbiw	r28, 0x0b	; 11
    4000:	e4 33       	cpi	r30, 0x34	; 52
    4002:	f1 05       	cpc	r31, r1
    4004:	7c f4       	brge	.+30     	; 0x4024 <main+0x922>
    4006:	2b 96       	adiw	r28, 0x0b	; 11
    4008:	2e ad       	ldd	r18, Y+62	; 0x3e
    400a:	3f ad       	ldd	r19, Y+63	; 0x3f
    400c:	2b 97       	sbiw	r28, 0x0b	; 11
    400e:	21 33       	cpi	r18, 0x31	; 49
    4010:	31 05       	cpc	r19, r1
    4012:	c9 f0       	breq	.+50     	; 0x4046 <main+0x944>
    4014:	2b 96       	adiw	r28, 0x0b	; 11
    4016:	8e ad       	ldd	r24, Y+62	; 0x3e
    4018:	9f ad       	ldd	r25, Y+63	; 0x3f
    401a:	2b 97       	sbiw	r28, 0x0b	; 11
    401c:	82 33       	cpi	r24, 0x32	; 50
    401e:	91 05       	cpc	r25, r1
    4020:	29 f1       	breq	.+74     	; 0x406c <main+0x96a>
    4022:	80 c0       	rjmp	.+256    	; 0x4124 <main+0xa22>
    4024:	2b 96       	adiw	r28, 0x0b	; 11
    4026:	ee ad       	ldd	r30, Y+62	; 0x3e
    4028:	ff ad       	ldd	r31, Y+63	; 0x3f
    402a:	2b 97       	sbiw	r28, 0x0b	; 11
    402c:	e4 33       	cpi	r30, 0x34	; 52
    402e:	f1 05       	cpc	r31, r1
    4030:	09 f4       	brne	.+2      	; 0x4034 <main+0x932>
    4032:	41 c0       	rjmp	.+130    	; 0x40b6 <main+0x9b4>
    4034:	2b 96       	adiw	r28, 0x0b	; 11
    4036:	2e ad       	ldd	r18, Y+62	; 0x3e
    4038:	3f ad       	ldd	r19, Y+63	; 0x3f
    403a:	2b 97       	sbiw	r28, 0x0b	; 11
    403c:	25 33       	cpi	r18, 0x35	; 53
    403e:	31 05       	cpc	r19, r1
    4040:	09 f4       	brne	.+2      	; 0x4044 <main+0x942>
    4042:	4b c0       	rjmp	.+150    	; 0x40da <main+0x9d8>
    4044:	6f c0       	rjmp	.+222    	; 0x4124 <main+0xa22>
				case '1':
					if(key_pressed == '1'){
    4046:	fe 01       	movw	r30, r28
    4048:	e8 5b       	subi	r30, 0xB8	; 184
    404a:	ff 4f       	sbci	r31, 0xFF	; 255
    404c:	80 81       	ld	r24, Z
    404e:	81 33       	cpi	r24, 0x31	; 49
    4050:	19 f4       	brne	.+6      	; 0x4058 <main+0x956>
						openledroom1();
    4052:	0e 94 8f 22 	call	0x451e	; 0x451e <openledroom1>
    4056:	66 c0       	rjmp	.+204    	; 0x4124 <main+0xa22>
					}
					else if (key_pressed == '2'){
    4058:	fe 01       	movw	r30, r28
    405a:	e8 5b       	subi	r30, 0xB8	; 184
    405c:	ff 4f       	sbci	r31, 0xFF	; 255
    405e:	80 81       	ld	r24, Z
    4060:	82 33       	cpi	r24, 0x32	; 50
    4062:	09 f0       	breq	.+2      	; 0x4066 <main+0x964>
    4064:	5f c0       	rjmp	.+190    	; 0x4124 <main+0xa22>
						closeledroom1();
    4066:	0e 94 9a 22 	call	0x4534	; 0x4534 <closeledroom1>
    406a:	5c c0       	rjmp	.+184    	; 0x4124 <main+0xa22>
					}
					break;
				case '2':
					if(key_pressed == '1'){
    406c:	fe 01       	movw	r30, r28
    406e:	e8 5b       	subi	r30, 0xB8	; 184
    4070:	ff 4f       	sbci	r31, 0xFF	; 255
    4072:	80 81       	ld	r24, Z
    4074:	81 33       	cpi	r24, 0x31	; 49
    4076:	19 f4       	brne	.+6      	; 0x407e <main+0x97c>
						openledroom2();
    4078:	0e 94 a5 22 	call	0x454a	; 0x454a <openledroom2>
    407c:	53 c0       	rjmp	.+166    	; 0x4124 <main+0xa22>
					}
					else if (key_pressed == '2'){
    407e:	fe 01       	movw	r30, r28
    4080:	e8 5b       	subi	r30, 0xB8	; 184
    4082:	ff 4f       	sbci	r31, 0xFF	; 255
    4084:	80 81       	ld	r24, Z
    4086:	82 33       	cpi	r24, 0x32	; 50
    4088:	09 f0       	breq	.+2      	; 0x408c <main+0x98a>
    408a:	4c c0       	rjmp	.+152    	; 0x4124 <main+0xa22>
						closeledroom2();
    408c:	0e 94 b0 22 	call	0x4560	; 0x4560 <closeledroom2>
    4090:	49 c0       	rjmp	.+146    	; 0x4124 <main+0xa22>
					}
					break;
				case '3':
					if(key_pressed == '1'){
    4092:	fe 01       	movw	r30, r28
    4094:	e8 5b       	subi	r30, 0xB8	; 184
    4096:	ff 4f       	sbci	r31, 0xFF	; 255
    4098:	80 81       	ld	r24, Z
    409a:	81 33       	cpi	r24, 0x31	; 49
    409c:	19 f4       	brne	.+6      	; 0x40a4 <main+0x9a2>
						openledroom3();
    409e:	0e 94 bb 22 	call	0x4576	; 0x4576 <openledroom3>
    40a2:	40 c0       	rjmp	.+128    	; 0x4124 <main+0xa22>
					}
					else if (key_pressed == '2'){
    40a4:	fe 01       	movw	r30, r28
    40a6:	e8 5b       	subi	r30, 0xB8	; 184
    40a8:	ff 4f       	sbci	r31, 0xFF	; 255
    40aa:	80 81       	ld	r24, Z
    40ac:	82 33       	cpi	r24, 0x32	; 50
    40ae:	d1 f5       	brne	.+116    	; 0x4124 <main+0xa22>
						closeledroom3();
    40b0:	0e 94 c6 22 	call	0x458c	; 0x458c <closeledroom3>
    40b4:	37 c0       	rjmp	.+110    	; 0x4124 <main+0xa22>
					}
					break;
				case '4':
					if(key_pressed == '1'){
    40b6:	fe 01       	movw	r30, r28
    40b8:	e8 5b       	subi	r30, 0xB8	; 184
    40ba:	ff 4f       	sbci	r31, 0xFF	; 255
    40bc:	80 81       	ld	r24, Z
    40be:	81 33       	cpi	r24, 0x31	; 49
    40c0:	19 f4       	brne	.+6      	; 0x40c8 <main+0x9c6>
						openledroom4();
    40c2:	0e 94 d1 22 	call	0x45a2	; 0x45a2 <openledroom4>
    40c6:	2e c0       	rjmp	.+92     	; 0x4124 <main+0xa22>
					}
					else if (key_pressed == '2'){
    40c8:	fe 01       	movw	r30, r28
    40ca:	e8 5b       	subi	r30, 0xB8	; 184
    40cc:	ff 4f       	sbci	r31, 0xFF	; 255
    40ce:	80 81       	ld	r24, Z
    40d0:	82 33       	cpi	r24, 0x32	; 50
    40d2:	41 f5       	brne	.+80     	; 0x4124 <main+0xa22>
						closeledroom4();
    40d4:	0e 94 dc 22 	call	0x45b8	; 0x45b8 <closeledroom4>
    40d8:	25 c0       	rjmp	.+74     	; 0x4124 <main+0xa22>
					}
					break;
				case '5':
					if(key_pressed == '1'){
    40da:	fe 01       	movw	r30, r28
    40dc:	e8 5b       	subi	r30, 0xB8	; 184
    40de:	ff 4f       	sbci	r31, 0xFF	; 255
    40e0:	80 81       	ld	r24, Z
    40e2:	81 33       	cpi	r24, 0x31	; 49
    40e4:	19 f4       	brne	.+6      	; 0x40ec <main+0x9ea>
						openledroom5();
    40e6:	0e 94 e7 22 	call	0x45ce	; 0x45ce <openledroom5>
    40ea:	1c c0       	rjmp	.+56     	; 0x4124 <main+0xa22>
					}
					else if (key_pressed == '2'){
    40ec:	fe 01       	movw	r30, r28
    40ee:	e8 5b       	subi	r30, 0xB8	; 184
    40f0:	ff 4f       	sbci	r31, 0xFF	; 255
    40f2:	80 81       	ld	r24, Z
    40f4:	82 33       	cpi	r24, 0x32	; 50
    40f6:	b1 f4       	brne	.+44     	; 0x4124 <main+0xa22>
						closeledroom5();
    40f8:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <closeledroom5>
    40fc:	13 c0       	rjmp	.+38     	; 0x4124 <main+0xa22>
					}
					break;
				}
			}
			else if('-' == key_pressed){
    40fe:	fe 01       	movw	r30, r28
    4100:	e8 5b       	subi	r30, 0xB8	; 184
    4102:	ff 4f       	sbci	r31, 0xFF	; 255
    4104:	80 81       	ld	r24, Z
    4106:	8d 32       	cpi	r24, 0x2D	; 45
    4108:	21 f4       	brne	.+8      	; 0x4112 <main+0xa10>
				flag = 5;
    410a:	85 e0       	ldi	r24, 0x05	; 5
    410c:	80 93 2e 03 	sts	0x032E, r24
    4110:	09 c0       	rjmp	.+18     	; 0x4124 <main+0xa22>
			}
			else if('c' == key_pressed){
    4112:	fe 01       	movw	r30, r28
    4114:	e8 5b       	subi	r30, 0xB8	; 184
    4116:	ff 4f       	sbci	r31, 0xFF	; 255
    4118:	80 81       	ld	r24, Z
    411a:	83 36       	cpi	r24, 0x63	; 99
    411c:	19 f4       	brne	.+6      	; 0x4124 <main+0xa22>
				flag = 255;
    411e:	8f ef       	ldi	r24, 0xFF	; 255
    4120:	80 93 2e 03 	sts	0x032E, r24
			}
		}

		if(flag == 57){
    4124:	80 91 2e 03 	lds	r24, 0x032E
    4128:	89 33       	cpi	r24, 0x39	; 57
    412a:	91 f4       	brne	.+36     	; 0x4150 <main+0xa4e>
			LCD_vSendCmnd(0x01);
    412c:	81 e0       	ldi	r24, 0x01	; 1
    412e:	0e 94 ed 17 	call	0x2fda	; 0x2fda <LCD_vSendCmnd>
			LCD_vSendString("1. Open");
    4132:	8e e7       	ldi	r24, 0x7E	; 126
    4134:	91 e0       	ldi	r25, 0x01	; 1
    4136:	0e 94 21 18 	call	0x3042	; 0x3042 <LCD_vSendString>
			LCD_vGoTo(1,0);
    413a:	81 e0       	ldi	r24, 0x01	; 1
    413c:	60 e0       	ldi	r22, 0x00	; 0
    413e:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_vGoTo>
			LCD_vSendString("2. Close");
    4142:	86 e8       	ldi	r24, 0x86	; 134
    4144:	91 e0       	ldi	r25, 0x01	; 1
    4146:	0e 94 21 18 	call	0x3042	; 0x3042 <LCD_vSendString>
			flag = 58;
    414a:	8a e3       	ldi	r24, 0x3A	; 58
    414c:	80 93 2e 03 	sts	0x032E, r24
		}

		if(flag == 58){
    4150:	80 91 2e 03 	lds	r24, 0x032E
    4154:	8a 33       	cpi	r24, 0x3A	; 58
    4156:	89 f5       	brne	.+98     	; 0x41ba <main+0xab8>
			key_pressed = Keypad_u8GetPressed();
    4158:	0e 94 74 14 	call	0x28e8	; 0x28e8 <Keypad_u8GetPressed>
    415c:	fe 01       	movw	r30, r28
    415e:	e8 5b       	subi	r30, 0xB8	; 184
    4160:	ff 4f       	sbci	r31, 0xFF	; 255
    4162:	80 83       	st	Z, r24
			if(KEY_NOT_PRESSED != key_pressed){
    4164:	fe 01       	movw	r30, r28
    4166:	e8 5b       	subi	r30, 0xB8	; 184
    4168:	ff 4f       	sbci	r31, 0xFF	; 255
    416a:	80 81       	ld	r24, Z
    416c:	8f 3f       	cpi	r24, 0xFF	; 255
    416e:	29 f1       	breq	.+74     	; 0x41ba <main+0xab8>
				if(key_pressed == '1'){
    4170:	fe 01       	movw	r30, r28
    4172:	e8 5b       	subi	r30, 0xB8	; 184
    4174:	ff 4f       	sbci	r31, 0xFF	; 255
    4176:	80 81       	ld	r24, Z
    4178:	81 33       	cpi	r24, 0x31	; 49
    417a:	19 f4       	brne	.+6      	; 0x4182 <main+0xa80>
					OpenDoor();
    417c:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <OpenDoor>
    4180:	1c c0       	rjmp	.+56     	; 0x41ba <main+0xab8>
				}
				else if (key_pressed == '2'){
    4182:	fe 01       	movw	r30, r28
    4184:	e8 5b       	subi	r30, 0xB8	; 184
    4186:	ff 4f       	sbci	r31, 0xFF	; 255
    4188:	80 81       	ld	r24, Z
    418a:	82 33       	cpi	r24, 0x32	; 50
    418c:	19 f4       	brne	.+6      	; 0x4194 <main+0xa92>
					CloseDoor();
    418e:	0e 94 85 22 	call	0x450a	; 0x450a <CloseDoor>
    4192:	13 c0       	rjmp	.+38     	; 0x41ba <main+0xab8>
				}
				else if (key_pressed == 'c'){
    4194:	fe 01       	movw	r30, r28
    4196:	e8 5b       	subi	r30, 0xB8	; 184
    4198:	ff 4f       	sbci	r31, 0xFF	; 255
    419a:	80 81       	ld	r24, Z
    419c:	83 36       	cpi	r24, 0x63	; 99
    419e:	21 f4       	brne	.+8      	; 0x41a8 <main+0xaa6>
					flag = 255;
    41a0:	8f ef       	ldi	r24, 0xFF	; 255
    41a2:	80 93 2e 03 	sts	0x032E, r24
    41a6:	09 c0       	rjmp	.+18     	; 0x41ba <main+0xab8>
				}
				else if (key_pressed == '-'){
    41a8:	fe 01       	movw	r30, r28
    41aa:	e8 5b       	subi	r30, 0xB8	; 184
    41ac:	ff 4f       	sbci	r31, 0xFF	; 255
    41ae:	80 81       	ld	r24, Z
    41b0:	8d 32       	cpi	r24, 0x2D	; 45
    41b2:	19 f4       	brne	.+6      	; 0x41ba <main+0xab8>
					flag = 5;
    41b4:	85 e0       	ldi	r24, 0x05	; 5
    41b6:	80 93 2e 03 	sts	0x032E, r24
		 *
		 * ADMIN
		 *
		 */

		if (flag == 101 && count < 3) {
    41ba:	80 91 2e 03 	lds	r24, 0x032E
    41be:	85 36       	cpi	r24, 0x65	; 101
    41c0:	91 f4       	brne	.+36     	; 0x41e6 <main+0xae4>
    41c2:	80 91 31 03 	lds	r24, 0x0331
    41c6:	83 30       	cpi	r24, 0x03	; 3
    41c8:	70 f4       	brcc	.+28     	; 0x41e6 <main+0xae4>
			LCD_vSendString("Enter Password:");
    41ca:	82 ef       	ldi	r24, 0xF2	; 242
    41cc:	90 e0       	ldi	r25, 0x00	; 0
    41ce:	0e 94 21 18 	call	0x3042	; 0x3042 <LCD_vSendString>
			LCD_vGoTo(1,0);
    41d2:	81 e0       	ldi	r24, 0x01	; 1
    41d4:	60 e0       	ldi	r22, 0x00	; 0
    41d6:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_vGoTo>
			flag = 102;
    41da:	86 e6       	ldi	r24, 0x66	; 102
    41dc:	80 93 2e 03 	sts	0x032E, r24
			admin_entry_pass = 0;
    41e0:	10 92 30 03 	sts	0x0330, r1
    41e4:	84 c0       	rjmp	.+264    	; 0x42ee <main+0xbec>
		}
		else if(flag == 101 && count >= 3){
    41e6:	80 91 2e 03 	lds	r24, 0x032E
    41ea:	85 36       	cpi	r24, 0x65	; 101
    41ec:	09 f0       	breq	.+2      	; 0x41f0 <main+0xaee>
    41ee:	7f c0       	rjmp	.+254    	; 0x42ee <main+0xbec>
    41f0:	80 91 31 03 	lds	r24, 0x0331
    41f4:	83 30       	cpi	r24, 0x03	; 3
    41f6:	08 f4       	brcc	.+2      	; 0x41fa <main+0xaf8>
    41f8:	7a c0       	rjmp	.+244    	; 0x42ee <main+0xbec>
			BUZZER_On();
    41fa:	0e 94 fd 22 	call	0x45fa	; 0x45fa <BUZZER_On>
    41fe:	80 e0       	ldi	r24, 0x00	; 0
    4200:	90 e0       	ldi	r25, 0x00	; 0
    4202:	aa ef       	ldi	r26, 0xFA	; 250
    4204:	b4 e4       	ldi	r27, 0x44	; 68
    4206:	89 8f       	std	Y+25, r24	; 0x19
    4208:	9a 8f       	std	Y+26, r25	; 0x1a
    420a:	ab 8f       	std	Y+27, r26	; 0x1b
    420c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    420e:	69 8d       	ldd	r22, Y+25	; 0x19
    4210:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4212:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4214:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4216:	20 e0       	ldi	r18, 0x00	; 0
    4218:	30 e0       	ldi	r19, 0x00	; 0
    421a:	4a e7       	ldi	r20, 0x7A	; 122
    421c:	55 e4       	ldi	r21, 0x45	; 69
    421e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4222:	dc 01       	movw	r26, r24
    4224:	cb 01       	movw	r24, r22
    4226:	8d 8b       	std	Y+21, r24	; 0x15
    4228:	9e 8b       	std	Y+22, r25	; 0x16
    422a:	af 8b       	std	Y+23, r26	; 0x17
    422c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    422e:	6d 89       	ldd	r22, Y+21	; 0x15
    4230:	7e 89       	ldd	r23, Y+22	; 0x16
    4232:	8f 89       	ldd	r24, Y+23	; 0x17
    4234:	98 8d       	ldd	r25, Y+24	; 0x18
    4236:	20 e0       	ldi	r18, 0x00	; 0
    4238:	30 e0       	ldi	r19, 0x00	; 0
    423a:	40 e8       	ldi	r20, 0x80	; 128
    423c:	5f e3       	ldi	r21, 0x3F	; 63
    423e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4242:	88 23       	and	r24, r24
    4244:	2c f4       	brge	.+10     	; 0x4250 <main+0xb4e>
		__ticks = 1;
    4246:	81 e0       	ldi	r24, 0x01	; 1
    4248:	90 e0       	ldi	r25, 0x00	; 0
    424a:	9c 8b       	std	Y+20, r25	; 0x14
    424c:	8b 8b       	std	Y+19, r24	; 0x13
    424e:	3f c0       	rjmp	.+126    	; 0x42ce <main+0xbcc>
	else if (__tmp > 65535)
    4250:	6d 89       	ldd	r22, Y+21	; 0x15
    4252:	7e 89       	ldd	r23, Y+22	; 0x16
    4254:	8f 89       	ldd	r24, Y+23	; 0x17
    4256:	98 8d       	ldd	r25, Y+24	; 0x18
    4258:	20 e0       	ldi	r18, 0x00	; 0
    425a:	3f ef       	ldi	r19, 0xFF	; 255
    425c:	4f e7       	ldi	r20, 0x7F	; 127
    425e:	57 e4       	ldi	r21, 0x47	; 71
    4260:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4264:	18 16       	cp	r1, r24
    4266:	4c f5       	brge	.+82     	; 0x42ba <main+0xbb8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4268:	69 8d       	ldd	r22, Y+25	; 0x19
    426a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    426c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    426e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4270:	20 e0       	ldi	r18, 0x00	; 0
    4272:	30 e0       	ldi	r19, 0x00	; 0
    4274:	40 e2       	ldi	r20, 0x20	; 32
    4276:	51 e4       	ldi	r21, 0x41	; 65
    4278:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    427c:	dc 01       	movw	r26, r24
    427e:	cb 01       	movw	r24, r22
    4280:	bc 01       	movw	r22, r24
    4282:	cd 01       	movw	r24, r26
    4284:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4288:	dc 01       	movw	r26, r24
    428a:	cb 01       	movw	r24, r22
    428c:	9c 8b       	std	Y+20, r25	; 0x14
    428e:	8b 8b       	std	Y+19, r24	; 0x13
    4290:	0f c0       	rjmp	.+30     	; 0x42b0 <main+0xbae>
    4292:	80 e9       	ldi	r24, 0x90	; 144
    4294:	91 e0       	ldi	r25, 0x01	; 1
    4296:	9a 8b       	std	Y+18, r25	; 0x12
    4298:	89 8b       	std	Y+17, r24	; 0x11
    429a:	89 89       	ldd	r24, Y+17	; 0x11
    429c:	9a 89       	ldd	r25, Y+18	; 0x12
    429e:	01 97       	sbiw	r24, 0x01	; 1
    42a0:	f1 f7       	brne	.-4      	; 0x429e <main+0xb9c>
    42a2:	9a 8b       	std	Y+18, r25	; 0x12
    42a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42a6:	8b 89       	ldd	r24, Y+19	; 0x13
    42a8:	9c 89       	ldd	r25, Y+20	; 0x14
    42aa:	01 97       	sbiw	r24, 0x01	; 1
    42ac:	9c 8b       	std	Y+20, r25	; 0x14
    42ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42b0:	8b 89       	ldd	r24, Y+19	; 0x13
    42b2:	9c 89       	ldd	r25, Y+20	; 0x14
    42b4:	00 97       	sbiw	r24, 0x00	; 0
    42b6:	69 f7       	brne	.-38     	; 0x4292 <main+0xb90>
    42b8:	14 c0       	rjmp	.+40     	; 0x42e2 <main+0xbe0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42ba:	6d 89       	ldd	r22, Y+21	; 0x15
    42bc:	7e 89       	ldd	r23, Y+22	; 0x16
    42be:	8f 89       	ldd	r24, Y+23	; 0x17
    42c0:	98 8d       	ldd	r25, Y+24	; 0x18
    42c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42c6:	dc 01       	movw	r26, r24
    42c8:	cb 01       	movw	r24, r22
    42ca:	9c 8b       	std	Y+20, r25	; 0x14
    42cc:	8b 8b       	std	Y+19, r24	; 0x13
    42ce:	8b 89       	ldd	r24, Y+19	; 0x13
    42d0:	9c 89       	ldd	r25, Y+20	; 0x14
    42d2:	98 8b       	std	Y+16, r25	; 0x10
    42d4:	8f 87       	std	Y+15, r24	; 0x0f
    42d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    42d8:	98 89       	ldd	r25, Y+16	; 0x10
    42da:	01 97       	sbiw	r24, 0x01	; 1
    42dc:	f1 f7       	brne	.-4      	; 0x42da <main+0xbd8>
    42de:	98 8b       	std	Y+16, r25	; 0x10
    42e0:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(2000);
			BUZZER_Off();
    42e2:	0e 94 08 23 	call	0x4610	; 0x4610 <BUZZER_Off>
			count = 0;
    42e6:	10 92 31 03 	sts	0x0331, r1
			flag = 0;
    42ea:	10 92 2e 03 	sts	0x032E, r1
		}

		if (flag == 102){
    42ee:	80 91 2e 03 	lds	r24, 0x032E
    42f2:	86 36       	cpi	r24, 0x66	; 102
    42f4:	09 f0       	breq	.+2      	; 0x42f8 <main+0xbf6>
    42f6:	d0 c0       	rjmp	.+416    	; 0x4498 <main+0xd96>
			key_pressed = Keypad_u8GetPressed();
    42f8:	0e 94 74 14 	call	0x28e8	; 0x28e8 <Keypad_u8GetPressed>
    42fc:	fe 01       	movw	r30, r28
    42fe:	e8 5b       	subi	r30, 0xB8	; 184
    4300:	ff 4f       	sbci	r31, 0xFF	; 255
    4302:	80 83       	st	Z, r24
			if (KEY_NOT_PRESSED != key_pressed) {
    4304:	fe 01       	movw	r30, r28
    4306:	e8 5b       	subi	r30, 0xB8	; 184
    4308:	ff 4f       	sbci	r31, 0xFF	; 255
    430a:	80 81       	ld	r24, Z
    430c:	8f 3f       	cpi	r24, 0xFF	; 255
    430e:	09 f4       	brne	.+2      	; 0x4312 <main+0xc10>
    4310:	c3 c0       	rjmp	.+390    	; 0x4498 <main+0xd96>
				if(key_pressed != '='){
    4312:	fe 01       	movw	r30, r28
    4314:	e8 5b       	subi	r30, 0xB8	; 184
    4316:	ff 4f       	sbci	r31, 0xFF	; 255
    4318:	80 81       	ld	r24, Z
    431a:	8d 33       	cpi	r24, 0x3D	; 61
    431c:	f1 f0       	breq	.+60     	; 0x435a <main+0xc58>
					LCD_vSendData('*');
    431e:	8a e2       	ldi	r24, 0x2A	; 42
    4320:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vSendData>
					admin_entry_pass *= 10;
    4324:	80 91 30 03 	lds	r24, 0x0330
    4328:	88 2f       	mov	r24, r24
    432a:	90 e0       	ldi	r25, 0x00	; 0
    432c:	9c 01       	movw	r18, r24
    432e:	22 0f       	add	r18, r18
    4330:	33 1f       	adc	r19, r19
    4332:	c9 01       	movw	r24, r18
    4334:	88 0f       	add	r24, r24
    4336:	99 1f       	adc	r25, r25
    4338:	88 0f       	add	r24, r24
    433a:	99 1f       	adc	r25, r25
    433c:	82 0f       	add	r24, r18
    433e:	93 1f       	adc	r25, r19
    4340:	80 93 30 03 	sts	0x0330, r24
					admin_entry_pass += key_pressed - '0';
    4344:	90 91 30 03 	lds	r25, 0x0330
    4348:	fe 01       	movw	r30, r28
    434a:	e8 5b       	subi	r30, 0xB8	; 184
    434c:	ff 4f       	sbci	r31, 0xFF	; 255
    434e:	80 81       	ld	r24, Z
    4350:	89 0f       	add	r24, r25
    4352:	80 53       	subi	r24, 0x30	; 48
    4354:	80 93 30 03 	sts	0x0330, r24
    4358:	9f c0       	rjmp	.+318    	; 0x4498 <main+0xd96>
				}
				else{
					count++;
    435a:	80 91 31 03 	lds	r24, 0x0331
    435e:	8f 5f       	subi	r24, 0xFF	; 255
    4360:	80 93 31 03 	sts	0x0331, r24
					LCD_vSendInt(admin_entry_pass);
    4364:	80 91 30 03 	lds	r24, 0x0330
    4368:	88 2f       	mov	r24, r24
    436a:	90 e0       	ldi	r25, 0x00	; 0
    436c:	a0 e0       	ldi	r26, 0x00	; 0
    436e:	b0 e0       	ldi	r27, 0x00	; 0
    4370:	bc 01       	movw	r22, r24
    4372:	cd 01       	movw	r24, r26
    4374:	0e 94 4a 18 	call	0x3094	; 0x3094 <LCD_vSendInt>

					if (admin_entry_pass == password_admin){
    4378:	90 91 30 03 	lds	r25, 0x0330
    437c:	80 91 08 03 	lds	r24, 0x0308
    4380:	98 17       	cp	r25, r24
    4382:	59 f4       	brne	.+22     	; 0x439a <main+0xc98>
						LCD_vSendCmnd(0x01);
    4384:	81 e0       	ldi	r24, 0x01	; 1
    4386:	0e 94 ed 17 	call	0x2fda	; 0x2fda <LCD_vSendCmnd>
						LCD_vSendString("Welcome Admin");
    438a:	8f e8       	ldi	r24, 0x8F	; 143
    438c:	91 e0       	ldi	r25, 0x01	; 1
    438e:	0e 94 21 18 	call	0x3042	; 0x3042 <LCD_vSendString>
						flag = 103;
    4392:	87 e6       	ldi	r24, 0x67	; 103
    4394:	80 93 2e 03 	sts	0x032E, r24
    4398:	7f c0       	rjmp	.+254    	; 0x4498 <main+0xd96>
					}
					else{
						LCD_vSendCmnd(0x01);
    439a:	81 e0       	ldi	r24, 0x01	; 1
    439c:	0e 94 ed 17 	call	0x2fda	; 0x2fda <LCD_vSendCmnd>
						LCD_vSendString("Wrong Password");
    43a0:	80 e1       	ldi	r24, 0x10	; 16
    43a2:	91 e0       	ldi	r25, 0x01	; 1
    43a4:	0e 94 21 18 	call	0x3042	; 0x3042 <LCD_vSendString>
    43a8:	80 e0       	ldi	r24, 0x00	; 0
    43aa:	90 e0       	ldi	r25, 0x00	; 0
    43ac:	aa e7       	ldi	r26, 0x7A	; 122
    43ae:	b4 e4       	ldi	r27, 0x44	; 68
    43b0:	8b 87       	std	Y+11, r24	; 0x0b
    43b2:	9c 87       	std	Y+12, r25	; 0x0c
    43b4:	ad 87       	std	Y+13, r26	; 0x0d
    43b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    43ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    43bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    43be:	9e 85       	ldd	r25, Y+14	; 0x0e
    43c0:	20 e0       	ldi	r18, 0x00	; 0
    43c2:	30 e0       	ldi	r19, 0x00	; 0
    43c4:	4a e7       	ldi	r20, 0x7A	; 122
    43c6:	55 e4       	ldi	r21, 0x45	; 69
    43c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43cc:	dc 01       	movw	r26, r24
    43ce:	cb 01       	movw	r24, r22
    43d0:	8f 83       	std	Y+7, r24	; 0x07
    43d2:	98 87       	std	Y+8, r25	; 0x08
    43d4:	a9 87       	std	Y+9, r26	; 0x09
    43d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    43d8:	6f 81       	ldd	r22, Y+7	; 0x07
    43da:	78 85       	ldd	r23, Y+8	; 0x08
    43dc:	89 85       	ldd	r24, Y+9	; 0x09
    43de:	9a 85       	ldd	r25, Y+10	; 0x0a
    43e0:	20 e0       	ldi	r18, 0x00	; 0
    43e2:	30 e0       	ldi	r19, 0x00	; 0
    43e4:	40 e8       	ldi	r20, 0x80	; 128
    43e6:	5f e3       	ldi	r21, 0x3F	; 63
    43e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43ec:	88 23       	and	r24, r24
    43ee:	2c f4       	brge	.+10     	; 0x43fa <main+0xcf8>
		__ticks = 1;
    43f0:	81 e0       	ldi	r24, 0x01	; 1
    43f2:	90 e0       	ldi	r25, 0x00	; 0
    43f4:	9e 83       	std	Y+6, r25	; 0x06
    43f6:	8d 83       	std	Y+5, r24	; 0x05
    43f8:	3f c0       	rjmp	.+126    	; 0x4478 <main+0xd76>
	else if (__tmp > 65535)
    43fa:	6f 81       	ldd	r22, Y+7	; 0x07
    43fc:	78 85       	ldd	r23, Y+8	; 0x08
    43fe:	89 85       	ldd	r24, Y+9	; 0x09
    4400:	9a 85       	ldd	r25, Y+10	; 0x0a
    4402:	20 e0       	ldi	r18, 0x00	; 0
    4404:	3f ef       	ldi	r19, 0xFF	; 255
    4406:	4f e7       	ldi	r20, 0x7F	; 127
    4408:	57 e4       	ldi	r21, 0x47	; 71
    440a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    440e:	18 16       	cp	r1, r24
    4410:	4c f5       	brge	.+82     	; 0x4464 <main+0xd62>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4412:	6b 85       	ldd	r22, Y+11	; 0x0b
    4414:	7c 85       	ldd	r23, Y+12	; 0x0c
    4416:	8d 85       	ldd	r24, Y+13	; 0x0d
    4418:	9e 85       	ldd	r25, Y+14	; 0x0e
    441a:	20 e0       	ldi	r18, 0x00	; 0
    441c:	30 e0       	ldi	r19, 0x00	; 0
    441e:	40 e2       	ldi	r20, 0x20	; 32
    4420:	51 e4       	ldi	r21, 0x41	; 65
    4422:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4426:	dc 01       	movw	r26, r24
    4428:	cb 01       	movw	r24, r22
    442a:	bc 01       	movw	r22, r24
    442c:	cd 01       	movw	r24, r26
    442e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4432:	dc 01       	movw	r26, r24
    4434:	cb 01       	movw	r24, r22
    4436:	9e 83       	std	Y+6, r25	; 0x06
    4438:	8d 83       	std	Y+5, r24	; 0x05
    443a:	0f c0       	rjmp	.+30     	; 0x445a <main+0xd58>
    443c:	80 e9       	ldi	r24, 0x90	; 144
    443e:	91 e0       	ldi	r25, 0x01	; 1
    4440:	9c 83       	std	Y+4, r25	; 0x04
    4442:	8b 83       	std	Y+3, r24	; 0x03
    4444:	8b 81       	ldd	r24, Y+3	; 0x03
    4446:	9c 81       	ldd	r25, Y+4	; 0x04
    4448:	01 97       	sbiw	r24, 0x01	; 1
    444a:	f1 f7       	brne	.-4      	; 0x4448 <main+0xd46>
    444c:	9c 83       	std	Y+4, r25	; 0x04
    444e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4450:	8d 81       	ldd	r24, Y+5	; 0x05
    4452:	9e 81       	ldd	r25, Y+6	; 0x06
    4454:	01 97       	sbiw	r24, 0x01	; 1
    4456:	9e 83       	std	Y+6, r25	; 0x06
    4458:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    445a:	8d 81       	ldd	r24, Y+5	; 0x05
    445c:	9e 81       	ldd	r25, Y+6	; 0x06
    445e:	00 97       	sbiw	r24, 0x00	; 0
    4460:	69 f7       	brne	.-38     	; 0x443c <main+0xd3a>
    4462:	14 c0       	rjmp	.+40     	; 0x448c <main+0xd8a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4464:	6f 81       	ldd	r22, Y+7	; 0x07
    4466:	78 85       	ldd	r23, Y+8	; 0x08
    4468:	89 85       	ldd	r24, Y+9	; 0x09
    446a:	9a 85       	ldd	r25, Y+10	; 0x0a
    446c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4470:	dc 01       	movw	r26, r24
    4472:	cb 01       	movw	r24, r22
    4474:	9e 83       	std	Y+6, r25	; 0x06
    4476:	8d 83       	std	Y+5, r24	; 0x05
    4478:	8d 81       	ldd	r24, Y+5	; 0x05
    447a:	9e 81       	ldd	r25, Y+6	; 0x06
    447c:	9a 83       	std	Y+2, r25	; 0x02
    447e:	89 83       	std	Y+1, r24	; 0x01
    4480:	89 81       	ldd	r24, Y+1	; 0x01
    4482:	9a 81       	ldd	r25, Y+2	; 0x02
    4484:	01 97       	sbiw	r24, 0x01	; 1
    4486:	f1 f7       	brne	.-4      	; 0x4484 <main+0xd82>
    4488:	9a 83       	std	Y+2, r25	; 0x02
    448a:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(1000);
						LCD_vSendCmnd(0x01);
    448c:	81 e0       	ldi	r24, 0x01	; 1
    448e:	0e 94 ed 17 	call	0x2fda	; 0x2fda <LCD_vSendCmnd>
						flag = 101;
    4492:	85 e6       	ldi	r24, 0x65	; 101
    4494:	80 93 2e 03 	sts	0x032E, r24
					}
				}
			}
		}
		if (flag == 103) {
    4498:	80 91 2e 03 	lds	r24, 0x032E
    449c:	87 36       	cpi	r24, 0x67	; 103
    449e:	a1 f4       	brne	.+40     	; 0x44c8 <main+0xdc6>
			uint8 exit_flag = 0;
    44a0:	fe 01       	movw	r30, r28
    44a2:	e9 5b       	subi	r30, 0xB9	; 185
    44a4:	ff 4f       	sbci	r31, 0xFF	; 255
    44a6:	10 82       	st	Z, r1
    44a8:	06 c0       	rjmp	.+12     	; 0x44b6 <main+0xdb4>
			while(exit_flag != 255){
				exit_flag = admin_mode();
    44aa:	0e 94 39 1a 	call	0x3472	; 0x3472 <admin_mode>
    44ae:	fe 01       	movw	r30, r28
    44b0:	e9 5b       	subi	r30, 0xB9	; 185
    44b2:	ff 4f       	sbci	r31, 0xFF	; 255
    44b4:	80 83       	st	Z, r24
				}
			}
		}
		if (flag == 103) {
			uint8 exit_flag = 0;
			while(exit_flag != 255){
    44b6:	fe 01       	movw	r30, r28
    44b8:	e9 5b       	subi	r30, 0xB9	; 185
    44ba:	ff 4f       	sbci	r31, 0xFF	; 255
    44bc:	80 81       	ld	r24, Z
    44be:	8f 3f       	cpi	r24, 0xFF	; 255
    44c0:	a1 f7       	brne	.-24     	; 0x44aa <main+0xda8>
				exit_flag = admin_mode();
			}

			flag = 255;
    44c2:	8f ef       	ldi	r24, 0xFF	; 255
    44c4:	80 93 2e 03 	sts	0x032E, r24

		/*
		 * GENERAL
		 */

		if (flag == 255){
    44c8:	80 91 2e 03 	lds	r24, 0x032E
    44cc:	8f 3f       	cpi	r24, 0xFF	; 255
    44ce:	09 f0       	breq	.+2      	; 0x44d2 <main+0xdd0>
    44d0:	3f c9       	rjmp	.-3458   	; 0x3750 <main+0x4e>
			LCD_vSendCmnd(0x01);
    44d2:	81 e0       	ldi	r24, 0x01	; 1
    44d4:	0e 94 ed 17 	call	0x2fda	; 0x2fda <LCD_vSendCmnd>
			LCD_vSendString("1- User Mode");
    44d8:	87 ec       	ldi	r24, 0xC7	; 199
    44da:	90 e0       	ldi	r25, 0x00	; 0
    44dc:	0e 94 21 18 	call	0x3042	; 0x3042 <LCD_vSendString>
			LCD_vGoTo(1,0);
    44e0:	81 e0       	ldi	r24, 0x01	; 1
    44e2:	60 e0       	ldi	r22, 0x00	; 0
    44e4:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_vGoTo>
			LCD_vSendString("2- Admin Mode");
    44e8:	84 ed       	ldi	r24, 0xD4	; 212
    44ea:	90 e0       	ldi	r25, 0x00	; 0
    44ec:	0e 94 21 18 	call	0x3042	; 0x3042 <LCD_vSendString>
			flag = 0;
    44f0:	10 92 2e 03 	sts	0x032E, r1
    44f4:	2d c9       	rjmp	.-3494   	; 0x3750 <main+0x4e>

000044f6 <OpenDoor>:
#include "../HAL/DC.h"
#include "../HAL/lcd.h"
#include <avr/delay.h>

void OpenDoor(void)
{
    44f6:	df 93       	push	r29
    44f8:	cf 93       	push	r28
    44fa:	cd b7       	in	r28, 0x3d	; 61
    44fc:	de b7       	in	r29, 0x3e	; 62
	Servo_vOn(180);
    44fe:	84 eb       	ldi	r24, 0xB4	; 180
    4500:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <Servo_vOn>
}
    4504:	cf 91       	pop	r28
    4506:	df 91       	pop	r29
    4508:	08 95       	ret

0000450a <CloseDoor>:

void CloseDoor(void)
{
    450a:	df 93       	push	r29
    450c:	cf 93       	push	r28
    450e:	cd b7       	in	r28, 0x3d	; 61
    4510:	de b7       	in	r29, 0x3e	; 62
	Servo_vOn(90);
    4512:	8a e5       	ldi	r24, 0x5A	; 90
    4514:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <Servo_vOn>
}
    4518:	cf 91       	pop	r28
    451a:	df 91       	pop	r29
    451c:	08 95       	ret

0000451e <openledroom1>:

void openledroom1()
{
    451e:	df 93       	push	r29
    4520:	cf 93       	push	r28
    4522:	cd b7       	in	r28, 0x3d	; 61
    4524:	de b7       	in	r29, 0x3e	; 62
	DIO_WriteChannel(PA1,HIGH);
    4526:	81 e0       	ldi	r24, 0x01	; 1
    4528:	61 e0       	ldi	r22, 0x01	; 1
    452a:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_WriteChannel>
}
    452e:	cf 91       	pop	r28
    4530:	df 91       	pop	r29
    4532:	08 95       	ret

00004534 <closeledroom1>:

void closeledroom1()
{
    4534:	df 93       	push	r29
    4536:	cf 93       	push	r28
    4538:	cd b7       	in	r28, 0x3d	; 61
    453a:	de b7       	in	r29, 0x3e	; 62
	DIO_WriteChannel(PA1,LOW);
    453c:	81 e0       	ldi	r24, 0x01	; 1
    453e:	60 e0       	ldi	r22, 0x00	; 0
    4540:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_WriteChannel>
}
    4544:	cf 91       	pop	r28
    4546:	df 91       	pop	r29
    4548:	08 95       	ret

0000454a <openledroom2>:

void openledroom2()
{
    454a:	df 93       	push	r29
    454c:	cf 93       	push	r28
    454e:	cd b7       	in	r28, 0x3d	; 61
    4550:	de b7       	in	r29, 0x3e	; 62
	DIO_WriteChannel(PA4,HIGH);
    4552:	84 e0       	ldi	r24, 0x04	; 4
    4554:	61 e0       	ldi	r22, 0x01	; 1
    4556:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_WriteChannel>
}
    455a:	cf 91       	pop	r28
    455c:	df 91       	pop	r29
    455e:	08 95       	ret

00004560 <closeledroom2>:

void closeledroom2()
{
    4560:	df 93       	push	r29
    4562:	cf 93       	push	r28
    4564:	cd b7       	in	r28, 0x3d	; 61
    4566:	de b7       	in	r29, 0x3e	; 62
	DIO_WriteChannel(PA4,LOW);
    4568:	84 e0       	ldi	r24, 0x04	; 4
    456a:	60 e0       	ldi	r22, 0x00	; 0
    456c:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_WriteChannel>
}
    4570:	cf 91       	pop	r28
    4572:	df 91       	pop	r29
    4574:	08 95       	ret

00004576 <openledroom3>:

void openledroom3()
{
    4576:	df 93       	push	r29
    4578:	cf 93       	push	r28
    457a:	cd b7       	in	r28, 0x3d	; 61
    457c:	de b7       	in	r29, 0x3e	; 62
	DIO_WriteChannel(PA5,HIGH);
    457e:	85 e0       	ldi	r24, 0x05	; 5
    4580:	61 e0       	ldi	r22, 0x01	; 1
    4582:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_WriteChannel>
}
    4586:	cf 91       	pop	r28
    4588:	df 91       	pop	r29
    458a:	08 95       	ret

0000458c <closeledroom3>:

void closeledroom3()
{
    458c:	df 93       	push	r29
    458e:	cf 93       	push	r28
    4590:	cd b7       	in	r28, 0x3d	; 61
    4592:	de b7       	in	r29, 0x3e	; 62
	DIO_WriteChannel(PA5,LOW);
    4594:	85 e0       	ldi	r24, 0x05	; 5
    4596:	60 e0       	ldi	r22, 0x00	; 0
    4598:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_WriteChannel>
}
    459c:	cf 91       	pop	r28
    459e:	df 91       	pop	r29
    45a0:	08 95       	ret

000045a2 <openledroom4>:

void openledroom4()
{
    45a2:	df 93       	push	r29
    45a4:	cf 93       	push	r28
    45a6:	cd b7       	in	r28, 0x3d	; 61
    45a8:	de b7       	in	r29, 0x3e	; 62
	DIO_WriteChannel(PA6,HIGH);
    45aa:	86 e0       	ldi	r24, 0x06	; 6
    45ac:	61 e0       	ldi	r22, 0x01	; 1
    45ae:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_WriteChannel>
}
    45b2:	cf 91       	pop	r28
    45b4:	df 91       	pop	r29
    45b6:	08 95       	ret

000045b8 <closeledroom4>:

void closeledroom4()
{
    45b8:	df 93       	push	r29
    45ba:	cf 93       	push	r28
    45bc:	cd b7       	in	r28, 0x3d	; 61
    45be:	de b7       	in	r29, 0x3e	; 62
	DIO_WriteChannel(PA6,LOW);
    45c0:	86 e0       	ldi	r24, 0x06	; 6
    45c2:	60 e0       	ldi	r22, 0x00	; 0
    45c4:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_WriteChannel>
}
    45c8:	cf 91       	pop	r28
    45ca:	df 91       	pop	r29
    45cc:	08 95       	ret

000045ce <openledroom5>:

void openledroom5()
{
    45ce:	df 93       	push	r29
    45d0:	cf 93       	push	r28
    45d2:	cd b7       	in	r28, 0x3d	; 61
    45d4:	de b7       	in	r29, 0x3e	; 62
	DIO_WriteChannel(PA7,HIGH);
    45d6:	87 e0       	ldi	r24, 0x07	; 7
    45d8:	61 e0       	ldi	r22, 0x01	; 1
    45da:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_WriteChannel>
}
    45de:	cf 91       	pop	r28
    45e0:	df 91       	pop	r29
    45e2:	08 95       	ret

000045e4 <closeledroom5>:

void closeledroom5()
{
    45e4:	df 93       	push	r29
    45e6:	cf 93       	push	r28
    45e8:	cd b7       	in	r28, 0x3d	; 61
    45ea:	de b7       	in	r29, 0x3e	; 62
	DIO_WriteChannel(PA7,LOW);
    45ec:	87 e0       	ldi	r24, 0x07	; 7
    45ee:	60 e0       	ldi	r22, 0x00	; 0
    45f0:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_WriteChannel>
}
    45f4:	cf 91       	pop	r28
    45f6:	df 91       	pop	r29
    45f8:	08 95       	ret

000045fa <BUZZER_On>:

void BUZZER_On(void)
{
    45fa:	df 93       	push	r29
    45fc:	cf 93       	push	r28
    45fe:	cd b7       	in	r28, 0x3d	; 61
    4600:	de b7       	in	r29, 0x3e	; 62
	DIO_WriteChannel(PC6,HIGH);
    4602:	86 e1       	ldi	r24, 0x16	; 22
    4604:	61 e0       	ldi	r22, 0x01	; 1
    4606:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_WriteChannel>
}
    460a:	cf 91       	pop	r28
    460c:	df 91       	pop	r29
    460e:	08 95       	ret

00004610 <BUZZER_Off>:
void BUZZER_Off(void)
{
    4610:	df 93       	push	r29
    4612:	cf 93       	push	r28
    4614:	cd b7       	in	r28, 0x3d	; 61
    4616:	de b7       	in	r29, 0x3e	; 62
	DIO_WriteChannel(PC6,LOW);
    4618:	86 e1       	ldi	r24, 0x16	; 22
    461a:	60 e0       	ldi	r22, 0x00	; 0
    461c:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_WriteChannel>
}
    4620:	cf 91       	pop	r28
    4622:	df 91       	pop	r29
    4624:	08 95       	ret

00004626 <temp>:

void temp(uint8 temperature)
{
    4626:	df 93       	push	r29
    4628:	cf 93       	push	r28
    462a:	cd b7       	in	r28, 0x3d	; 61
    462c:	de b7       	in	r29, 0x3e	; 62
    462e:	63 97       	sbiw	r28, 0x13	; 19
    4630:	0f b6       	in	r0, 0x3f	; 63
    4632:	f8 94       	cli
    4634:	de bf       	out	0x3e, r29	; 62
    4636:	0f be       	out	0x3f, r0	; 63
    4638:	cd bf       	out	0x3d, r28	; 61
    463a:	8b 8b       	std	Y+19, r24	; 0x13
	uint16 Local_dig_read;
	uint16 temp;
	ADC_vChannel_Select(0);
    463c:	80 e0       	ldi	r24, 0x00	; 0
    463e:	0e 94 9a 07 	call	0xf34	; 0xf34 <ADC_vChannel_Select>
	ADC_vStart_Conversion();
    4642:	0e 94 b6 07 	call	0xf6c	; 0xf6c <ADC_vStart_Conversion>

	Local_dig_read=ADC_u16PollingRead();
    4646:	0e 94 dd 07 	call	0xfba	; 0xfba <ADC_u16PollingRead>
    464a:	9a 8b       	std	Y+18, r25	; 0x12
    464c:	89 8b       	std	Y+17, r24	; 0x11
	//	temp =((uint32)Local_dig_read*2560UL)/1024;
	temp =0.25*Local_dig_read;
    464e:	89 89       	ldd	r24, Y+17	; 0x11
    4650:	9a 89       	ldd	r25, Y+18	; 0x12
    4652:	cc 01       	movw	r24, r24
    4654:	a0 e0       	ldi	r26, 0x00	; 0
    4656:	b0 e0       	ldi	r27, 0x00	; 0
    4658:	bc 01       	movw	r22, r24
    465a:	cd 01       	movw	r24, r26
    465c:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    4660:	dc 01       	movw	r26, r24
    4662:	cb 01       	movw	r24, r22
    4664:	bc 01       	movw	r22, r24
    4666:	cd 01       	movw	r24, r26
    4668:	20 e0       	ldi	r18, 0x00	; 0
    466a:	30 e0       	ldi	r19, 0x00	; 0
    466c:	40 e8       	ldi	r20, 0x80	; 128
    466e:	5e e3       	ldi	r21, 0x3E	; 62
    4670:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4674:	dc 01       	movw	r26, r24
    4676:	cb 01       	movw	r24, r22
    4678:	bc 01       	movw	r22, r24
    467a:	cd 01       	movw	r24, r26
    467c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4680:	dc 01       	movw	r26, r24
    4682:	cb 01       	movw	r24, r22
    4684:	98 8b       	std	Y+16, r25	; 0x10
    4686:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_vSendCmnd(0x01);
    4688:	81 e0       	ldi	r24, 0x01	; 1
    468a:	0e 94 ed 17 	call	0x2fda	; 0x2fda <LCD_vSendCmnd>
	LCD_vSendString("Current:");
    468e:	8d e9       	ldi	r24, 0x9D	; 157
    4690:	91 e0       	ldi	r25, 0x01	; 1
    4692:	0e 94 21 18 	call	0x3042	; 0x3042 <LCD_vSendString>
	LCD_vSendInt(temp);
    4696:	8f 85       	ldd	r24, Y+15	; 0x0f
    4698:	98 89       	ldd	r25, Y+16	; 0x10
    469a:	cc 01       	movw	r24, r24
    469c:	a0 e0       	ldi	r26, 0x00	; 0
    469e:	b0 e0       	ldi	r27, 0x00	; 0
    46a0:	bc 01       	movw	r22, r24
    46a2:	cd 01       	movw	r24, r26
    46a4:	0e 94 4a 18 	call	0x3094	; 0x3094 <LCD_vSendInt>
	LCD_vGoTo(1,0);
    46a8:	81 e0       	ldi	r24, 0x01	; 1
    46aa:	60 e0       	ldi	r22, 0x00	; 0
    46ac:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_vGoTo>
	LCD_vSendString("Desired:");
    46b0:	86 ea       	ldi	r24, 0xA6	; 166
    46b2:	91 e0       	ldi	r25, 0x01	; 1
    46b4:	0e 94 21 18 	call	0x3042	; 0x3042 <LCD_vSendString>
	LCD_vSendInt(temperature);
    46b8:	8b 89       	ldd	r24, Y+19	; 0x13
    46ba:	88 2f       	mov	r24, r24
    46bc:	90 e0       	ldi	r25, 0x00	; 0
    46be:	a0 e0       	ldi	r26, 0x00	; 0
    46c0:	b0 e0       	ldi	r27, 0x00	; 0
    46c2:	bc 01       	movw	r22, r24
    46c4:	cd 01       	movw	r24, r26
    46c6:	0e 94 4a 18 	call	0x3094	; 0x3094 <LCD_vSendInt>
    46ca:	80 e0       	ldi	r24, 0x00	; 0
    46cc:	90 e0       	ldi	r25, 0x00	; 0
    46ce:	a8 e4       	ldi	r26, 0x48	; 72
    46d0:	b2 e4       	ldi	r27, 0x42	; 66
    46d2:	8b 87       	std	Y+11, r24	; 0x0b
    46d4:	9c 87       	std	Y+12, r25	; 0x0c
    46d6:	ad 87       	std	Y+13, r26	; 0x0d
    46d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46da:	6b 85       	ldd	r22, Y+11	; 0x0b
    46dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    46de:	8d 85       	ldd	r24, Y+13	; 0x0d
    46e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    46e2:	20 e0       	ldi	r18, 0x00	; 0
    46e4:	30 e0       	ldi	r19, 0x00	; 0
    46e6:	4a e7       	ldi	r20, 0x7A	; 122
    46e8:	55 e4       	ldi	r21, 0x45	; 69
    46ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46ee:	dc 01       	movw	r26, r24
    46f0:	cb 01       	movw	r24, r22
    46f2:	8f 83       	std	Y+7, r24	; 0x07
    46f4:	98 87       	std	Y+8, r25	; 0x08
    46f6:	a9 87       	std	Y+9, r26	; 0x09
    46f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    46fa:	6f 81       	ldd	r22, Y+7	; 0x07
    46fc:	78 85       	ldd	r23, Y+8	; 0x08
    46fe:	89 85       	ldd	r24, Y+9	; 0x09
    4700:	9a 85       	ldd	r25, Y+10	; 0x0a
    4702:	20 e0       	ldi	r18, 0x00	; 0
    4704:	30 e0       	ldi	r19, 0x00	; 0
    4706:	40 e8       	ldi	r20, 0x80	; 128
    4708:	5f e3       	ldi	r21, 0x3F	; 63
    470a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    470e:	88 23       	and	r24, r24
    4710:	2c f4       	brge	.+10     	; 0x471c <temp+0xf6>
		__ticks = 1;
    4712:	81 e0       	ldi	r24, 0x01	; 1
    4714:	90 e0       	ldi	r25, 0x00	; 0
    4716:	9e 83       	std	Y+6, r25	; 0x06
    4718:	8d 83       	std	Y+5, r24	; 0x05
    471a:	3f c0       	rjmp	.+126    	; 0x479a <temp+0x174>
	else if (__tmp > 65535)
    471c:	6f 81       	ldd	r22, Y+7	; 0x07
    471e:	78 85       	ldd	r23, Y+8	; 0x08
    4720:	89 85       	ldd	r24, Y+9	; 0x09
    4722:	9a 85       	ldd	r25, Y+10	; 0x0a
    4724:	20 e0       	ldi	r18, 0x00	; 0
    4726:	3f ef       	ldi	r19, 0xFF	; 255
    4728:	4f e7       	ldi	r20, 0x7F	; 127
    472a:	57 e4       	ldi	r21, 0x47	; 71
    472c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4730:	18 16       	cp	r1, r24
    4732:	4c f5       	brge	.+82     	; 0x4786 <temp+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4734:	6b 85       	ldd	r22, Y+11	; 0x0b
    4736:	7c 85       	ldd	r23, Y+12	; 0x0c
    4738:	8d 85       	ldd	r24, Y+13	; 0x0d
    473a:	9e 85       	ldd	r25, Y+14	; 0x0e
    473c:	20 e0       	ldi	r18, 0x00	; 0
    473e:	30 e0       	ldi	r19, 0x00	; 0
    4740:	40 e2       	ldi	r20, 0x20	; 32
    4742:	51 e4       	ldi	r21, 0x41	; 65
    4744:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4748:	dc 01       	movw	r26, r24
    474a:	cb 01       	movw	r24, r22
    474c:	bc 01       	movw	r22, r24
    474e:	cd 01       	movw	r24, r26
    4750:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4754:	dc 01       	movw	r26, r24
    4756:	cb 01       	movw	r24, r22
    4758:	9e 83       	std	Y+6, r25	; 0x06
    475a:	8d 83       	std	Y+5, r24	; 0x05
    475c:	0f c0       	rjmp	.+30     	; 0x477c <temp+0x156>
    475e:	80 e9       	ldi	r24, 0x90	; 144
    4760:	91 e0       	ldi	r25, 0x01	; 1
    4762:	9c 83       	std	Y+4, r25	; 0x04
    4764:	8b 83       	std	Y+3, r24	; 0x03
    4766:	8b 81       	ldd	r24, Y+3	; 0x03
    4768:	9c 81       	ldd	r25, Y+4	; 0x04
    476a:	01 97       	sbiw	r24, 0x01	; 1
    476c:	f1 f7       	brne	.-4      	; 0x476a <temp+0x144>
    476e:	9c 83       	std	Y+4, r25	; 0x04
    4770:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4772:	8d 81       	ldd	r24, Y+5	; 0x05
    4774:	9e 81       	ldd	r25, Y+6	; 0x06
    4776:	01 97       	sbiw	r24, 0x01	; 1
    4778:	9e 83       	std	Y+6, r25	; 0x06
    477a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    477c:	8d 81       	ldd	r24, Y+5	; 0x05
    477e:	9e 81       	ldd	r25, Y+6	; 0x06
    4780:	00 97       	sbiw	r24, 0x00	; 0
    4782:	69 f7       	brne	.-38     	; 0x475e <temp+0x138>
    4784:	14 c0       	rjmp	.+40     	; 0x47ae <temp+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4786:	6f 81       	ldd	r22, Y+7	; 0x07
    4788:	78 85       	ldd	r23, Y+8	; 0x08
    478a:	89 85       	ldd	r24, Y+9	; 0x09
    478c:	9a 85       	ldd	r25, Y+10	; 0x0a
    478e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4792:	dc 01       	movw	r26, r24
    4794:	cb 01       	movw	r24, r22
    4796:	9e 83       	std	Y+6, r25	; 0x06
    4798:	8d 83       	std	Y+5, r24	; 0x05
    479a:	8d 81       	ldd	r24, Y+5	; 0x05
    479c:	9e 81       	ldd	r25, Y+6	; 0x06
    479e:	9a 83       	std	Y+2, r25	; 0x02
    47a0:	89 83       	std	Y+1, r24	; 0x01
    47a2:	89 81       	ldd	r24, Y+1	; 0x01
    47a4:	9a 81       	ldd	r25, Y+2	; 0x02
    47a6:	01 97       	sbiw	r24, 0x01	; 1
    47a8:	f1 f7       	brne	.-4      	; 0x47a6 <temp+0x180>
    47aa:	9a 83       	std	Y+2, r25	; 0x02
    47ac:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);


	// if temp is higher than 28 open fan & print fan on in lcd
	if(temp>temperature)
    47ae:	8b 89       	ldd	r24, Y+19	; 0x13
    47b0:	28 2f       	mov	r18, r24
    47b2:	30 e0       	ldi	r19, 0x00	; 0
    47b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    47b6:	98 89       	ldd	r25, Y+16	; 0x10
    47b8:	28 17       	cp	r18, r24
    47ba:	39 07       	cpc	r19, r25
    47bc:	38 f4       	brcc	.+14     	; 0x47cc <temp+0x1a6>
	{
		DC_vOn(DC_CLOCK_WISE);
    47be:	81 e0       	ldi	r24, 0x01	; 1
    47c0:	0e 94 65 11 	call	0x22ca	; 0x22ca <DC_vOn>
		DC_vControlSpeed(50);
    47c4:	82 e3       	ldi	r24, 0x32	; 50
    47c6:	0e 94 82 11 	call	0x2304	; 0x2304 <DC_vControlSpeed>
    47ca:	0a c0       	rjmp	.+20     	; 0x47e0 <temp+0x1ba>
	}

	// if temp is lower than 28 open fan & print fan of in lcd
	else if(temp<=temperature)
    47cc:	8b 89       	ldd	r24, Y+19	; 0x13
    47ce:	28 2f       	mov	r18, r24
    47d0:	30 e0       	ldi	r19, 0x00	; 0
    47d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    47d4:	98 89       	ldd	r25, Y+16	; 0x10
    47d6:	28 17       	cp	r18, r24
    47d8:	39 07       	cpc	r19, r25
    47da:	10 f0       	brcs	.+4      	; 0x47e0 <temp+0x1ba>
	{
		DC_vOff();
    47dc:	0e 94 8f 11 	call	0x231e	; 0x231e <DC_vOff>
	}
}
    47e0:	63 96       	adiw	r28, 0x13	; 19
    47e2:	0f b6       	in	r0, 0x3f	; 63
    47e4:	f8 94       	cli
    47e6:	de bf       	out	0x3e, r29	; 62
    47e8:	0f be       	out	0x3f, r0	; 63
    47ea:	cd bf       	out	0x3d, r28	; 61
    47ec:	cf 91       	pop	r28
    47ee:	df 91       	pop	r29
    47f0:	08 95       	ret

000047f2 <__mulsi3>:
    47f2:	62 9f       	mul	r22, r18
    47f4:	d0 01       	movw	r26, r0
    47f6:	73 9f       	mul	r23, r19
    47f8:	f0 01       	movw	r30, r0
    47fa:	82 9f       	mul	r24, r18
    47fc:	e0 0d       	add	r30, r0
    47fe:	f1 1d       	adc	r31, r1
    4800:	64 9f       	mul	r22, r20
    4802:	e0 0d       	add	r30, r0
    4804:	f1 1d       	adc	r31, r1
    4806:	92 9f       	mul	r25, r18
    4808:	f0 0d       	add	r31, r0
    480a:	83 9f       	mul	r24, r19
    480c:	f0 0d       	add	r31, r0
    480e:	74 9f       	mul	r23, r20
    4810:	f0 0d       	add	r31, r0
    4812:	65 9f       	mul	r22, r21
    4814:	f0 0d       	add	r31, r0
    4816:	99 27       	eor	r25, r25
    4818:	72 9f       	mul	r23, r18
    481a:	b0 0d       	add	r27, r0
    481c:	e1 1d       	adc	r30, r1
    481e:	f9 1f       	adc	r31, r25
    4820:	63 9f       	mul	r22, r19
    4822:	b0 0d       	add	r27, r0
    4824:	e1 1d       	adc	r30, r1
    4826:	f9 1f       	adc	r31, r25
    4828:	bd 01       	movw	r22, r26
    482a:	cf 01       	movw	r24, r30
    482c:	11 24       	eor	r1, r1
    482e:	08 95       	ret

00004830 <__udivmodqi4>:
    4830:	99 1b       	sub	r25, r25
    4832:	79 e0       	ldi	r23, 0x09	; 9
    4834:	04 c0       	rjmp	.+8      	; 0x483e <__udivmodqi4_ep>

00004836 <__udivmodqi4_loop>:
    4836:	99 1f       	adc	r25, r25
    4838:	96 17       	cp	r25, r22
    483a:	08 f0       	brcs	.+2      	; 0x483e <__udivmodqi4_ep>
    483c:	96 1b       	sub	r25, r22

0000483e <__udivmodqi4_ep>:
    483e:	88 1f       	adc	r24, r24
    4840:	7a 95       	dec	r23
    4842:	c9 f7       	brne	.-14     	; 0x4836 <__udivmodqi4_loop>
    4844:	80 95       	com	r24
    4846:	08 95       	ret

00004848 <__udivmodhi4>:
    4848:	aa 1b       	sub	r26, r26
    484a:	bb 1b       	sub	r27, r27
    484c:	51 e1       	ldi	r21, 0x11	; 17
    484e:	07 c0       	rjmp	.+14     	; 0x485e <__udivmodhi4_ep>

00004850 <__udivmodhi4_loop>:
    4850:	aa 1f       	adc	r26, r26
    4852:	bb 1f       	adc	r27, r27
    4854:	a6 17       	cp	r26, r22
    4856:	b7 07       	cpc	r27, r23
    4858:	10 f0       	brcs	.+4      	; 0x485e <__udivmodhi4_ep>
    485a:	a6 1b       	sub	r26, r22
    485c:	b7 0b       	sbc	r27, r23

0000485e <__udivmodhi4_ep>:
    485e:	88 1f       	adc	r24, r24
    4860:	99 1f       	adc	r25, r25
    4862:	5a 95       	dec	r21
    4864:	a9 f7       	brne	.-22     	; 0x4850 <__udivmodhi4_loop>
    4866:	80 95       	com	r24
    4868:	90 95       	com	r25
    486a:	bc 01       	movw	r22, r24
    486c:	cd 01       	movw	r24, r26
    486e:	08 95       	ret

00004870 <__divmodhi4>:
    4870:	97 fb       	bst	r25, 7
    4872:	09 2e       	mov	r0, r25
    4874:	07 26       	eor	r0, r23
    4876:	0a d0       	rcall	.+20     	; 0x488c <__divmodhi4_neg1>
    4878:	77 fd       	sbrc	r23, 7
    487a:	04 d0       	rcall	.+8      	; 0x4884 <__divmodhi4_neg2>
    487c:	e5 df       	rcall	.-54     	; 0x4848 <__udivmodhi4>
    487e:	06 d0       	rcall	.+12     	; 0x488c <__divmodhi4_neg1>
    4880:	00 20       	and	r0, r0
    4882:	1a f4       	brpl	.+6      	; 0x488a <__divmodhi4_exit>

00004884 <__divmodhi4_neg2>:
    4884:	70 95       	com	r23
    4886:	61 95       	neg	r22
    4888:	7f 4f       	sbci	r23, 0xFF	; 255

0000488a <__divmodhi4_exit>:
    488a:	08 95       	ret

0000488c <__divmodhi4_neg1>:
    488c:	f6 f7       	brtc	.-4      	; 0x488a <__divmodhi4_exit>
    488e:	90 95       	com	r25
    4890:	81 95       	neg	r24
    4892:	9f 4f       	sbci	r25, 0xFF	; 255
    4894:	08 95       	ret

00004896 <__udivmodsi4>:
    4896:	a1 e2       	ldi	r26, 0x21	; 33
    4898:	1a 2e       	mov	r1, r26
    489a:	aa 1b       	sub	r26, r26
    489c:	bb 1b       	sub	r27, r27
    489e:	fd 01       	movw	r30, r26
    48a0:	0d c0       	rjmp	.+26     	; 0x48bc <__udivmodsi4_ep>

000048a2 <__udivmodsi4_loop>:
    48a2:	aa 1f       	adc	r26, r26
    48a4:	bb 1f       	adc	r27, r27
    48a6:	ee 1f       	adc	r30, r30
    48a8:	ff 1f       	adc	r31, r31
    48aa:	a2 17       	cp	r26, r18
    48ac:	b3 07       	cpc	r27, r19
    48ae:	e4 07       	cpc	r30, r20
    48b0:	f5 07       	cpc	r31, r21
    48b2:	20 f0       	brcs	.+8      	; 0x48bc <__udivmodsi4_ep>
    48b4:	a2 1b       	sub	r26, r18
    48b6:	b3 0b       	sbc	r27, r19
    48b8:	e4 0b       	sbc	r30, r20
    48ba:	f5 0b       	sbc	r31, r21

000048bc <__udivmodsi4_ep>:
    48bc:	66 1f       	adc	r22, r22
    48be:	77 1f       	adc	r23, r23
    48c0:	88 1f       	adc	r24, r24
    48c2:	99 1f       	adc	r25, r25
    48c4:	1a 94       	dec	r1
    48c6:	69 f7       	brne	.-38     	; 0x48a2 <__udivmodsi4_loop>
    48c8:	60 95       	com	r22
    48ca:	70 95       	com	r23
    48cc:	80 95       	com	r24
    48ce:	90 95       	com	r25
    48d0:	9b 01       	movw	r18, r22
    48d2:	ac 01       	movw	r20, r24
    48d4:	bd 01       	movw	r22, r26
    48d6:	cf 01       	movw	r24, r30
    48d8:	08 95       	ret

000048da <__divmodsi4>:
    48da:	97 fb       	bst	r25, 7
    48dc:	09 2e       	mov	r0, r25
    48de:	05 26       	eor	r0, r21
    48e0:	0e d0       	rcall	.+28     	; 0x48fe <__divmodsi4_neg1>
    48e2:	57 fd       	sbrc	r21, 7
    48e4:	04 d0       	rcall	.+8      	; 0x48ee <__divmodsi4_neg2>
    48e6:	d7 df       	rcall	.-82     	; 0x4896 <__udivmodsi4>
    48e8:	0a d0       	rcall	.+20     	; 0x48fe <__divmodsi4_neg1>
    48ea:	00 1c       	adc	r0, r0
    48ec:	38 f4       	brcc	.+14     	; 0x48fc <__divmodsi4_exit>

000048ee <__divmodsi4_neg2>:
    48ee:	50 95       	com	r21
    48f0:	40 95       	com	r20
    48f2:	30 95       	com	r19
    48f4:	21 95       	neg	r18
    48f6:	3f 4f       	sbci	r19, 0xFF	; 255
    48f8:	4f 4f       	sbci	r20, 0xFF	; 255
    48fa:	5f 4f       	sbci	r21, 0xFF	; 255

000048fc <__divmodsi4_exit>:
    48fc:	08 95       	ret

000048fe <__divmodsi4_neg1>:
    48fe:	f6 f7       	brtc	.-4      	; 0x48fc <__divmodsi4_exit>
    4900:	90 95       	com	r25
    4902:	80 95       	com	r24
    4904:	70 95       	com	r23
    4906:	61 95       	neg	r22
    4908:	7f 4f       	sbci	r23, 0xFF	; 255
    490a:	8f 4f       	sbci	r24, 0xFF	; 255
    490c:	9f 4f       	sbci	r25, 0xFF	; 255
    490e:	08 95       	ret

00004910 <__prologue_saves__>:
    4910:	2f 92       	push	r2
    4912:	3f 92       	push	r3
    4914:	4f 92       	push	r4
    4916:	5f 92       	push	r5
    4918:	6f 92       	push	r6
    491a:	7f 92       	push	r7
    491c:	8f 92       	push	r8
    491e:	9f 92       	push	r9
    4920:	af 92       	push	r10
    4922:	bf 92       	push	r11
    4924:	cf 92       	push	r12
    4926:	df 92       	push	r13
    4928:	ef 92       	push	r14
    492a:	ff 92       	push	r15
    492c:	0f 93       	push	r16
    492e:	1f 93       	push	r17
    4930:	cf 93       	push	r28
    4932:	df 93       	push	r29
    4934:	cd b7       	in	r28, 0x3d	; 61
    4936:	de b7       	in	r29, 0x3e	; 62
    4938:	ca 1b       	sub	r28, r26
    493a:	db 0b       	sbc	r29, r27
    493c:	0f b6       	in	r0, 0x3f	; 63
    493e:	f8 94       	cli
    4940:	de bf       	out	0x3e, r29	; 62
    4942:	0f be       	out	0x3f, r0	; 63
    4944:	cd bf       	out	0x3d, r28	; 61
    4946:	09 94       	ijmp

00004948 <__epilogue_restores__>:
    4948:	2a 88       	ldd	r2, Y+18	; 0x12
    494a:	39 88       	ldd	r3, Y+17	; 0x11
    494c:	48 88       	ldd	r4, Y+16	; 0x10
    494e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4950:	6e 84       	ldd	r6, Y+14	; 0x0e
    4952:	7d 84       	ldd	r7, Y+13	; 0x0d
    4954:	8c 84       	ldd	r8, Y+12	; 0x0c
    4956:	9b 84       	ldd	r9, Y+11	; 0x0b
    4958:	aa 84       	ldd	r10, Y+10	; 0x0a
    495a:	b9 84       	ldd	r11, Y+9	; 0x09
    495c:	c8 84       	ldd	r12, Y+8	; 0x08
    495e:	df 80       	ldd	r13, Y+7	; 0x07
    4960:	ee 80       	ldd	r14, Y+6	; 0x06
    4962:	fd 80       	ldd	r15, Y+5	; 0x05
    4964:	0c 81       	ldd	r16, Y+4	; 0x04
    4966:	1b 81       	ldd	r17, Y+3	; 0x03
    4968:	aa 81       	ldd	r26, Y+2	; 0x02
    496a:	b9 81       	ldd	r27, Y+1	; 0x01
    496c:	ce 0f       	add	r28, r30
    496e:	d1 1d       	adc	r29, r1
    4970:	0f b6       	in	r0, 0x3f	; 63
    4972:	f8 94       	cli
    4974:	de bf       	out	0x3e, r29	; 62
    4976:	0f be       	out	0x3f, r0	; 63
    4978:	cd bf       	out	0x3d, r28	; 61
    497a:	ed 01       	movw	r28, r26
    497c:	08 95       	ret

0000497e <_exit>:
    497e:	f8 94       	cli

00004980 <__stop_program>:
    4980:	ff cf       	rjmp	.-2      	; 0x4980 <__stop_program>
